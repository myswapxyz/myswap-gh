{"version":3,"sources":["components/BoxHeader.js","atoms.ts","services/amm.ts","services/static_data.ts","components/Approve.js","components/Balance.js","services/wallet.service.ts","services/ga.js","components/ConnectWallet.js","components/Swap.js","components/RemoveLiquidity.js","components/LiquidityPool.js","components/Positions.js","components/Provide.js","components/Charts.js","components/Main.js","components/PendingTransaction.js","components/PendingTransactions.js","components/Toast.js","components/Toasts.js","components/Wiper.js","App.js","index.js"],"names":["DEFAULT_SLIPPAGE","BoxHeader","props","slippage","setSlippage","useState","anchorEl","setAnchorEl","handleClose","name","setRecoil","swapSlippage","addLiquiditySlippage","withdrawLiquiditySlippage","console","log","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","aria-label","onClick","event","currentTarget","mr","right","Typography","variant","component","Menu","id","boxShadow","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","PaperProps","style","width","open","Boolean","onClose","MenuItem","fontSize","fontWeight","Input","ml","mb","value","onChange","target","onKeyPress","key","inputProps","step","min","max","type","Grid","item","container","justifyContent","Button","textWeight","mt","walletAddressState","atom","default","poolsState","Map","tokensState","tokensUserDataState","pendingTxsState","Array","toastsState","transactionsStatusSelector","selectorFamily","get","componentName","pendingTx","filter","t","walletAmountsSelector","selector","r","forEach","tud","address","undefined","userBalance","token","decimals","set","walletAllowanceSelector","userApproved","lastTxDoneSelector","tx","hash","status","done","includes","safeToSendTxSelector","n","length","swapSelector","stark","getSelectorFromName","addLiquiditySelector","withdrawLiquiditySelector","getLPBalanceSelector","amm_contract","amm_contract_decimal","BigNumber","toString","selector_get_total_number_of_pools","selector_get_pool","selector_get_total_shares","approveSelector","selector_name","selector_symbol","selector_balanceOf","selector_allowance","selector_decimals","WALLET_SUFFICIENT_BALANCE","numFormat","num","isPercent","res","shiftedBy","sd","ROUND_DOWN","toPrecision","lt","toFixed","tokenAllowanceForAMM","ret","getRecoil","isTokenApproved","amount","tokenAllowance","gte","float_to_decimal_int","e","checkAndUpdateComponentTransactions","transactionsStatus","componentTxs","setTransactionInProgress","hasOwnProperty","some","s","getPoolPriceForTokenA","poolId","token_in","token_out","otherAmount","pool","ratio","token1","decimal_int_to_float","token2Amount","times","div","token1Amount","getWalletTokenAmount","activeAccount","walletAddress","isSufficientBalanceInWallet","tokenWalletAmount","isPositive","lte","addToastMsg","msg","dismiss","random","current","updatePoolsAndTokens","async","starknet","getStarknet","provider","callContract","contract_address","entry_point_selector","calldata","numPools","Number","result","pools","tokens","new_pools","new_tokens","i","currentPool","refresh","Date","now","SECS_TO_REFRESH_POOL_DATA","data","shares","hex_to_ascii","composeUInt256","token2","fee","cfmm","alsoUpdateTokens","symbol","icon","promises","p","then","push","p1","p2","Promise","allSettled","updateAllTokensDynamicData","_","updateTokenDynamicData","updatePoolDynamicData","curVal","updatePoolData","isConnected","Error","token_address","current_token","t_thresh","currentTud","newMap","ammBalance","balance","numberToCallParam","p3","addPendingTx","approve","tokenFrom","safeToSend","signer","invokeFunction","transaction_hash","low","high","plus","pow","str1","hex","substr","str","String","fromCharCode","parseInt","human_readable_hash","getPoolIdFromTokens","t1","t2","sortTokens","calcOtherTokenAmount","token_leading","token_other","token_leading_amount_float","leading_token_number","token_leading_amount","token_leading_reserve","token_other_reserve","minus","calcOtherTokenRequiredAmountForLiquidity","token_a","token_b","token_a_float","token_a_amount","price","SERVER_URL","DEFAULT_APPROVE_AMOUNT","BigInt","Approve","useRecoilState","connectedAddress","tokenApproveInProgress","setTokenApproveInProgress","approveTxCompletedSuccessfully","setApproveTxCompletedSuccessfully","setComponentTxs","tokenAmount","activePoolId","tokenInRange","useEffect","approveTxStatusUpdateCallback","handleApproveToken","approveAmount","prevState","message","token_obj","LoadingButton","fullWidth","loading","loadingPosition","startIcon","Balance","showMaxButton","setMaxAmountHandler","walletAmount","enable","networkId","baseUrl","getExplorerUrlBase","is_ga_initialized","GAinit","ReactGA","initialize","GApage","page","pageview","GAbutton","label","cat","action","category","GAtrack","ConnectWallet","walletConnectionStatus","setWalletConnectionStatus","voyagerBaseUrl","setVoyagerBaseUrl","networkName","setNetworkName","changeListenerRegistered","setChangeListenerRegistered","setAddress","handleClick","showModal","connectWallet","secondary","handleWalletChange","accounts","handleEvent","on","addWalletChangeListener","disabled","className","handleConnectedClick","window","fill","MAX_SAFE_INTEGER","Swap","setActivePoolId","setToken1","setToken1Amount","setToken2","setToken2Amount","leadingToken","setLeadingToken","swapInProgress","setSwapInProgress","tuds","useInterval","handleTokenAmountChange","regex","test","menuItems","otherSelectedToken","direction","src","alt","height","calcToken2MinAmount","parseFloat","handleSwap","minAmountOut","swapAmount","swap","priceDirection","setPriceDirection","border","Card","spacing","xs","FormControl","InputLabel","Select","labelId","TextField","helperText","placeholder","autoComplete","error","alignItems","tmpToken","tmpAmount","isZero","currentPrice","minAmount","token1Symbol","token2Symbol","floatSlippage","transactionPrice","transactionPriceInv","priceImpact","backgroundColor","gt","displayPrice1","displayPrice2","CardActionArea","priceAndSlippage","minWidth","token1SufficientBalance","token2InsufficientPoolBalance","floatAmount","decimalAmount","isInsufficientBalanceInPool","instruction","swapButton","Item","styled","Paper","theme","typography","body2","padding","textAlign","palette","text","MuiInput","RemoveLiquidity","setOpen","percent","setPercent","removeLiquidityInProgress","setRemoveLiquidityInProgress","openRemoveLiquidity","updateState","newPercent","setAmounts","Dialog","DialogContent","DialogContentText","Slider","defaultValue","valueLabelDisplay","marks","aria-labelledby","onBlur","CardHeader","title","disableTypography","Stack","token1Icon","token2Icon","DialogActions","sharesToWithdraw","minToken1Amount","minToken2Amount","tmp","pool_id","token_a_min_amount","token_b_min_amount","withdraw_liquidity","LiquidityPool","setOpenRemoveLiquidity","userPoolShare","userToken1Amount","user_share","userToken1AmountDecimal","userToken2Amount","userToken2AmountDecimal","CardContent","gutterBottom","d1","d2","d_balance","Math","floor","CardActions","renderRemoveLiquidity","Positions","userPools","setUserPools","fetchBalance","getLPBalance","prev","m","allPools","Provide","addLiquidityInProgress","setAddLiquidityInProgress","approveToken1TxCompletedSuccessfully","setApproveToken1TxCompletedSuccessfully","approveToken2TxCompletedSuccessfully","setApproveToken2TxCompletedSuccessfully","handleAddLiquidity","minAmount1Out","minAmount2Out","token_a_address","token_b_address","token_b_amount","add_liquidity","symbol1","symbol2","priceForToken1","priceForToken2","pool_share","lineHeight","priceAndShare","token2SufficientBalance","addLiquidityButton","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Charts","align","Main","selectedTab","setSelectedTab","Tabs","newValue","centered","Tab","PendingTransaction","transactionStatus","PendingTransactions","txs","getTransactionStatus","pendingTxs","find","tx_status","currTxs","tx_","Object","assign","getTransactionUpdate","split","map","x","toUpperCase","slice","join","pendingTransactions","Toast","React","reason","Snackbar","autoHideDuration","Alert","severity","Toasts","toasts","allActiveToasts","activeToasts","Wiper","mintedTokens","setMintedTokens","waitingToWipe","setWaitingToWipe","walletAmounts","walletAllowances","lastTxDone","startWipe","setStartWipe","mintedState","0","1","2","wipeNextToken","shift","entries","xx","entry","minted","approvedAmount","myTokensList","waitingToWipeList","App","fetch","json","fetchAmmInfo","numberOfPools","d","poolName","tokenAAddress","tokenAReserves","tokenBAddress","tokenBReserves","feePercentage","fetchPools","numberOfTokens","tokenAddress","tokenName","tokenSymbol","tokenIcon","tokenDecimals","fetchTokens","updatePoolsAndTokensStatic","RecoilNexus","exact","path","Container","maxWidth","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.a5ac00ce.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { setRecoil } from 'recoil-nexus'\nimport { swapSlippage, addLiquiditySlippage, withdrawLiquiditySlippage } from '../atoms'\nimport {\n    MenuItem,\n    Typography,\n    AppBar,\n    Box,\n    Toolbar,\n    IconButton,\n    Input,\n    Button,\n    Grid,\n    Menu\n} from '@mui/material'\nimport SettingsIcon from '@mui/icons-material/Settings'\n\nexport const DEFAULT_SLIPPAGE = '0.50'\n\nfunction BoxHeader(props) {\n    const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    const handleSlippageChange = (event) => {\n        setSlippage(event.target.value)\n    }\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleClose = () => {\n        if (props.name === 'Swap') setRecoil(swapSlippage, slippage)\n        if (props.name === 'Add Liquidity') setRecoil(addLiquiditySlippage, slippage)\n        if (props.name === 'Remove Liquidity')\n            setRecoil(withdrawLiquiditySlippage, slippage)\n\n        console.log('Slippage set to: ', slippage)\n        setAnchorEl(null)\n    }\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position='static'>\n                <Toolbar>\n                    <IconButton\n                        size='large'\n                        edge='start'\n                        color='inherit'\n                        aria-label='menu'\n                        onClick={handleMenu}\n                        sx={{ mr: 2, position: 'absolute', right: '0%' }}>\n                        <SettingsIcon></SettingsIcon>\n                    </IconButton>\n                    <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\n                        {props.name}\n                    </Typography>\n                    <div>\n                        <Menu\n                            id='menuAppBar'\n                            sx={{ boxShadow: 1 }}\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right'\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right'\n                            }}\n                            PaperProps={{\n                                style: {\n                                    width: 250\n                                }\n                            }}\n                            open={Boolean(anchorEl)}\n                            onClose={handleClose}>\n                            <MenuItem sx={{ fontSize: 14, fontWeight: 'bold' }}>\n                                Transaction Settings\n                            </MenuItem>\n                            <MenuItem>\n                                Set Slippage\n                                <Input\n                                    sx={{ ml: 3, mb: 0 }}\n                                    value={slippage}\n                                    size='small'\n                                    onChange={handleSlippageChange}\n                                    onKeyPress={(event) => {\n                                        if (event.key === 'Enter') handleClose()\n                                    }}\n                                    inputProps={{\n                                        step: 0.01,\n                                        min: 0,\n                                        max: 100,\n                                        type: 'number',\n                                        'aria-labelledby': 'input-slider'\n                                    }}\n                                />\n                            </MenuItem>\n                            <Grid item container justifyContent='center'>\n                                <Button\n                                    variant='contained'\n                                    size='small'\n                                    sx={{ textWeight: 'bold', mt: 1 }}\n                                    onClick={handleClose}>\n                                    OK\n                                </Button>\n                            </Grid>\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    )\n}\n\nexport default BoxHeader\n","import { atom, selector, selectorFamily } from 'recoil'\nimport { DEFAULT_SLIPPAGE } from './components/BoxHeader'\n\n//const { persistAtom } = recoilPersist() // not currently used\n\nexport interface Pool {\n    id: number\n    name: string\n    token1: string\n    token1Amount: string // dynamic TODO: | undefined\n    token2: string\n    token2Amount: string // dynamic TODO: | undefined\n    refresh: number // when is the last time we refreshed this pool's data\n    fee: number\n    shares: string\n    cfmm: number\n}\n\n// static Token data\nexport interface Token {\n    name: string\n    symbol: string\n    address: string\n    decimals: number\n    id: number\n    icon: string // url\n}\n\n// dynamic Token data\nexport interface TokenUserData {\n    address: string\n    ammBalance: string | undefined\n    userBalance: string | undefined\n    userApproved: string | undefined\n    refresh: number // when is the last time we refreshed the user data for this token\n}\n\nexport interface Transaction {\n    hash: string\n    type: string\n    status: string\n    dismiss: boolean // TODO : remove\n    // TODO add acceptance time\n}\n\nexport interface ToastMsg {\n    msg: string\n    type: string\n    dismiss: boolean\n    hash: string // for uniqueness\n}\n\nexport const walletAddressState = atom({\n    key: 'walletAddressState',\n    default: ''\n})\n\nexport const isWalletConnectedState = atom({\n    key: 'isWalletConnectedState',\n    default: 0 // 0-not connected, 1=being connected, 2=connected\n})\n\nexport const poolsState = atom({\n    key: 'poolsState',\n    //    effects_UNSTABLE: [persistAtom],\n    default: new Map<number, Pool>()\n})\n\nexport const tokensState = atom({\n    key: 'tokensState',\n    //  effects_UNSTABLE: [persistAtom],\n    default: new Map<string, Token>()\n})\n\nexport const tokensUserDataState = atom({\n    key: 'tokensUserDataState',\n    default: new Map<string, TokenUserData>()\n})\n\nexport const pendingTxsState = atom({\n    key: 'pendingTxsState',\n    default: new Array<Transaction>()\n})\n\nexport const toastsState = atom({\n    key: 'toastsState',\n    default: new Array<ToastMsg>()\n})\n\nexport const swapSlippage = atom({\n    key: 'swapSlippage',\n    default: DEFAULT_SLIPPAGE\n})\n\nexport const addLiquiditySlippage = atom({\n    key: 'addLiquiditySlippage',\n    default: DEFAULT_SLIPPAGE\n})\n\nexport const withdrawLiquiditySlippage = atom({\n    key: 'withdrawLiquiditySlippage',\n    default: DEFAULT_SLIPPAGE\n})\n\n\n// Selectors\n\nexport const transactionsStatusSelector = selectorFamily ({\n    key: 'transactionsStatusSelector',\n    get: (componentName: string) => ({ get }): Array<Transaction> | undefined => {\n        let pendingTx = get(pendingTxsState)\n        if (pendingTx)\n            return pendingTx.filter(t => t.type === componentName)\n        return undefined\n    }\n})\n\nexport const walletAmountsSelector = selector({\n    key: 'walletAmountsSelector',\n    get: ({ get }): Map<string, string> => {\n        let r = new Map<string, string>()\n        get(tokensUserDataState).forEach((tud, address) => {\n            if (tud.userBalance !== undefined) {\n                let token = get(tokensState).get(address)\n                if (token && token.decimals) {\n                    r.set(address, tud.userBalance)\n                }\n            }\n        })\n        return r\n    }\n})\n\nexport const walletAllowanceSelector = selector({\n    key: 'walletAllowanceSelector',\n    get: ({ get }): Map<string, string> => {\n        let r = new Map<string, string>()\n        get(tokensUserDataState).forEach((tud, address) => {\n            if (tud.userApproved !== undefined) {\n                let token = get(tokensState).get(address)\n                if (token && token.decimals) {\n                    r.set(address, tud.userApproved)\n                }\n            }\n        })\n        return r\n    }\n})\n\nexport const pendingTxSelector = selector({\n    key: 'pendingTxSelector',\n    get: ({ get }): Map<string, string> => {\n        let r = new Map<string, string>()\n        get(pendingTxsState).forEach((tx) => {\n            r.set(tx.hash, tx.status)\n        })\n        return r\n    }\n})\n\nexport const lastTxDoneSelector = selector({\n    key: 'lastTxDoneSelector',\n    get: ({ get }): boolean => {\n        let done = true\n        get(pendingTxsState).forEach((tx) => {\n            done = false\n            if (tx.status === 'REJECTED' || tx.status.includes('ACCEPTED')) done = true\n        })\n        return done\n    }\n})\n\nexport const safeToSendTxSelector = selector({\n    key: 'safeToSendTxSelector',\n    get: ({ get }): boolean => {\n        const n = get(pendingTxsState).length\n        if (n === 0) return true\n\n        const tx = get(pendingTxsState)[n - 1]\n        if (tx.status.includes('REJECTED') || tx.status.includes('ACCEPTED')) return true //TODO: once Argent fix starknet.js, we need to add 'PENDING' as well\n\n        return false\n    }\n})\n","import { getRecoil, setRecoil } from 'recoil-nexus'\nimport { BigNumber } from 'bignumber.js'\nimport { stark } from 'starknet'\nimport { getStarknet } from '@argent/get-starknet'\n\nimport {\n    walletAddressState,\n    poolsState,\n    tokensState,\n    tokensUserDataState,\n    Pool,\n    Token,\n    TokenUserData,\n    pendingTxsState,\n    Transaction,\n    ToastMsg,\n    toastsState,\n    safeToSendTxSelector\n} from '../atoms'\n\n\n\n// amm\nconst swapSelector = stark.getSelectorFromName('swap')\nconst addLiquiditySelector = stark.getSelectorFromName('add_liquidity')\nconst withdrawLiquiditySelector = stark.getSelectorFromName('withdraw_liquidity')\nconst getLPBalanceSelector = stark.getSelectorFromName('get_lp_balance')\n//const amm_contract = '0x008fb0ec84a7025839faafbf9eeee6b6e9957d50bd418a334d00740fbb9f6170'\nconst amm_contract = '0xfbcbc5f1db50c34094223c2b575e65fedb363ae6a0885613c25879b931d5e7'\nconst amm_contract_decimal = BigNumber(amm_contract).toString(10)\n\nconst selector_get_total_number_of_pools = stark.getSelectorFromName(\n    'get_total_number_of_pools'\n)\nconst selector_get_pool = stark.getSelectorFromName('get_pool')\nconst selector_get_total_shares = stark.getSelectorFromName('get_total_shares')\n//const selector_get_pool_token_balance = stark.getSelectorFromName(\"get_pool_token_balance\")\n\n// ERC20\nconst approveSelector = stark.getSelectorFromName('approve')\nconst mintSelector = stark.getSelectorFromName('mint')\n\nconst selector_name = stark.getSelectorFromName('name')\nconst selector_symbol = stark.getSelectorFromName('symbol')\nconst selector_balanceOf = stark.getSelectorFromName('balanceOf')\nconst selector_allowance = stark.getSelectorFromName('allowance')\nconst selector_decimals = stark.getSelectorFromName('decimals')\n\nconst SECS_TO_REFRESH_POOL_DATA = 60\n\nexport const WALLET_SUFFICIENT_BALANCE = {\n    FALSE: 0,\n    TRUE: 1,\n    UNKNOWN: 2\n}\n\nconst is_dev = () : boolean => {\n    //return (process.env.NODE_ENV) === 'development'\n    return false\n}\n\n\nexport const numFormat = (num: string, isPercent = false): string => {\n    if (num === undefined || num === '' ) return ''\n\n    if (isPercent) {\n        let res = BigNumber(num).shiftedBy(2).sd(4, BigNumber.ROUND_DOWN).toPrecision(4)\n        if (BigNumber(res).lt(0.01)) return '<0.01'\n        return res\n    }\n\n    if (BigNumber(num).lt(1)) {\n        // BigNumber(0.012340000).sd(2).toString(10) --> '0.012'\n        let res = BigNumber(num).sd(6).toFixed(18, BigNumber.ROUND_DOWN)    // FIXME: need to align to token decimals (not 18).... 6 is a magic number...\n        // patch:\n        return BigNumber(res).toString(10)\n    }\n    return BigNumber(num).toFixed(2)\n}\n\n\nexport const tokenAllowanceForAMM = (token: string) => {\n    let ret = null\n    if (token) {\n        let tokensUserData = getRecoil(tokensUserDataState)\n        let tud = tokensUserData.get(token)\n        if (tud) {\n            ret = tud.userApproved\n            // console.log('tokenAllowanceForAMM tud.userApproved = ', tud.userApproved)\n        }\n    }\n    return ret\n}\n\nexport const isTokenApproved = (token: string, amount: string): boolean => {\n    // Yaron: why do we need try-catch here? this is not an async function, how can it fail?\n    try {\n        let tokenAllowance = tokenAllowanceForAMM(token)    // should return a string\n        if (\n            tokenAllowance &&\n            BigNumber(tokenAllowance).gte(BigNumber(float_to_decimal_int(token, amount)))\n        ) {\n            return true\n        }\n    } catch (e) {}\n    return false\n}\n\n\nexport const checkAndUpdateComponentTransactions = (\n    transactionsStatus: Array<Transaction>,\n    componentTxs: Record<string, string>,\n    setTransactionInProgress: (b: boolean) => any\n) => {\n    console.log('Entered checkAndUpdateComponentTransactions...')\n    if (transactionsStatus) {\n        transactionsStatus.forEach((tx) => {\n            console.log('checkAndUpdateComponentTransactions: ', tx.status, tx.hash, typeof(tx.hash), componentTxs, componentTxs.hasOwnProperty(tx.hash))\n\n            // check if transaction was already handled\n            if (componentTxs.hasOwnProperty(tx.hash)) {\n                console.log('componentTxs has hash ', tx.hash)\n                if (\n                    ['REJECTED', /*'PENDING',*/ 'ACCEPTED'].some((s) => tx.status.includes(s))\n                ) {\n                    console.log('Setting transaction in progress to false')\n                    setTransactionInProgress(false)\n                    delete componentTxs[tx.hash]\n                }\n            }\n        })\n    }\n}\n\n\nexport const getPoolPriceForTokenA = (poolId: number, token_in: string, token_out: string, otherAmount='1'): string => {\n    let pools = getRecoil(poolsState)\n    let pool = pools.get(poolId)\n    let ratio = BigNumber(1.0)\n\n    if (pool) {\n\n        if (pool.token1 === token_in) {\n            ratio = BigNumber(decimal_int_to_float(token_out, pool.token2Amount)).times(BigNumber(otherAmount)).div(\n                BigNumber(decimal_int_to_float(token_in, pool.token1Amount))\n            )\n        } else {\n            ratio = BigNumber(decimal_int_to_float(token_out, pool.token1Amount)).times(BigNumber(otherAmount)).div(\n                BigNumber(decimal_int_to_float(token_in, pool.token2Amount))\n            )\n        }\n    }\n    //console.log('Ratio', ratio.toString(10))\n    return ratio.toString(10)\n}\n\n\nexport const getWalletTokenAmount = (token: string) : string => {\n    if (is_dev()) console.log('amm: getWalletTokemAmount, token=',token)\n\n    let activeAccount: string = walletAddress()\n    let tokensUserData = getRecoil(tokensUserDataState)\n    let tud = tokensUserData.get(token)     // expecting that tud values will be strings\n\n    if (!activeAccount || !token || !tud || tud.userBalance === undefined) return ''\n\n    return decimal_int_to_float(token, tud.userBalance)\n}\n\n\nexport const isSufficientBalanceInWallet = (token: string, amount: string) => {\n\n    if (is_dev()) console.log('amm: isSufficientBalanceInWallet, token=',token,' amount=',amount)\n\n\n    let activeAccount: string = walletAddress()\n    let tokensUserData = getRecoil(tokensUserDataState)\n    let tud = tokensUserData.get(token)\n\n    if (!activeAccount) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n    if (!token) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n    if (!amount) return WALLET_SUFFICIENT_BALANCE.TRUE\n    if (!tud) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n    if (tud.userBalance === undefined) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n\n    // The actual check:\n    let tokenWalletAmount = decimal_int_to_float(token, tud.userBalance)\n\n    if (\n        BigNumber(amount).isPositive() &&\n        BigNumber(amount).lte(BigNumber(tokenWalletAmount))\n    )\n        return WALLET_SUFFICIENT_BALANCE.TRUE\n\n    return WALLET_SUFFICIENT_BALANCE.FALSE\n}\n\nexport const isInsufficientBalanceInPool = (\n    poolId: number,\n    token: string,\n    floatAmount: string\n) : boolean => {\n\n    if (is_dev()) console.log('amm: isInsufficientBalanceInPool, pool=',poolId,' token=',token,' amount=',floatAmount)\n\n    if (!token || poolId <= 0) return false\n\n    let pools = getRecoil(poolsState)\n    let pool: Pool | undefined = pools.get(poolId)\n    if (!pool) throw Error('missing pool ' + poolId)\n\n    let decimalAmount = float_to_decimal_int(token, floatAmount)\n\n    if (pool.token1 === token) {\n        return BigNumber(decimalAmount).gt(BigNumber(pool.token1Amount))\n    } else {\n        return BigNumber(decimalAmount).gt(BigNumber(pool.token2Amount))\n    }\n}\n\nexport const addToastMsg = (msg: string, type: string) => {\n    let t: ToastMsg = { msg: msg, type: type, dismiss: false, hash: BigNumber.random(10).times(1e10).toString(16) }\n    setRecoil(toastsState, (current: Array<ToastMsg>) => {\n        return [...current, t]\n    })\n}\n\nconst walletAddress = () => {\n    return getRecoil(walletAddressState)\n}\n\nexport const updatePoolsAndTokens = async (alsoUpdateTokens: boolean): Promise<any> => {\n    console.log('updatePoolsAndTokens')\n    if (is_dev()) addToastMsg('updatePoolsAndTokens, tokens='+alsoUpdateTokens, 'info')\n\n    const starknet = getStarknet()\n\n    let r = await starknet.provider.callContract({\n        contract_address: amm_contract,\n        entry_point_selector: selector_get_total_number_of_pools,\n        calldata: []\n    })\n\n    let numPools = Number(r.result[0])\n    let pools = getRecoil(poolsState)\n    let tokens = getRecoil(tokensState)\n    let new_pools = new Map<number, Pool>()\n    let new_tokens = new Map(tokens)\n\n    for (let i = 1; i <= numPools; i++) {\n        let currentPool = pools.get(i)\n        if (\n            currentPool &&\n            currentPool.refresh > Date.now() - SECS_TO_REFRESH_POOL_DATA * 1000\n        ) {\n            new_pools.set(i, currentPool)\n            continue // don't refresh\n        }\n        if (currentPool) {\n            console.log('will fetch pool data for pool ',i,' seconds passed=',(Date.now()-currentPool.refresh)/1000)\n        } else {\n            console.log('will fetch pool data id=',i,' since pool is null!')\n        }\n        let data = await starknet.provider.callContract({\n            contract_address: amm_contract,\n            entry_point_selector: selector_get_pool,\n            calldata: [i.toString()]\n        })\n\n        let shares = await starknet.provider.callContract({\n            contract_address: amm_contract,\n            entry_point_selector: selector_get_total_shares,\n            calldata: [i.toString()]\n        })\n\n        console.log(data)\n        let pool: Pool = {\n            id: i,\n            name: hex_to_ascii(data.result[0]),\n            token1: data.result[1],\n            token1Amount: composeUInt256(data.result[2], data.result[3]),\n            token2: data.result[4],\n            token2Amount: composeUInt256(data.result[5], data.result[6]),\n            fee: Number(data.result[7]) / 1e5,\n            cfmm: Number(data.result[8]),\n            shares: composeUInt256(shares.result[0], shares.result[1]),\n            refresh: Date.now()\n        }\n        new_pools.set(i, pool)\n\n        if (alsoUpdateTokens) {\n            if (!new_tokens.get(pool.token1)) {\n                let n = new_tokens.size\n                console.log('new token1 n=', n)\n                let t: Token = {\n                    address: pool.token1,\n                    id: n,\n                    name: '',\n                    symbol: '',\n                    icon: 'https://github.com/myswapxyz/static_data/raw/master/icons8-exchange-96.png',\n                    decimals: 0\n                }\n                new_tokens.set(pool.token1, t)\n            }\n            if (!new_tokens.get(pool.token2)) {\n                let n = new_tokens.size\n                console.log('new token2 n=', n)\n                let t: Token = {\n                    address: pool.token2,\n                    id: n,\n                    name: '',\n                    symbol: '',\n                    icon: 'https://github.com/myswapxyz/static_data/raw/master/icons8-exchange-96.png',\n                    decimals: 0\n                }\n                new_tokens.set(pool.token2, t)\n            }\n        }\n    }\n\n    // fetch token names and precision\n    if (alsoUpdateTokens) {\n        let promises: Array<Promise<any>> = []\n        new_tokens.forEach((value: Token, address: string) => {\n            let p = starknet.provider\n                .callContract({\n                    contract_address: address,\n                    entry_point_selector: selector_name,\n                    calldata: []\n                })\n                .then((data: any) => {\n                    const name = hex_to_ascii(data.result[0])\n                    console.log('name=', name)\n                    value.name = name\n                })\n            promises.push(p)\n            let p1 = starknet.provider\n                .callContract({\n                    contract_address: address,\n                    entry_point_selector: selector_symbol,\n                    calldata: []\n                })\n                .then((data: any) => {\n                    const name = hex_to_ascii(data.result[0])\n                    console.log('symbol=', name)\n                    value.symbol = name\n                })\n            promises.push(p1)\n\n            let p2 = starknet.provider\n                .callContract({\n                    contract_address: address,\n                    entry_point_selector: selector_decimals,\n                    calldata: []\n                })\n                .then((data: any) => {\n                    const decimals = Number(data.result[0])\n                    value.decimals = decimals\n                })\n            promises.push(p2)\n        })\n        await Promise.allSettled(promises)\n\n        // update tokens in recoil (before pools!)\n        setRecoil(tokensState, new_tokens)\n        console.log('tokens=', new_tokens)\n    }\n\n    // update pools in recoil\n    setRecoil(poolsState, new_pools)\n}\n\nexport const updateAllTokensDynamicData = async (): Promise<any> => {\n    let tokens = getRecoil(tokensState)\n    tokens.forEach((_, token) => {\n        console.log('updateAllTokensDynamicData: token=', token)\n        updateTokenDynamicData(token)\n    })\n}\n\nexport const updatePoolData = async(i: number) : Promise<boolean> => {\n    let pools = getRecoil(poolsState)\n    let currentPool = pools.get(i)\n    let now = Date.now()\n    if (\n        currentPool &&\n        currentPool.refresh > now - SECS_TO_REFRESH_POOL_DATA * 1000\n    ) {\n        console.log('not updating pool ',i,' , not enough time since last update')\n        return false\n    }\n\n    const starknet = getStarknet()\n\n    let data = await starknet.provider.callContract({\n        contract_address: amm_contract,\n        entry_point_selector: selector_get_pool,\n        calldata: [i.toString()]\n    })\n\n    let shares = await starknet.provider.callContract({\n        contract_address: amm_contract,\n        entry_point_selector: selector_get_total_shares,\n        calldata: [i.toString()]\n    })\n\n    let pool: Pool = {\n        id: i,\n        name: hex_to_ascii(data.result[0]),\n        token1: data.result[1],\n        token1Amount: composeUInt256(data.result[2], data.result[3]),\n        token2: data.result[4],\n        token2Amount: composeUInt256(data.result[5], data.result[6]),\n        fee: Number(data.result[7]) / 1e5,\n        cfmm: Number(data.result[8]),\n        shares: composeUInt256(shares.result[0], shares.result[1]),\n        refresh: now\n    }\n    setRecoil(poolsState, (curVal: Map<number, Pool>)=>{\n        let p = new Map(curVal)\n        p.set(i, pool)\n        return p\n    })    \n    console.log('updated pool ',i)\n    return true\n}\n\nexport const updatePoolDynamicData = async (poolId: number): Promise<any> => {\n\n    if (is_dev()) addToastMsg('updatePoolDynamicData, pool='+poolId, 'info')\n\n    let b = updatePoolData(poolId)\n    if (!b) return\n\n    let activeAccount: string = walletAddress()\n    \n    if (!activeAccount) {\n        return null\n    }\n    \n    let pools = getRecoil(poolsState)\n    let tokens = getRecoil(tokensState)    \n\n    const starknet = getStarknet()\n\n    // checks that enable succeeded\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let pool: Pool | undefined = pools.get(poolId)\n    if (!pool) throw Error('unknown pool ' + poolId)\n\n    let token1: Token | undefined = tokens.get(pool.token1)\n    let token2: Token | undefined = tokens.get(pool.token2)\n    if (!token1) throw Error('missing token ' + pool.token1)\n    if (!token2) throw Error('missing token ' + pool.token2)\n\n    // so far everything must have been stored in recoil\n    // now we update dynamic data: per token in pool\n    updateTokenDynamicData(pool.token1)\n    updateTokenDynamicData(pool.token2)\n}\n\nexport const updateTokenDynamicData = async (token_address: string): Promise<any> => {\n    if (!token_address) return null\n    if (is_dev()) addToastMsg('updateTokenDynamicData, token='+token_address, 'info')\n\n    const starknet = getStarknet()\n    let promises: Array<Promise<any>> = []\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    let tokensDynamic = getRecoil(tokensUserDataState)\n    let current_token = tokensDynamic.get(token_address)\n    if (current_token) {\n        const t_thresh = Date.now() - SECS_TO_REFRESH_POOL_DATA * 1000\n        if (current_token.refresh > t_thresh) {\n            console.log('not enough time passed, not updating tud')\n            return null\n        }\n    } else {\n        // new token - first store an empty shell in Recoil, then the async requests will update it\n        setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n            let newMap = new Map(currentTud)\n            if (!newMap.get(token_address)) {\n                let tud: TokenUserData = {\n                    address: token_address,\n                    refresh: Date.now(),\n                    ammBalance: undefined,\n                    userBalance: undefined,\n                    userApproved: undefined\n                }\n                newMap.set(token_address, tud)\n            } \n            return newMap\n        })\n    }\n    console.log('updating tud, ',token_address)\n    let p1 = starknet.provider\n        .callContract({\n            contract_address: token_address,\n            entry_point_selector: selector_balanceOf,\n            calldata: [amm_contract_decimal]\n        })\n        .then((data: any) => {\n            const balance = composeUInt256(data.result[0], data.result[1])\n            // update balance directly in recoil\n            setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n                let newMap = new Map(currentTud)\n                let tud = newMap.get(token_address)\n                if (tud) {\n                    tud.ammBalance = balance\n                    tud.refresh = Date.now()\n                    newMap.set(tud.address, tud)\n                }\n                return newMap\n            })\n\n        })\n    promises.push(p1)\n\n    let p2 = starknet.provider\n        .callContract({\n            contract_address: token_address,\n            entry_point_selector: selector_balanceOf,\n            calldata: [numberToCallParam(activeAccount)]\n        })\n        .then((data: any) => {\n            // update balance directly in recoil\n            const balance = composeUInt256(data.result[0], data.result[1])\n            setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n                let newMap = new Map(currentTud)\n                let tud = newMap.get(token_address)\n                if (tud) {\n                    tud.userBalance = balance\n                    tud.refresh = Date.now()\n                    newMap.set(tud.address, tud)\n                }\n                return newMap\n            })\n        })\n    promises.push(p2)\n\n    let p3 = starknet.provider\n        .callContract({\n            contract_address: token_address,\n            entry_point_selector: selector_allowance,\n            calldata: [numberToCallParam(activeAccount), numberToCallParam(amm_contract)]\n        })\n        .then((data: any) => {\n            const balance = composeUInt256(data.result[0], data.result[1])\n            setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n                let newMap = new Map(currentTud)\n                let tud = newMap.get(token_address)\n                if (tud) {\n                    tud.userApproved = balance\n                    tud.refresh = Date.now()\n                    newMap.set(tud.address, tud)\n                }\n                return newMap\n            })\n        })\n    promises.push(p3)\n\n    await Promise.allSettled(promises)\n}\n\nfunction addPendingTx(hash: string, type: string) {\n    // fixme: use 'type' as enum and not freestyle strings\n    let tx: Transaction = {\n        hash: hash,\n        type: type,\n        status: 'new',\n        dismiss: false\n    }\n    setRecoil(pendingTxsState, (current: Array<Transaction>) => {\n        return [...current, tx]\n    })\n}\n\nexport const approve = async (tokenFrom: string, amount: string): Promise<any> => {\n    console.log('Entered approve')\n\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        tokenFrom, // to (ERC-20 contract)\n        approveSelector, // selector (approve)\n        [numberToCallParam(amm_contract), numberToCallParam(amount), numberToCallParam(0)]\n    )\n\n    console.log('Adding transaction - approve')\n    addPendingTx(tx.transaction_hash, 'approve')\n\n    return tx\n}\n\nexport const getAllowance = async (tokenFrom: string): Promise<any> => {\n    console.log('getAllowance')\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    // checks that enable succeeded\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    return ERC20_allowance(tokenFrom, activeAccount, amm_contract)\n}\n\nexport const ERC20_balanceOf = async (token: string, account: string): Promise<any> => {\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let data = await starknet.provider.callContract({\n        contract_address: token,\n        entry_point_selector: selector_balanceOf,\n        calldata: [numberToCallParam(account)]\n    })\n\n    const balance = composeUInt256(data.result[0], data.result[1])\n\n    return balance\n}\n\nexport const ERC20_allowance = async (\n    token: string,\n    owner: string,\n    spender: string\n): Promise<any> => {\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let data = await starknet.provider.callContract({\n        contract_address: token,\n        entry_point_selector: selector_allowance,\n        calldata: [numberToCallParam(owner), numberToCallParam(spender)]\n    })\n\n    const balance = composeUInt256(data.result[0], data.result[1])\n    return balance\n}\n\nexport const ERC20_mint = async (token: string, amount: string): Promise<any> => {\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        token, // to (ERC-20 contract)\n        mintSelector, // selector (mint)\n        [\n            numberToCallParam(activeAccount),\n            numberToCallParam(amount),\n            numberToCallParam(0)\n        ]\n    )\n\n    addPendingTx(tx.transaction_hash, 'mint')\n\n    return tx\n}\n\nexport const swap = async (\n    poolId: number,\n    tokenFrom: string,\n    swapAmount: string,\n    minAmountOut: string\n): Promise<any> => {\n    console.log('swap')\n\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        amm_contract, // to\n        swapSelector, // selector (swap)\n        [\n            numberToCallParam(poolId),\n            numberToCallParam(tokenFrom),\n            numberToCallParam(swapAmount),\n            numberToCallParam(0),\n            numberToCallParam(minAmountOut),\n            numberToCallParam(0)\n        ]\n    )\n\n    addPendingTx(tx.transaction_hash, 'swap')\n    return tx\n}\n\nexport const getLPBalance = async (pool_id: number, address: string): Promise<any> => {\n    const starknet = getStarknet()\n\n    if (!address) {\n        return null\n    }\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let data = await starknet.provider.callContract({\n        contract_address: amm_contract,\n        entry_point_selector: getLPBalanceSelector,\n        calldata: [numberToCallParam(pool_id), numberToCallParam(address)]\n    })\n\n    const balance = composeUInt256(data.result[0], data.result[1])\n\n    return balance\n}\n\nexport const composeUInt256 = (low: string, high: string): string => {\n    return BigNumber(low).plus(BigNumber(high).times(BigNumber(2).pow(128))).toString(10)\n}\n\n// fixme: probably redundant, consider remove\nconst numberToCallParam = (n: number | string): string => {\n    return BigNumber(n).toString(10)\n    //not good: return number.toBN(n).toString()\n}\n\n// fixme substr is deprecated\nfunction hex_to_ascii(str1: string): string {\n    var hex = str1.substr(2).toString()\n    var str = ''\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16))\n    }\n    return str\n}\n\nexport function human_readable_hash(hash: string): string {\n    if (hash.length <= 8) return hash\n    return hash.substr(0, 5) + '...' + hash.substr(-3)\n}\n\nexport const waitForTransaction = async (hash: string) => {\n    await getStarknet().provider.waitForTx(hash)\n}\n\nexport const getTransactionUpdate = async (hash: string): Promise<string | null> => {\n    let t = await getStarknet().provider.getTransactionStatus(hash)\n\n    // check if transaction status has changed and update Recoil\n    let pendingTxs = getRecoil(pendingTxsState)\n    if (\n        pendingTxs &&\n        pendingTxs.find((tx) => tx.hash === hash && tx.status !== t.tx_status)\n    ) {\n        console.log('getTransactionUpdate: ', t.tx_status, hash)\n        setRecoil(pendingTxsState, (currTxs: Array<Transaction>) => {\n            let r = new Array<Transaction>()\n            currTxs.forEach((tx) => {\n                console.log('Inside forEach: ', tx.hash, tx.status)\n                if (tx.hash === hash) {\n                    // dup and change\n                    let tx_: Transaction = Object.assign({}, tx)\n                    tx_.status = t.tx_status\n                    if (\n                        //tx_.status === 'PENDING' ||                        \n                        tx_.status === 'ACCEPTED_ON_L2' ||\n                        tx_.status === 'ACCEPTED_ON_L1' \n                    )\n                        tx_.dismiss = true\n                    \n                    // we can delete the transaction here if on L1...\n\n                    r.push(tx_)\n                } else {\n                    r.push(tx)\n                }\n            })\n            return r\n        })\n        return t.tx_status\n    }\n    return null\n}\n\nfunction sortTokens(token1: string, token2: string): string[] {\n    return BigNumber(token1).lt(BigNumber(token2)) ? [token1, token2] : [token2, token1]\n}\n\nexport const getPoolIdFromTokens = (token1: string, token2: string): number => {\n    // check that we know these tokens\n    let pools = getRecoil(poolsState)\n    let tokens = getRecoil(tokensState)\n    if (!tokens.get(token1) || !tokens.get(token2)) throw Error('Unknown tokens')\n\n    let [t1, t2] = sortTokens(token1, token2)\n    for (let id = 1; id <= pools.size; id++) {\n        let pool: Pool | undefined = pools.get(id)\n        if (!pool) throw Error('missing pool ' + id)\n        if (pool.token1 === t1 && pool.token2 === t2) return id\n    }\n    return 0\n}\n\nexport function float_to_decimal_int(token_address: string, amount: string): string {\n    let tokens = getRecoil(tokensState)\n    let token: Token | undefined = tokens.get(token_address)\n    if (token === undefined) {\n        // throw Error('undefined pool')\n        addToastMsg(\n            'float_to_decimal_int: Undefined pool for token ' +\n                token_address +\n                ', tokens size=' +\n                tokens.size +\n                ' amount=' +\n                amount,\n            'warning'\n        )\n        return '0'\n    }\n\n    return BigNumber(amount).shiftedBy(token.decimals).toFixed(0, BigNumber.ROUND_DOWN)\n}\n\nexport function decimal_int_to_float(token_address: string, amount: string): string {\n    let tokens = getRecoil(tokensState)\n    let token: Token | undefined = tokens.get(token_address)\n    if (token === undefined) {\n        //throw Error('undefined pool')\n        addToastMsg(\n            'decimal_int_to_float: Undefined pool for token ' +\n                token_address +\n                ', tokens size=' +\n                tokens.size +\n                ' amount=' +\n                amount,\n            'warning'\n        )\n        return '0'\n    }\n\n    return BigNumber(amount).shiftedBy(-token.decimals).toString(10)    // should have exactly 'decimals' floating point\n}\n\nexport const calcOtherTokenAmount = (\n    token_leading: string,\n    token_other: string,\n    token_leading_amount_float: string,\n    leading_token_number: number // either 1, or 2\n): string | undefined => {\n\n    let poolId = getPoolIdFromTokens(token_leading, token_other)\n    if (\n        poolId === 0 ||\n        token_leading_amount_float === undefined ||\n        token_leading_amount_float === null\n    )\n        return undefined\n\n    if (token_leading_amount_float === '')\n        return ''\n\n    let token_leading_amount = float_to_decimal_int(\n        token_leading,\n        token_leading_amount_float\n    )\n\n    let pools = getRecoil(poolsState)\n    let pool: Pool | undefined = pools.get(poolId)\n\n    if (pool === undefined) {\n        addToastMsg('Undefined pool id=' + poolId, 'warning')\n        return undefined\n    }\n\n    // check reserves\n    let token_leading_reserve = '0'\n    let token_other_reserve = '0'\n\n    if (pool.token1 === token_leading) {\n        token_leading_reserve = pool.token1Amount\n        token_other_reserve = pool.token2Amount\n    } else {\n        token_leading_reserve = pool.token2Amount\n        token_other_reserve = pool.token1Amount\n    }\n\n    if (BigNumber(token_leading_reserve).lte(0) || BigNumber(token_other_reserve).lte(0))\n        throw Error('token reserve cannot be 0')\n\n    if (leading_token_number === 1) {\n        let token_out_expected_amount =\n            BigNumber(token_other_reserve).times(BigNumber(token_leading_amount))\n            .div(\n                BigNumber(token_leading_reserve).plus(BigNumber(token_leading_amount))\n                )\n            .toFixed(0, BigNumber.ROUND_DOWN)\n\n        return decimal_int_to_float(token_other, token_out_expected_amount)\n    } else {\n        // leading token is 2, calc what should be the output in order to get\n        let token_in_calculated_amount =\n        BigNumber(token_other_reserve).times(BigNumber(token_leading_amount))\n        .div(\n            BigNumber(token_leading_reserve).minus(BigNumber(token_leading_amount))\n            )\n        .toFixed(0, BigNumber.ROUND_DOWN)\n\n        return decimal_int_to_float(token_other, token_in_calculated_amount)\n    }\n}\n\nexport const calcOtherTokenRequiredAmountForLiquidity = (\n    token_a: string,\n    token_b: string,\n    token_a_float: string\n): string | undefined => {\n    let poolId = getPoolIdFromTokens(token_a, token_b)\n    if (\n        poolId === 0 ||\n        token_a_float === undefined ||\n        token_a_float === null\n    )\n        return undefined\n\n    if (token_a_float === '') return ''\n\n    let token_a_amount = float_to_decimal_int(token_a, token_a_float)\n\n    let pools = getRecoil(poolsState)\n    let pool: Pool | undefined = pools.get(poolId)\n\n    if (pool === undefined) {\n        // throw Error('undefined pool')\n        addToastMsg('Undefined pool id=' + poolId, 'warning')\n        return undefined\n    }\n\n    let price = getPoolPriceForTokenA(poolId, token_a, token_b, token_a_amount)\n\n    console.log('Other Token Add Liquidity: ', price, token_a_amount)\n    //let token_b_amount = BigNumber(price).times(BigNumber(token_a_amount)).toFixed(0, BigNumber.ROUND_DOWN)\n    //return decimal_int_to_float(token_b, token_b_amount)\n\n\n    return decimal_int_to_float(token_b, price)\n}\n\nexport const add_liquidity = async (\n    token_a_address: string,\n    token_a_amount: string,\n    token_a_min_amount: string,\n    token_b_address: string,\n    token_b_amount: string,\n    token_b_min_amount: string\n) => {\n    console.log('AMM_add_liquidity: ', token_a_min_amount, numberToCallParam(token_a_min_amount))\n\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (starknet.isConnected === false || !activeAccount) {\n        // Need to convert to a toast\n        return null\n    }\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        amm_contract, // to\n        addLiquiditySelector, // 'add_liquidity' selector\n        [\n            numberToCallParam(token_a_address),\n            numberToCallParam(token_a_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_a_min_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_b_address),\n            numberToCallParam(token_b_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_b_min_amount),\n            numberToCallParam(0)\n        ]\n    )\n\n    console.log('add_liquidity: adding tx to pending transactions atom')\n    addPendingTx(tx.transaction_hash, 'add_liquidity')\n\n    return tx\n}\n\nexport const withdraw_liquidity = async (\n    pool_id: number,\n    shares: string,\n    token_a_min_amount: string,\n    token_b_min_amount: string\n) => {\n    console.log('withdraw_liquidity')\n\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (starknet.isConnected === false || !activeAccount) {\n        // Need to convert to a toast\n        return null\n    }\n\n    console.log(\n        'Calling Starknet: withdraw_liquidity with ',\n        pool_id,\n        shares,\n        token_a_min_amount,\n        token_b_min_amount\n    )\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        amm_contract, // to\n        withdrawLiquiditySelector, // 'add_liquidity' selector\n        [\n            numberToCallParam(pool_id),\n            numberToCallParam(shares),\n            numberToCallParam(0),\n            numberToCallParam(token_a_min_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_b_min_amount),\n            numberToCallParam(0)\n        ]\n    )\n\n    addPendingTx(tx.transaction_hash, 'withdraw_liquidity')\n\n    return tx\n}\n\nconst safeToSend = () : boolean => {\n    if (getRecoil(safeToSendTxSelector)) return true\n\n    addToastMsg('Previous Transaction still being processed by your wallet, try again later','error')\n    return false\n}","import { setRecoil } from 'recoil-nexus'\nimport { Pool, poolsState, Token, tokensState } from '../atoms'\nimport { composeUInt256 } from './amm'\n\n// Fixme: decide which server to go with\n//const SERVER_URL = \"http://localhost:7000\"\n//const SERVER_URL = \"https://mottyl.github.io/static_data/data/amm.json\"\nconst SERVER_URL = 'https://my-json-server.typicode.com/myswapxyz/static_data'\n\nexport const updatePoolsAndTokensStatic = async () => {\n    // Fetch AMM Info\n    const fetchAmmInfo = async () => {\n        const res = await fetch(`${SERVER_URL}/amminfo`)\n        const data = await res.json()\n        console.log('AMM info data:', data)\n    }\n\n    // Fetch Pools\n    const fetchPools = async () => {\n        const res = await fetch(`${SERVER_URL}/pools`)\n        const data = await res.json()\n        let new_pools = new Map<number, Pool>()\n        for (let i = 1; i <= data.numberOfPools; i++) {\n            let d = data[i]\n            let pool: Pool = {\n                id: i,\n                name: d.poolName,\n                token1: d.tokenAAddress,\n                token1Amount: composeUInt256(d.tokenAReserves[0], d.tokenAReserves[1]),\n                token2: d.tokenBAddress,\n                token2Amount: composeUInt256(d.tokenBReserves[0], d.tokenBReserves[1]),\n                fee: Number(d.feePercentage) / 1e5,\n                cfmm: Number(d.cfmm),\n                shares: composeUInt256(d.shares[0], d.shares[1]),\n                refresh: Date.now()\n            }\n            console.log('Pool = ', pool)\n            new_pools.set(i, pool)\n        }\n        // Save to Recoil\n        setRecoil(poolsState, new_pools)\n    }\n\n    // Fetch Tokens\n    const fetchTokens = async () => {\n        const res = await fetch(`${SERVER_URL}/tokens`)\n        const data = await res.json()\n\n        let new_tokens = new Map<string, Token>()\n        for (let i = 0; i < data.numberOfTokens; i++) {\n            let d = data[i]\n            let token: Token = {\n                address: d.tokenAddress,\n                id: i,\n                name: d.tokenName,\n                symbol: d.tokenSymbol,\n                icon: d.tokenIcon,\n                decimals: d.tokenDecimals\n            }\n            new_tokens.set(d.tokenAddress, token)\n            console.log('Token = ', token)\n        }\n        setRecoil(tokensState, new_tokens)\n    }\n\n    fetchAmmInfo()\n    fetchPools()\n    fetchTokens()\n}\n","import React, { useState, useEffect } from 'react'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport PendingActionsIcon from '@mui/icons-material/PendingActions'\nimport {\n    approve,\n    isTokenApproved,\n    tokenAllowanceForAMM,\n    float_to_decimal_int,\n    addToastMsg,\n    checkAndUpdateComponentTransactions\n} from '../services/amm'\nimport { tokensState, walletAddressState, transactionsStatusSelector } from '../atoms'\nimport { useRecoilState } from 'recoil'\n\nconst DEFAULT_APPROVE_AMOUNT = BigInt(2 ** 127 - 1).toString()\n\nfunction Approve(props) {\n    const [tokens] = useRecoilState(tokensState)\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [tokenApproveInProgress, setTokenApproveInProgress] = useState(false)\n    const [approveTxCompletedSuccessfully, setApproveTxCompletedSuccessfully] =\n        useState(0) // 0 = not started, 1 = InProgress, 2 = completed successfully\n    const [transactionsStatus] = useRecoilState(transactionsStatusSelector('approve'))\n    const [componentTxs, setComponentTxs] = useState({})\n\n    let token = props.token\n    let tokenAmount = props.tokenAmount\n    let activePoolId = props.activePoolId\n    let tokenInRange = props.tokenInRange\n\n    useEffect(() => {\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setTokenApproveInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    useEffect(() => {\n        if (tokenApproveInProgress === false && approveTxCompletedSuccessfully === 1) {\n            setApproveTxCompletedSuccessfully(2)\n            props.approveTxStatusUpdateCallback(true)\n        }\n    }, [tokenApproveInProgress, approveTxCompletedSuccessfully, props])\n\n    useEffect(() => {\n        setTokenApproveInProgress(false)\n        setApproveTxCompletedSuccessfully(false)\n    }, [props.token, props.activePoolId, props.tokenAmount])\n\n    const handleApproveToken = async () => {\n        setTokenApproveInProgress(true)\n        setApproveTxCompletedSuccessfully(1)\n        let approveAmount = DEFAULT_APPROVE_AMOUNT\n            ? DEFAULT_APPROVE_AMOUNT\n            : float_to_decimal_int(token, tokenAmount)\n        try {\n            let tx = await approve(token, approveAmount)\n\n            if (!tx) {\n                console.log('Approve Transaction returned = null')\n                throw Error('Cannot perform transaction')\n            }\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n        } catch (e) {\n            if (e.message !== 'Cannot perform transaction')\n                addToastMsg('Approve user abort', 'error')\n            setApproveTxCompletedSuccessfully(0)\n            setTokenApproveInProgress(false)\n        }\n    }\n\n    if (\n        connectedAddress &&\n        token &&\n        tokenAmount > 0 &&\n        activePoolId > 0 &&\n        tokenInRange &&\n        !isTokenApproved(token, tokenAmount) &&\n        approveTxCompletedSuccessfully !== 2\n    ) {\n        let tokenAllowance = tokenAllowanceForAMM(token)\n        let token_obj = tokens.get(token)\n        if (token_obj) {\n            return (\n                <LoadingButton\n                    color='inherit'\n                    variant='outlined'\n                    fullWidth={true}\n                    loading={\n                        tokenApproveInProgress ||\n                        tokenAllowance === null ||\n                        tokenAllowance === undefined\n                            ? true\n                            : false\n                    }\n                    loadingPosition='start'\n                    startIcon={<PendingActionsIcon />}\n                    onClick={handleApproveToken}>\n                    {tokenAllowance === null || tokenAllowance === undefined\n                        ? 'CHECKING ' + token_obj.symbol + ' ALLOWANCE'\n                        : tokenApproveInProgress\n                        ? 'APPROVING ' + token_obj.symbol\n                        : 'APPROVE ' + token_obj.symbol}\n                </LoadingButton>\n            )\n        }\n    }\n\n    return <div></div>\n}\n\nexport default Approve\n","import React from 'react'\n\nimport { Grid, Button, Typography } from '@mui/material'\n\nimport { numFormat } from '../services/amm'\n\nfunction Balance(props) {\n    let token = props.token\n    let showMaxButton = props.showMaxButton\n    let setMaxAmountHandler = props.setMaxAmountHandler\n    let walletAmount = props.amount\n\n    if (walletAmount === undefined || walletAmount === '') return <div></div>\n\n    return (\n        <div>\n            <Grid container>\n                <Typography fontSize={13} sx={{ ml: 2, mt: 0.5 }}>\n                    {/* {displayBalance()} */}\n                    {'Balance: ' + numFormat(walletAmount)}\n                </Typography>\n                {showMaxButton && (\n                    <Button\n                        size='small'\n                        sx={{ ml: -1.5, mt: -0.2 }}\n                        onClick={() => setMaxAmountHandler(token, walletAmount)}>\n                        max\n                    </Button>\n                )}\n            </Grid>\n        </div>\n    )\n}\n\nexport default Balance\n","import { getStarknet } from '@argent/get-starknet'\n\nimport { erc20TokenAddressByNetwork } from './token.service'\n\nexport const isWalletConnected = (): boolean => !!getStarknet()?.isConnected\n\nexport const connectWallet = async () => await getStarknet({ showModal: true }).enable()\n\nexport const walletAddress = async (): Promise<string | undefined> => {\n    try {\n        const [address] = await getStarknet().enable()\n        return address\n    } catch {}\n}\n\nexport const networkId = (): keyof typeof erc20TokenAddressByNetwork => {\n    try {\n        const baseUrl = getStarknet().provider.baseUrl\n        if (baseUrl.includes('alpha-mainnet.starknet.io')) {\n            return 'mainnet-alpha'\n        } else {\n            return 'goerli-alpha'\n        }\n    } catch {\n        return 'goerli-alpha'\n    }\n}\n\nexport const getExplorerUrlBase = (): string => {\n    if (networkId() === 'mainnet-alpha') {\n        return 'https://voyager.online'\n    } else {\n        return 'https://goerli.voyager.online'\n    }\n}\n\nexport const networkUrl = (): string | undefined => {\n    try {\n        return getStarknet().provider.baseUrl\n    } catch {}\n}\n\nexport const waitForTransaction = async (hash: string) =>\n    await getStarknet().provider.waitForTx(hash)\n\nexport const addWalletChangeListener = async (\n    handleEvent: (accounts: string[]) => void\n) => {\n    getStarknet().on('accountsChanged', handleEvent)\n}\n","import ReactGA from 'react-ga'\n\nvar is_ga_initialized = false\n\nexport const GAinit = () => {\n    // Google Analytics Set Up\n    is_ga_initialized = true\n    const gaTrackingId = 'UA-215866683-1'\n    ReactGA.initialize(gaTrackingId)\n}\n\nexport const GApage = (page) => {\n    if (!is_ga_initialized) GAinit()\n    ReactGA.pageview(page)\n}\n\nexport const GAtrack = (cat, action, label) => {\n    if (!is_ga_initialized) GAinit()\n    ReactGA.event({\n        category: cat,\n        action: action,\n        label: label\n    })\n}\n\nexport const GAbutton = (label) => {\n    GAtrack('button', 'click', label)\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { walletAddressState, poolsState } from '../atoms'\n\nimport {\n    updateAllTokensDynamicData,\n    human_readable_hash,\n    addToastMsg\n} from '../services/amm'\nimport {\n    addWalletChangeListener,\n    connectWallet,\n    getExplorerUrlBase,\n    networkId,\n    walletAddress\n} from '../services/wallet.service'\n\nimport { GAbutton } from '../services/ga.js'\n\nimport { Button } from '@mui/material'\nimport CircleIcon from '@mui/icons-material/Circle'\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet'\n\nimport { useRecoilState } from 'recoil'\n\nfunction ConnectWallet(props) {\n    const [walletConnectionStatus, setWalletConnectionStatus] = useState(0)\n    const [voyagerBaseUrl, setVoyagerBaseUrl] = useState('')\n    const [networkName, setNetworkName] = useState('')\n    const [changeListenerRegistered, setChangeListenerRegistered] = useState(false)\n    const [address, setAddress] = useRecoilState(walletAddressState)\n    const [pools] = useRecoilState(poolsState)\n\n    const handleClick = async () => {\n        GAbutton('connect_wallet')\n\n        setWalletConnectionStatus(1)\n        try {\n            await connectWallet()\n        } catch {\n            // this means no argent wallet is available\n            addToastMsg('Wallet not found', 'error')\n            setWalletConnectionStatus(0)\n            return\n        }\n        setAddress(await walletAddress())\n        setWalletConnectionStatus(2)\n\n        addToastMsg('Wallet connected', 'success')\n    }\n\n    useEffect(() => {\n        if (props.secondary) return\n\n        const handleWalletChange = async (accounts) => {\n            if (props.secondary) return\n            console.log('handleWalletChange: ', accounts)\n            setAddress(await walletAddress())\n            setVoyagerBaseUrl(getExplorerUrlBase())\n            setNetworkName(networkId())\n\n            updateAllTokensDynamicData()\n            addToastMsg('Wallet network/account change', 'success')\n        }\n\n        console.log('address has changed, ', address)\n        if (address) {\n            setWalletConnectionStatus(2)\n            updateAllTokensDynamicData()\n            setVoyagerBaseUrl(getExplorerUrlBase())\n            setNetworkName(networkId())\n            if (!props.secondary && !changeListenerRegistered) {\n                addWalletChangeListener(handleWalletChange)\n                setChangeListenerRegistered(true) // do this only once, otherwise for every change a new listener will be registered\n            }\n        }\n    }, [address, props.secondary, changeListenerRegistered, setAddress])\n\n    useEffect(() => {\n        if (props.secondary) return\n        // Yaron: why do we need this? it doesn't do anything...\n        // console.log('pools have changed', pools)\n    }, [pools, props.secondary])\n\n    // Handle wallet connect button inside the screen (aka secondary)\n    if (props.secondary) {\n        // If already connected no need to display button\n        if (address !== '' || walletConnectionStatus === 2) {\n            return <div></div>\n        }\n\n        // Secondary connect button - short-circuit all hooks\n        if (walletConnectionStatus === 1) {\n            return (\n                <div>\n                    <Button color='inherit' fullWidth={true} variant='outlined' disabled>\n                        Connecting...\n                    </Button>\n                </div>\n            )\n        }\n\n        // Display button\n        return (\n            <div>\n                <Button\n                    className='connect-wallet'\n                    color='inherit'\n                    fullWidth={true}\n                    variant='contained'\n                    onClick={handleClick}>\n                    <AccountBalanceWalletIcon fontSize='medium' sx={{ mr: 1 }} />\n                    CONNECT WALLET\n                </Button>\n            </div>\n        )\n    }\n\n    const handleConnectedClick = async () => {\n        console.log('opening wallet')\n        window.open(voyagerBaseUrl + '/contract/' + address, '_blank')\n    }\n\n    if (walletConnectionStatus === 2) {\n        //console.log('Wallet is connected!', address)\n        return (\n            <div>\n                <Button color='inherit' variant='outlined' onClick={handleConnectedClick}>\n                    <CircleIcon\n                        sx={{ mr: 1 }}\n                        style={{ fill: 'lightgreen', fontSize: 10 }}\n                    />{' '}\n                    {networkName} {human_readable_hash(address)}{' '}\n                </Button>\n            </div>\n        )\n    } else if (walletConnectionStatus === 1) {\n        //console.log('Wallet is being connected!', address)\n        return (\n            <div>\n                <Button color='inherit' variant='outlined' disabled>\n                    Connecting...\n                </Button>\n            </div>\n        )\n    } else {\n        return (\n            <div>\n                <Button color='inherit' variant='outlined' onClick={handleClick}>\n                    Connect Wallet\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default ConnectWallet\n","import React, { useState, useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { getRecoil } from 'recoil-nexus'\nimport { BigNumber } from 'bignumber.js'\n\nimport {\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    TextField,\n    Grid,\n    Box,\n    Card,\n    CardActionArea,\n    Typography,\n    Button,\n    IconButton\n} from '@mui/material'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz'\nimport SwapVertSharpIcon from '@mui/icons-material/SwapVertSharp'\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet'\n\nimport {\n    tokensState,\n    swapSlippage,\n    walletAddressState,\n    transactionsStatusSelector,\n    tokensUserDataState,\n    poolsState\n} from '../atoms'\n\nimport {\n    getWalletTokenAmount,\n    updateTokenDynamicData,\n    updatePoolDynamicData,\n    swap,\n    numFormat,\n    addToastMsg,\n    isTokenApproved,\n    getPoolPriceForTokenA,\n    getPoolIdFromTokens,\n    calcOtherTokenAmount,\n    float_to_decimal_int,\n    isSufficientBalanceInWallet,\n    isInsufficientBalanceInPool,\n    checkAndUpdateComponentTransactions,\n    WALLET_SUFFICIENT_BALANCE\n} from '../services/amm'\n\nimport { useInterval } from 'usehooks-ts'\n\nimport Approve from './Approve.js'\nimport Balance from './Balance.js'\nimport BoxHeader from './BoxHeader.js'\nimport ConnectWallet from './ConnectWallet.js'\n\nimport { GApage, GAbutton } from '../services/ga.js'\n\nexport const DEFAULT_APPROVE_AMOUNT = Number.MAX_SAFE_INTEGER // Need to change it to: (2**127 - 1) -- given that 'toBN' supports...\n\nfunction Swap() {\n    const [activePoolId, setActivePoolId] = useState(0)\n    const [token1, setToken1] = useState('')\n    const [token1Amount, setToken1Amount] = useState('')\n    const [token2, setToken2] = useState('')\n    const [token2Amount, setToken2Amount] = useState('')\n    const [leadingToken, setLeadingToken] = useState(0) // 0 is no token, 1/2 is the last updated token\n    const [swapInProgress, setSwapInProgress] = useState(false)\n    const [tokens] = useRecoilState(tokensState)\n    const [tuds] = useRecoilState(tokensUserDataState)\n    const [pools] = useRecoilState(poolsState)\n    const [approveTxCompletedSuccessfully, setApproveTxCompletedSuccessfully] =\n        useState(false)\n\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [transactionsStatus] = useRecoilState(transactionsStatusSelector('swap'))\n    const [componentTxs, setComponentTxs] = useState({})\n\n    useEffect(() => {\n        GApage('swap')\n    }, [])\n\n    useEffect(() => {\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setSwapInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    useEffect(() => {}, [tuds, pools])\n\n    const updateTokensIntervalCallback = async () => {\n        // Allow periodic update only if both tokens are selected\n        if (activePoolId > 0) {\n            updatePoolDynamicData(activePoolId)\n        } else {\n            if (token1) updateTokenDynamicData(token1)\n            if (token2) updateTokenDynamicData(token2)\n        }\n    }\n\n    // Timer to update active pool and tokens user data (allowance, amount)\n    useInterval(updateTokensIntervalCallback, 15000)\n\n    const handleToken1Select = (event) => {\n        let token_address = event.target.value\n        setToken1(token_address)\n        setApproveTxCompletedSuccessfully(false)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('swap-token1')\n    }\n\n    const handleToken2Select = (event) => {\n        let token_address = event.target.value\n        setToken2(token_address)\n        setApproveTxCompletedSuccessfully(false)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('swap-token2')\n    }\n\n    const handleTokenAmountChange = (token, amount) => {\n        // fixme: consider limit decimals input according to token decimals\n        const regex = /^(([0-9]+[.]?[0-9]*)|([.][0-9]+))$/\n\n        if (token === token1 && (amount === '' || regex.test(amount))) {\n            setToken1Amount(amount)\n            setLeadingToken(1)\n        }\n        if (token === token2 && (amount === '' || regex.test(amount))) {\n            setToken2Amount(amount)\n            setLeadingToken(2)\n        }\n    }\n\n    useEffect(() => {\n        if (token1 && token2) {\n            let poolId = getPoolIdFromTokens(token1, token2)\n            setActivePoolId(poolId)\n\n            // follow the leader\n            if (leadingToken <= 1) {\n                // cannot be 0, but just for safety\n                if (poolId > 0) {\n                    // calc token2 amount\n                    let amount = calcOtherTokenAmount(token1, token2, token1Amount, 1)\n                    console.log('calcOtherTokenAmount: (token1 leading) ', amount)\n                    if (amount !== undefined && amount !== token2Amount) {\n                        setToken2Amount(amount)\n                    }\n                } else {\n                    setToken2Amount(0)\n                }\n            } else {\n                if (poolId > 0) {\n                    // calc token2 amount\n                    let amount = calcOtherTokenAmount(token2, token1, token2Amount, 2)\n                    console.log('calcOtherTokenAmount: (token2 leading) ', amount)\n                    if (amount !== undefined && amount < 0) amount = 0\n                    else if (amount !== undefined && amount !== token1Amount) {\n                        setToken1Amount(amount)\n                    }\n                } else {\n                    setToken1Amount(0)\n                }\n            }\n        } else {\n            // follow the leader\n            if (leadingToken <= 1) {\n                // cannot be 0, but just for safety\n                setToken2Amount('')\n            } else {\n                setToken1Amount('')\n            }\n        }\n    }, [token1, token2, token1Amount, token2Amount, leadingToken, pools])\n\n    const menuItems = (otherSelectedToken) => {\n        let r = []\n        tokens.forEach((value, address) => {\n            if (otherSelectedToken !== address) {\n                r.push(\n                    <MenuItem key={address} value={address}>\n                        <Grid container direction='row'>\n                            <Grid sx={{ mr: 1, mb: -1 }}>\n                                <img src={value.icon} alt='' width='24' height='24' />\n                            </Grid>\n                            <Grid>\n                                <Typography>{value.symbol || value.address}</Typography>\n                            </Grid>\n                        </Grid>\n                    </MenuItem>\n                )\n            }\n        })\n        return r\n    }\n\n    const calcToken2MinAmount = () => {\n        let slippage = parseFloat(getRecoil(swapSlippage)) / 100\n        return BigNumber(token2Amount).times(BigNumber(1).minus(BigNumber(slippage)))\n    }\n\n    const handleSwap = async () => {\n        setSwapInProgress(true)\n        GAbutton('swap')\n\n        let minAmountOut = calcToken2MinAmount()\n        try {\n            let tx = await swap(\n                activePoolId,\n                token1,\n                float_to_decimal_int(token1, token1Amount),\n                float_to_decimal_int(token2, minAmountOut)\n            )\n\n            if (!tx) throw Error('Cannot perform transaction')\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n        } catch (e) {\n            addToastMsg('Swap Request: User Aborted', 'error')\n            setSwapInProgress(false)\n        }\n    }\n\n    const swapButton = () => {\n        let token1SufficientBalance = isSufficientBalanceInWallet(token1, token1Amount)\n        let token2InsufficientPoolBalance = isInsufficientBalanceInPool(\n            activePoolId,\n            token2,\n            token2Amount\n        )\n\n        if (\n            token2 &&\n            token1Amount > 0 &&\n            activePoolId !== 0 &&\n            token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.TRUE &&\n            !token2InsufficientPoolBalance\n        ) {\n            // Display SWAP button\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={\n                        (connectedAddress && isTokenApproved(token1, token1Amount)) ||\n                        swapInProgress ||\n                        approveTxCompletedSuccessfully\n                            ? false\n                            : true\n                    }\n                    loading={swapInProgress}\n                    loadingPosition='start'\n                    startIcon={<SwapHorizIcon />}\n                    onClick={handleSwap}>\n                    {swapInProgress ? 'SWAPPING' : 'SWAP'}\n                </LoadingButton>\n            )\n        }\n\n        if (\n            connectedAddress &&\n            token1Amount > 0 &&\n            token1SufficientBalance !== WALLET_SUFFICIENT_BALANCE.TRUE &&\n            !token2InsufficientPoolBalance\n        ) {\n            // Amount either exceeds wallet balance, or wallet balance is unknown yet\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}\n                    loading={\n                        token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.UNKNOWN\n                    }\n                    loadingPosition='start'\n                    startIcon={<AccountBalanceWalletIcon />}>\n                    {token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.FALSE\n                        ? 'AMOUNT EXCEEDS WALLET BALANCE'\n                        : 'CHECKING WALLET BALANCE'}\n                </LoadingButton>\n            )\n        }\n\n        if (token1 && token2 && activePoolId === 0) {\n            // No pool for token pair selected\n            return (\n                <Button\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}>\n                    NOT A VALID Pool\n                </Button>\n            )\n        }\n\n        if (\n            token1 &&\n            token2 &&\n            activePoolId &&\n            token2Amount &&\n            token2InsufficientPoolBalance\n        ) {\n            return (\n                <Button\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}>\n                    INSUFFICIENT LIQUIDITY IN POOL\n                </Button>\n            )\n        }\n\n        if (connectedAddress) {\n            // Wallet is connected\n            let instruction = ''\n            if (!token1 && !token2) instruction = 'SELECT TOKENS'\n            if ((!token1 && token2) || (token1 && !token2)) instruction = 'SELECT TOKEN'\n            if (token1 && token2 && (!token1Amount || !token2Amount))\n                instruction = 'ENTER AMOUNT'\n\n            if (instruction !== '')\n                return (\n                    <Button\n                        color='secondary'\n                        variant='contained'\n                        fullWidth={true}\n                        disabled={true}>\n                        {instruction}\n                    </Button>\n                )\n        }\n\n        return <div></div>\n    }\n\n    const switchTokensAndAmounts = () => {\n        GAbutton('swap-switchtokens')\n\n        let tmpToken = token1\n        let tmpAmount = token1Amount\n        setToken1(token2)\n        setToken2(tmpToken)\n        setToken1Amount(token2Amount)\n        setToken2Amount(tmpAmount)\n        setLeadingToken(leadingToken === 1 ? 2 : 1)\n        setApproveTxCompletedSuccessfully(false)\n    }\n\n    const isToken1InputDisabled = () => {\n        return token1 === '' ? true : false\n    }\n    const isToken2InputDisabled = () => {\n        return token2 === '' ? true : false\n    }\n\n    const [priceDirection, setPriceDirection] = useState(0)\n    const [slippage] = useRecoilState(swapSlippage)\n\n    const priceAndSlippage = () => {\n        if (\n            token1 &&\n            token2 &&\n            token1Amount &&\n            !BigNumber(token1Amount).isZero() &&\n            token2Amount &&\n            !BigNumber(token2Amount).isZero()\n        ) {\n            // currentPrice = How much token2 for 1 token1\n            let currentPrice = getPoolPriceForTokenA(activePoolId, token1, token2)\n            console.log('CurrentPrice: ', currentPrice)\n            let minAmount = calcToken2MinAmount()\n            let token1Symbol = tokens.get(token1).symbol\n            let token2Symbol = tokens.get(token2).symbol\n            let floatSlippage = parseFloat(slippage)\n            // transactionPrice = How much token2 for 1 token1\n            let transactionPrice = BigNumber(token2Amount).div(BigNumber(token1Amount))\n            let transactionPriceInv = BigNumber(token1Amount).div(BigNumber(token2Amount))\n\n            let priceImpact = BigNumber(1).minus(\n                BigNumber(transactionPrice).div(BigNumber(currentPrice))\n            )\n\n            let backgroundColor = priceImpact.gt(0.05)\n                ? 'tomato'\n                : priceImpact.gt(0.03)\n                ? 'orange'\n                : 'inherit'\n\n            let displayPrice1 = (\n                <>\n                    1 {token1Symbol} = {numFormat(transactionPrice)} {token2Symbol}\n                </>\n            )\n            let displayPrice2 = (\n                <>\n                    1 {token2Symbol} = {numFormat(transactionPriceInv)} {token1Symbol}\n                </>\n            )\n            //console.log('Price: ', displayPrice1, displayPrice2, priceDirection, transactionPrice.toString(10))\n\n            return (\n                <Grid>\n                    <Card sx={{ mb: 0.5, mt: 2 }}>\n                        <CardActionArea\n                            onClick={() => setPriceDirection(!priceDirection)}>\n                            <Typography\n                                fontSize={13}\n                                fontWeight='medium'\n                                sx={{ ml: 1, mr: 1 }}>\n                                {priceDirection ? displayPrice2 : displayPrice1}\n                            </Typography>\n                        </CardActionArea>\n                    </Card>\n                    <Card style={{ backgroundColor: backgroundColor }} sx={{ mb: 2 }}>\n                        <Typography\n                            fontSize={13}\n                            fontWeight='medium'\n                            sx={{ ml: 1, mr: 1 }}>\n                            Minimum amount received (slippage={floatSlippage.toFixed(2)}\n                            %): {numFormat(minAmount)}\n                        </Typography>\n                        <Typography\n                            fontSize={13}\n                            fontWeight='medium'\n                            sx={{ ml: 1, mr: 1 }}>\n                            Price impact: {numFormat(priceImpact, true)}%\n                        </Typography>\n                    </Card>\n                </Grid>\n            )\n        }\n        return <div></div>\n    }\n\n    return (\n        <Box sx={{ p: 2, border: '0px solid', mt: 1, mb: 4, boxShadow: 2 }}>\n            <div>\n                <Grid container sx={{ mb: 2 }}>\n                    <BoxHeader name='Swap' />\n                </Grid>\n\n                <Card sx={{ p: 2, boxShadow: 2, mb: -4 }}>\n                    <Grid container spacing={2} sx={{}}>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel id='token1-label'>Token 1:</InputLabel>\n                                <Select\n                                    labelId='token1-label'\n                                    id='token1-select'\n                                    value={token1}\n                                    label='Token 1'\n                                    onChange={handleToken1Select}>\n                                    {menuItems(token2)}\n                                </Select>\n                            </FormControl>\n                            <Balance\n                                token={token1}\n                                amount={getWalletTokenAmount(token1)}\n                                showMaxButton={true}\n                                setMaxAmountHandler={handleTokenAmountChange}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField\n                                    helperText='Amount to swap'\n                                    id='token1-amount'\n                                    inputProps={{\n                                        variant: 'outlined',\n                                        placeholder: '0.00',\n                                        type: 'string',\n                                        autoComplete: 'off',\n                                        'aria-labelledby': 'input-amount'\n                                    }}\n                                    value={token1Amount ? token1Amount : ''}\n                                    onChange={(e) =>\n                                        handleTokenAmountChange(token1, e.target.value)\n                                    }\n                                    error={\n                                        isSufficientBalanceInWallet(\n                                            token1,\n                                            token1Amount\n                                        ) === WALLET_SUFFICIENT_BALANCE.FALSE\n                                            ? true\n                                            : false\n                                    }\n                                    disabled={isToken1InputDisabled()}\n                                />\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </Card>\n                <Grid\n                    container\n                    direction='row'\n                    justifyContent='center'\n                    alignItems='center'>\n                    <IconButton\n                        size='large'\n                        disabled={!token1 && !token2}\n                        onClick={switchTokensAndAmounts}>\n                        <SwapVertSharpIcon style={{ fontSize: 40 }} />\n                    </IconButton>\n                </Grid>\n\n                <Card sx={{ p: 2, mt: -3, boxShadow: 2 }}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel id='token2-label'>Token 2:</InputLabel>\n                                <Select\n                                    labelId='token2-label'\n                                    id='token2-select'\n                                    value={token2}\n                                    label='Token 2'\n                                    onChange={handleToken2Select}>\n                                    {menuItems(token1)}\n                                </Select>\n                            </FormControl>\n                            <Balance\n                                token={token2}\n                                amount={getWalletTokenAmount(token2)}\n                                showMaxButton={false}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField\n                                    helperText='Estimated amount received'\n                                    id='token2-amount'\n                                    inputProps={{\n                                        variant: 'outlined',\n                                        placeholder: '0.00',\n                                        type: 'string',\n                                        autoComplete: 'off',\n                                        'aria-labelledby': 'input-amount'\n                                    }}\n                                    value={token2Amount ? token2Amount : ''}\n                                    onChange={(e) =>\n                                        handleTokenAmountChange(token2, e.target.value)\n                                    }\n                                    disabled={isToken2InputDisabled()}\n                                />\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </Card>\n\n                {priceAndSlippage()}\n\n                <Card sx={{ minWidth: 275, mb: 2, mt: 3, boxShadow: 2 }}>\n                    <ConnectWallet secondary='true' />\n                    <Approve\n                        token={token1}\n                        tokenAmount={token1Amount}\n                        activePoolId={activePoolId}\n                        tokenInRange={\n                            isSufficientBalanceInWallet(token1, token1Amount) ===\n                            WALLET_SUFFICIENT_BALANCE.TRUE\n                        }\n                        approveTxStatusUpdateCallback={setApproveTxCompletedSuccessfully}\n                    />\n                    {swapButton()}\n                </Card>\n            </div>\n        </Box>\n    )\n}\n\nexport default Swap\n","import React, { useState, useEffect } from 'react'\nimport { getRecoil } from 'recoil-nexus'\nimport { useRecoilState } from 'recoil'\nimport { BigNumber } from 'bignumber.js'\nimport BoxHeader from './BoxHeader.js'\nimport {\n    addToastMsg,\n    withdraw_liquidity,\n    numFormat,\n    float_to_decimal_int,\n    checkAndUpdateComponentTransactions\n} from '../services/amm'\nimport { withdrawLiquiditySlippage, transactionsStatusSelector } from '../atoms'\n\nimport {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    Card,\n    Box,\n    Grid,\n    CardHeader,\n    Button,\n    Typography,\n    Slider,\n    Stack,\n    Paper\n} from '@mui/material'\nimport MuiInput from '@mui/material/Input'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport ExitToAppRoundedIcon from '@mui/icons-material/ExitToAppRounded'\nimport { styled } from '@mui/material/styles'\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(0),\n    textAlign: 'left',\n    color: theme.palette.text.secondary\n}))\n\nconst Input = styled(MuiInput)`\n    width: 42px;\n`\n\nexport default function RemoveLiquidity(props) {\n    const [open, setOpen] = useState(true)\n    const [percent, setPercent] = useState(25)\n    const [token1Amount, setToken1Amount] = useState('') // fixme: what happens if token1amount / pool share changes during op\n    const [token2Amount, setToken2Amount] = useState('')\n    const [removeLiquidityInProgress, setRemoveLiquidityInProgress] = useState(false)\n    const [transactionsStatus] = useRecoilState(\n        transactionsStatusSelector('withdraw_liquidity')\n    )\n    const [componentTxs, setComponentTxs] = useState({})\n\n    useEffect(() => {\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setRemoveLiquidityInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    const marks = [\n        { value: 0, label: '0%' },\n        { value: 25, label: '25%' },\n        { value: 50, label: '50%' },\n        { value: 75, label: '75%' },\n        { value: 100, label: '100%' }\n    ]\n\n    useEffect(() => {\n        // if one of the tokens is '0' then set the other one to zero as well\n        if (BigNumber(token1Amount).isZero()) setToken2Amount('0')\n        if (BigNumber(token2Amount).isZero()) setToken1Amount('0')\n\n        // fixme: not sure why can't I call setAmounts\n        setToken1Amount(\n            numFormat(BigNumber(props.token1Amount).times(percent).shiftedBy(-2))\n        )\n        setToken2Amount(\n            numFormat(BigNumber(props.token2Amount).times(percent).shiftedBy(-2))\n        )\n\n        setRemoveLiquidityInProgress(false)\n    }, [\n        open,\n        token1Amount,\n        token2Amount,\n        percent,\n        props.token1Amount,\n        props.token2Amount\n    ])\n\n    const handleClose = () => {\n        setRemoveLiquidityInProgress(false)\n        setOpen(false)\n        props.openRemoveLiquidity(false)\n    }\n\n    const setAmounts = (percent) => {\n        setToken1Amount(\n            numFormat(BigNumber(props.token1Amount).times(percent).shiftedBy(-2))\n        )\n        setToken2Amount(\n            numFormat(BigNumber(props.token2Amount).times(percent).shiftedBy(-2))\n        )\n    }\n\n    const updateState = (newPercent) => {\n        setPercent(newPercent)\n        setAmounts(newPercent)\n        console.log(\n            'Remove Liquidity, updateState: ',\n            token1Amount,\n            token2Amount,\n            props.token1Amount,\n            props.token2Amount\n        )\n    }\n\n    const handleSliderChange = (event, newPercent) => {\n        updateState(newPercent)\n    }\n\n    const handleInputChange = (event) => {\n        let newPercent = event.target.value === '' ? '' : Number(event.target.value)\n        updateState(newPercent)\n        console.log('handle input change')\n    }\n\n    const handleBlur = () => {\n        if (percent < 0) {\n            setPercent(0)\n        } else if (percent > 100) {\n            setPercent(100)\n        }\n    }\n\n    const handleWithdraw = async () => {\n        console.log('Withdraw percent: ', percent)\n        let slippage = parseFloat(getRecoil(withdrawLiquiditySlippage)) / 100\n        let sharesToWithdraw = BigNumber(props.balance)\n            .times(BigNumber(percent))\n            .shiftedBy(-2)\n            .toFixed(0, BigNumber.ROUND_DOWN)\n        let minToken1Amount = BigNumber(token1Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage).shiftedBy(-2)))\n            .toString(10, BigNumber.ROUND_DOWN)\n        let minToken2Amount = BigNumber(token2Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage).shiftedBy(-2)))\n            .toString(10, BigNumber.ROUND_DOWN)\n\n        console.log(\n            'handleWithdraw: ',\n            sharesToWithdraw,\n            minToken1Amount,\n            minToken2Amount\n        )\n\n        // Make sure we send amounts in the right order\n        if (props.token1 > props.token2) {\n            let tmp = minToken1Amount\n            minToken1Amount = minToken2Amount\n            minToken2Amount = tmp\n        }\n\n        setRemoveLiquidityInProgress(true)\n\n        try {\n            let tx = await withdraw_liquidity(\n                props.poolId,\n                sharesToWithdraw,\n                float_to_decimal_int(props.token1, minToken1Amount),\n                float_to_decimal_int(props.token2, minToken2Amount)\n            )\n\n            if (!tx) throw Error('Cannot perform transaction')\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n        } catch (e) {\n            addToastMsg('Remove Liquidity: User Aborted', 'error')\n            setRemoveLiquidityInProgress(false)\n        }\n        handleClose()\n    }\n\n    return (\n        <div>\n            <Dialog open={open} onClose={handleClose}>\n                <Box sx={{ p: 2, border: '0px solid', boxShadow: 2 }}>\n                    <Grid container sx={{ mb: 2 }}>\n                        <BoxHeader name='Remove Liquidity' />\n                    </Grid>\n                    <DialogContent>\n                        <Card sx={{ p: 2, border: '0px solid', boxShadow: 2, mb: 2 }}>\n                            <DialogContentText>\n                                Choose amount of liquidity shares to remove\n                            </DialogContentText>\n\n                            <Box sx={{ width: 500, mt: 3, ml: 2 }}>\n                                <Grid container spacing={2} alignItems='center'>\n                                    <Grid item xs sx={{ mt: 2, ml: 2, mr: 2 }}>\n                                        <Slider\n                                            aria-label='Custom marks'\n                                            defaultValue={25}\n                                            valueLabelDisplay='auto'\n                                            marks={marks}\n                                            value={\n                                                typeof percent === 'number' ? percent : 0\n                                            }\n                                            onChange={handleSliderChange}\n                                            aria-labelledby='input-slider'\n                                        />\n                                    </Grid>\n                                    <Grid item sx={{ ml: 2, mr: 4 }}>\n                                        <Input\n                                            value={percent}\n                                            size='small'\n                                            onChange={handleInputChange}\n                                            onBlur={handleBlur}\n                                            inputProps={{\n                                                step: 1,\n                                                min: 0,\n                                                max: 100,\n                                                type: 'number',\n                                                'aria-labelledby': 'input-slider'\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Card>\n                        <Card sx={{ p: 2, border: '0px solid', boxShadow: 2, mb: 0 }}>\n                            <CardHeader\n                                title='Amount Received'\n                                disableTypography={true}\n                                sx={{ fontSize: 18, mt: 0 }}></CardHeader>\n                            <Grid\n                                item\n                                container\n                                alignItems='center'\n                                spacing={2}\n                                sx={{ width: 400, ml: 2 }}>\n                                <Grid item xs={6}>\n                                    <Stack\n                                        direction='row'\n                                        spacing={0}\n                                        alignItems='center'>\n                                        <Item\n                                            sx={{ boxShadow: 0, mr: 1 }}\n                                            style={{ backgroundColor: 'transparent' }}>\n                                            <img\n                                                src={props.token1Icon}\n                                                alt=''\n                                                width='32'\n                                                height='32'\n                                            />\n                                        </Item>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {props.token1Symbol}:\n                                            </Typography>\n                                        </Item>\n                                    </Stack>\n                                    <Stack\n                                        direction='row'\n                                        spacing={0}\n                                        alignItems='center'>\n                                        <Item\n                                            sx={{ boxShadow: 0, mr: 1 }}\n                                            style={{ backgroundColor: 'transparent' }}>\n                                            <img\n                                                src={props.token2Icon}\n                                                alt=''\n                                                width='32'\n                                                height='32'\n                                            />\n                                        </Item>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {props.token2Symbol}:\n                                            </Typography>\n                                        </Item>\n                                    </Stack>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Stack>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {numFormat(token1Amount)}\n                                            </Typography>\n                                        </Item>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {numFormat(token2Amount)}\n                                            </Typography>\n                                        </Item>\n                                    </Stack>\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            variant='contained'\n                            style={{ backgroundColor: 'gray' }}\n                            onClick={handleClose}>\n                            Cancel\n                        </Button>\n                        <LoadingButton\n                            color='primary'\n                            variant='contained'\n                            disabled={\n                                token1Amount === '0' ||\n                                token2Amount === '0' ||\n                                removeLiquidityInProgress\n                                    ? true\n                                    : false\n                            }\n                            loading={removeLiquidityInProgress === true}\n                            loadingPosition='start'\n                            startIcon={<ExitToAppRoundedIcon />}\n                            onClick={handleWithdraw}>\n                            {removeLiquidityInProgress ? 'REMOVING' : 'REMOVE'}\n                        </LoadingButton>\n                    </DialogActions>\n                </Box>\n            </Dialog>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { BigNumber } from 'bignumber.js'\nimport {\n    Card,\n    Grid,\n    CardActions,\n    CardContent,\n    Typography,\n    Stack,\n    Paper,\n    Button,\n    styled\n} from '@mui/material'\n\nimport { tokensState, poolsState } from '../atoms'\nimport { decimal_int_to_float, numFormat } from '../services/amm'\nimport RemoveLiquidity from './RemoveLiquidity'\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(0),\n    textAlign: 'left',\n    color: theme.palette.text.secondary\n}))\n\nfunction LiquidityPool(props) {\n    const [tokens] = useRecoilState(tokensState)\n    const [pools] = useRecoilState(poolsState)\n    const [openRemoveLiquidity, setOpenRemoveLiquidity] = useState(false)\n\n    let pool = pools.get(props.poolId)\n    if (!pool || !pool.shares) return <div></div>\n\n    const token1 = () => {\n        let pool = pools.get(props.poolId)\n        let token_address = pool.token1\n        let token = tokens.get(token_address)\n        return token\n    }\n\n    const token1Symbol = () => {\n        let token = token1(props.poolId)\n        return token.symbol\n    }\n\n    const token1Icon = () => {\n        let token = token1(props.poolId)\n        return token.icon\n    }\n\n    const userPoolShare = () => {\n        let pool = pools.get(props.poolId)\n        if (!pool.shares) return '0'\n        return BigNumber(props.balance).div(BigNumber(pool.shares))\n    }\n\n    const userToken1AmountDecimal = () => {\n        let pool = pools.get(props.poolId)\n        let user_share = userPoolShare()\n        return BigNumber(user_share).times(pool.token1Amount)\n    }\n\n    const userToken1Amount = () => {\n        return decimal_int_to_float(pool.token1, userToken1AmountDecimal())\n    }\n\n    const token2 = () => {\n        let pool = pools.get(props.poolId)\n        let token_address = pool.token2\n        let token = tokens.get(token_address)\n        return token\n    }\n\n    const token2Symbol = () => {\n        let token = token2(props.poolId)\n        return token.symbol\n    }\n\n    const token2Icon = () => {\n        let token = token2(props.poolId)\n        return token.icon\n    }\n\n    const userToken2AmountDecimal = () => {\n        let pool = pools.get(props.poolId)\n        let user_share = userPoolShare()\n        return BigNumber(user_share).times(pool.token2Amount)\n    }\n\n    const userToken2Amount = () => {\n        return decimal_int_to_float(pool.token1, userToken2AmountDecimal())\n    }\n\n    const userBalance = () => {\n        let d1 = token1().decimals\n        let d2 = token2().decimals\n        let d_balance = Math.floor((d1 + d2) / 2)\n        return BigNumber(props.balance).shiftedBy(-d_balance).toString(10)\n    }\n\n    const handleClickWithdraw = () => {\n        setOpenRemoveLiquidity(true)\n    }\n\n    const renderRemoveLiquidity = () => {\n        if (openRemoveLiquidity) {\n            return (\n                <RemoveLiquidity\n                    poolId={props.poolId}\n                    balance={props.balance}\n                    token1Symbol={token1Symbol()}\n                    token2Symbol={token2Symbol()}\n                    token1Icon={token1Icon()}\n                    token2Icon={token2Icon()}\n                    token1={token1().address}\n                    token2={token2().address}\n                    token1Amount={userToken1Amount()}\n                    token2Amount={userToken2Amount()}\n                    openRemoveLiquidity={setOpenRemoveLiquidity}\n                />\n            )\n        }\n    }\n\n    return (\n        <Card sx={{ p: 2, border: '0px solid', boxShadow: 2, mb: 5 }}>\n            <Typography sx={{ fontSize: 18, fontWeight: '500' }}>\n                Your Position\n            </Typography>\n            <CardContent>\n                <Grid item container direction='row' alignItems='center'>\n                    <Grid item xs={6}>\n                        <Stack direction='row' spacing={0} alignItems='center'>\n                            <Item\n                                sx={{ boxShadow: 0, mr: 0 }}\n                                style={{ backgroundColor: 'transparent' }}>\n                                <img src={token1Icon()} alt='' width='32' height='32' />\n                            </Item>\n                            <Item\n                                sx={{ boxShadow: 0, ml: -1, mr: 1 }}\n                                style={{ backgroundColor: 'transparent' }}>\n                                <img src={token2Icon()} alt='' width='32' height='32' />\n                            </Item>\n                            <Item sx={{ boxShadow: 0 }}>\n                                <Typography\n                                    sx={{ fontSize: 24, fontWeight: 'normal' }}\n                                    color='text.primary'\n                                    gutterBottom>\n                                    {token1Symbol()} / {token2Symbol()}:\n                                </Typography>\n                            </Item>\n                        </Stack>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'normal' }}\n                            color='text.primary'>\n                            Your Pool Share:\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'normal' }}\n                            color='text.primary'>\n                            Pooled {token1Symbol()}:\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'normal' }}\n                            color='text.primary'>\n                            Pooled {token2Symbol()}:\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6} textAlign='right'>\n                        <Typography\n                            sx={{ fontSize: 24, fontWeight: 'normal' }}\n                            color='text.primary'\n                            gutterBottom>\n                            {numFormat(userBalance())}\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'bold' }}\n                            color='text.primary'>\n                            {numFormat(userPoolShare(), true)}%\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'bold' }}\n                            color='text.primary'>\n                            {numFormat(userToken1Amount())}\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'bold' }}\n                            color='text.primary'>\n                            {numFormat(userToken2Amount())}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <CardActions>\n                <Grid item container justifyContent='center'>\n                    <Button\n                        variant='contained'\n                        sx={{ textWeight: 'bold' }}\n                        onClick={handleClickWithdraw}>\n                        WITHDRAW\n                    </Button>\n                    {renderRemoveLiquidity()}\n                </Grid>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default LiquidityPool\n","import React, { useState, useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { BigNumber } from 'bignumber.js'\n\nimport LiquidityPool from './LiquidityPool'\nimport { poolsState, walletAddressState } from '../atoms'\nimport { getLPBalance, updatePoolDynamicData } from '../services/amm'\nimport { useInterval } from 'usehooks-ts'\n\n\nfunction Positions() {\n    const [pools] = useRecoilState(poolsState)\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [userPools, setUserPools] = useState(() => new Map())\n\n    const updatePoolsIntervalCallback = async () => {\n        // Allow periodic update for pools with positions\n        userPools.forEach((balance, poolId) => {\n            if (!BigNumber(balance).isZero()) {\n                updatePoolDynamicData(poolId)\n            }\n        })\n    }\n\n    // timer to update pools where we have open positions\n    useInterval(updatePoolsIntervalCallback, 60000)\n\n    useEffect(() => {\n        async function fetchBalance(poolId) {\n            const balance = await getLPBalance(poolId, connectedAddress)\n            if (balance) {\n                setUserPools((prev) => {\n                    let m = new Map(prev)\n                    m.set(poolId, balance)\n                    return m\n                })\n            }\n        }\n        if (connectedAddress) {\n            pools.forEach((pool) => {\n                fetchBalance(pool.id)\n            })\n        }\n    }, [connectedAddress, pools])\n\n    const allPools = () => {\n        let r = []\n        userPools.forEach((balance, poolId) => {\n            if (!BigNumber(balance).isZero()) {\n                r.push(<LiquidityPool key={poolId} poolId={poolId} balance={balance} />)\n                //YS: don't call this from UI thread. updatePoolDynamicData(poolId)\n            }\n        })\n        return r\n    }\n\n    return <div>{allPools()}</div>\n}\n\nexport default Positions\n","import React, { useState, useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { getRecoil } from 'recoil-nexus'\nimport { BigNumber } from 'bignumber.js'\n\nimport {\n    tokensState,\n    poolsState,\n    tokensUserDataState,\n    walletAddressState,\n    addLiquiditySlippage,\n    transactionsStatusSelector\n} from '../atoms'\n\nimport {\n    add_liquidity,\n    updateTokenDynamicData,\n    updatePoolDynamicData,\n    getPoolIdFromTokens,\n    decimal_int_to_float,\n    float_to_decimal_int,\n    addToastMsg,\n    getPoolPriceForTokenA,\n    numFormat,\n    isTokenApproved,\n    calcOtherTokenRequiredAmountForLiquidity,\n    checkAndUpdateComponentTransactions,\n    isSufficientBalanceInWallet,\n    getWalletTokenAmount,\n    WALLET_SUFFICIENT_BALANCE\n} from '../services/amm'\n\nimport {\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    TextField,\n    Grid,\n    Button,\n    Box,\n    Card,\n    CardContent,\n    Typography\n} from '@mui/material'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn'\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet'\n\nimport { useInterval } from 'usehooks-ts'\n\nimport { GApage, GAbutton } from '../services/ga.js'\n\nimport BoxHeader from './BoxHeader.js'\nimport Positions from './Positions.js'\nimport ConnectWallet from './ConnectWallet.js'\nimport Approve from './Approve.js'\nimport Balance from './Balance.js'\n\nfunction Provide() {\n    const [tokens] = useRecoilState(tokensState)\n    const [pools] = useRecoilState(poolsState)\n    const [token1, setToken1] = useState('')\n    const [token1Amount, setToken1Amount] = useState('')\n    const [token2, setToken2] = useState('')\n    const [token2Amount, setToken2Amount] = useState('')\n    const [activePoolId, setActivePoolId] = useState(0)\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [addLiquidityInProgress, setAddLiquidityInProgress] = useState(false)\n    const [leadingToken, setLeadingToken] = useState(0) // 0 is no token, 1/2 is the last updated token\n    const [\n        approveToken1TxCompletedSuccessfully,\n        setApproveToken1TxCompletedSuccessfully\n    ] = useState(false)\n    const [\n        approveToken2TxCompletedSuccessfully,\n        setApproveToken2TxCompletedSuccessfully\n    ] = useState(false)\n\n    const [transactionsStatus] = useRecoilState(\n        transactionsStatusSelector('add_liquidity')\n    )\n    const [tuds] = useRecoilState(tokensUserDataState)\n    const [componentTxs, setComponentTxs] = useState({})\n\n    useEffect(() => {\n        GApage('pools')\n    }, [])\n\n    useEffect(() => {\n        console.log(\n            'Add Liquidity: called checkAndUpdateComponentTransactions ',\n            componentTxs\n        )\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setAddLiquidityInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    useEffect(() => {}, [tuds, pools])\n\n    useEffect(() => {\n        if (token1 && token2) {\n            let poolId = getPoolIdFromTokens(token1, token2)\n            setActivePoolId(poolId)\n\n            // follow the leader\n            if (leadingToken <= 1) {\n                // cannot be 0, but just for safety\n                if (poolId > 0) {\n                    let amount = calcOtherTokenRequiredAmountForLiquidity(\n                        token1,\n                        token2,\n                        token1Amount\n                    )\n                    //console.log('Provide Liquidity amount: ', amount)\n                    if (amount !== undefined) setToken2Amount(amount) // can set amount with numFormat for nicer display: numFormat(amount)\n                } else {\n                    setToken2Amount(0)\n                }\n            } else {\n                if (poolId > 0) {\n                    let amount = calcOtherTokenRequiredAmountForLiquidity(\n                        token2,\n                        token1,\n                        token2Amount\n                    )\n                    if (amount !== undefined) setToken1Amount(amount) // can set amount with numFormat for nicer display\n                } else {\n                    setToken1Amount(0)\n                }\n            }\n        }\n    }, [token1, token2, token1Amount, token2Amount, leadingToken, pools])\n\n    const updateTokensIntervalCallback = async () => {\n        // Allow periodic update only if both tokens are selected\n        if (activePoolId > 0) {\n            updatePoolDynamicData(activePoolId)\n        } else {\n            if (token1) updateTokenDynamicData(token1)\n            if (token2) updateTokenDynamicData(token2)\n        }\n    }\n\n    // timer to update token1 user data (allowance, amount)\n    // and selected pool data\n    useInterval(updateTokensIntervalCallback, 15000)\n\n    const handleToken1Select = (event) => {\n        let token_address = event.target.value\n        setToken1(token_address)\n        setApproveToken1TxCompletedSuccessfully(false)\n        setApproveToken2TxCompletedSuccessfully(false)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('pool-token1')\n    }\n\n    const handleToken2Select = (event) => {\n        let token_address = event.target.value\n        setToken2(token_address)\n        setApproveToken1TxCompletedSuccessfully(false)\n        setApproveToken2TxCompletedSuccessfully(false)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('pool-token2')\n    }\n\n    // Fixme: a perfect dup of the function in swap - consider extracting to util service module\n    const handleTokenAmountChange = (token, amount) => {\n        // fixme: consider limit decimals input according to token decimals\n        const regex = /^(([0-9]+[.]?[0-9]*)|([.][0-9]+))$/\n\n        if (token === token1 && (amount === '' || regex.test(amount))) {\n            setToken1Amount(amount)\n            setLeadingToken(1)\n        }\n        if (token === token2 && (amount === '' || regex.test(amount))) {\n            setToken2Amount(amount)\n            setLeadingToken(2)\n        }\n    }\n\n    const handleAddLiquidity = async () => {\n        setAddLiquidityInProgress(true)\n        GAbutton('add-liquidity')\n        let slippage = parseFloat(getRecoil(addLiquiditySlippage)) / 100\n        let minAmount1Out = BigNumber(token1Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage)))\n            .toString(10)\n        let minAmount2Out = BigNumber(token2Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage)))\n            .toString(10)\n        console.log('Add Liquidity slippage: ', slippage)\n        console.log(\n            'Add Liquidity minAmountOut: ',\n            minAmount1Out,\n            float_to_decimal_int(token1, minAmount1Out)\n        )\n\n        try {\n            let tx = await add_liquidity(\n                token1,\n                float_to_decimal_int(token1, token1Amount),\n                float_to_decimal_int(token1, minAmount1Out),\n                token2,\n                float_to_decimal_int(token2, token2Amount),\n                float_to_decimal_int(token2, minAmount2Out)\n            )\n\n            if (!tx) throw Error('Cannot perform transaction')\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n            console.log(\n                'Add Liquidity: Setting component transaction ',\n                typeof tx.transaction_hash,\n                componentTxs\n            )\n        } catch (e) {\n            addToastMsg('User abort', 'error')\n            setAddLiquidityInProgress(false)\n        }\n    }\n\n    const addLiquidityButton = () => {\n        let token1SufficientBalance = isSufficientBalanceInWallet(token1, token1Amount)\n        let token2SufficientBalance = isSufficientBalanceInWallet(token2, token2Amount)\n\n        if (\n            token1 &&\n            token2 &&\n            token1Amount > 0 &&\n            token2Amount > 0 &&\n            token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.TRUE &&\n            token2SufficientBalance === WALLET_SUFFICIENT_BALANCE.TRUE &&\n            activePoolId !== 0\n        ) {\n            // PoolId is valid - display ADD LIQUIDITY button\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={\n                        (connectedAddress &&\n                            isTokenApproved(token1, token1Amount) &&\n                            isTokenApproved(token2, token2Amount)) ||\n                        addLiquidityInProgress ||\n                        (approveToken2TxCompletedSuccessfully &&\n                            isTokenApproved(token1, token1Amount)) ||\n                        (approveToken1TxCompletedSuccessfully &&\n                            isTokenApproved(token2, token2Amount))\n                            ? false\n                            : true\n                    }\n                    loading={addLiquidityInProgress}\n                    loadingPosition='start'\n                    startIcon={<MonetizationOnIcon />}\n                    onClick={handleAddLiquidity}>\n                    {addLiquidityInProgress ? 'ADDING LIQUIDITY' : 'ADD LIQUIDITY'}\n                </LoadingButton>\n            )\n        }\n\n        if (\n            connectedAddress &&\n            token1 &&\n            token2 &&\n            token1Amount > 0 &&\n            token2Amount > 0 &&\n            (token1SufficientBalance !== WALLET_SUFFICIENT_BALANCE.TRUE ||\n                token2SufficientBalance !== WALLET_SUFFICIENT_BALANCE.TRUE)\n        ) {\n            // Amount exceed wallet balance\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}\n                    loading={\n                        token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.UNKNOWN ||\n                        token2SufficientBalance === WALLET_SUFFICIENT_BALANCE.UNKNOWN\n                    }\n                    loadingPosition='start'\n                    startIcon={<AccountBalanceWalletIcon />}>\n                    {token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.FALSE ||\n                    token2SufficientBalance === WALLET_SUFFICIENT_BALANCE.FALSE\n                        ? 'AMOUNT EXCEEDS WALLET BALANCE'\n                        : 'CHECKING WALLET BALANCE'}\n                </LoadingButton>\n            )\n        }\n\n        if (token1 && token2 && activePoolId === 0) {\n            // No pool for token pair selected\n            return (\n                <Button\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}>\n                    NOT A VALID Pool\n                </Button>\n            )\n        }\n\n        if (connectedAddress) {\n            // Wallet is connected\n            let instruction = ''\n            if (!token1 && !token2) instruction = 'SELECT TOKENS'\n            if ((!token1 && token2) || (token1 && !token2)) instruction = 'SELECT TOKEN'\n            if (token1 && token2 && (!token1Amount || !token2Amount))\n                instruction = 'ENTER AMOUNT'\n\n            if (instruction !== '')\n                return (\n                    <Button\n                        color='secondary'\n                        variant='contained'\n                        fullWidth={true}\n                        disabled={true}>\n                        {instruction}\n                    </Button>\n                )\n        }\n\n        return <div></div>\n    }\n\n    const priceAndShare = () => {\n        let pool = pools.get(activePoolId)\n\n        if (!token1Amount || !token2Amount || !activePoolId || !pool) return <div></div>\n\n        let symbol1 = tokens.get(token1).symbol\n        let symbol2 = tokens.get(token2).symbol\n        // console.log(\n        //     '-----POOL SHARE: ',\n        //     token1Amount,\n        //     token2Amount,\n        //     decimal_int_to_float(pool.token1, pool.token1Amount) +\n        //         BigNumber(token1Amount),\n        //     decimal_int_to_float(pool.token2, pool.token2Amount)\n        // )\n\n        let priceForToken1 = getPoolPriceForTokenA(activePoolId, token2, token1)\n        let priceForToken2 = getPoolPriceForTokenA(activePoolId, token1, token2)\n\n        // Normalize reserves amounts and get expected share in the pool\n        let pool_share =\n            pool.token1 === token1\n                ? BigNumber(token1Amount).div(\n                      BigNumber(token1Amount).plus(\n                          BigNumber(decimal_int_to_float(pool.token1, pool.token1Amount))\n                      )\n                  )\n                : BigNumber(token1Amount).div(\n                      BigNumber(token1Amount).plus(\n                          BigNumber(decimal_int_to_float(pool.token2, pool.token2Amount))\n                      )\n                  )\n\n        return (\n            <>\n                <Grid>\n                    <Card sx={{ mb: 2, mt: 2, boxShadow: 2 }}>\n                        <CardContent>\n                            <Typography\n                                sx={{ fontSize: 16, fontWeight: '500', mb: 0 }}\n                                gutterBottom>\n                                Pool Prices and Share\n                            </Typography>\n                        </CardContent>\n\n                        <Card sx={{ mb: 0, mt: 0 }}>\n                            <Grid item container alignItems='center' spacing={2}>\n                                <Grid item xs={4}>\n                                    <Typography\n                                        sx={{\n                                            textAlign: 'center',\n                                            lineHeight: 2,\n                                            mt: 1,\n                                            fontWeight: 'bold'\n                                        }}>\n                                        {numFormat(priceForToken1)}\n                                    </Typography>\n                                    <Typography\n                                        sx={{ textAlign: 'center', fontSize: 12, mb: 1 }}>\n                                        {symbol1} for {symbol2}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <Typography\n                                        sx={{\n                                            textAlign: 'center',\n                                            lineHeight: 2,\n                                            mt: 1,\n                                            fontWeight: 'bold'\n                                        }}>\n                                        {numFormat(priceForToken2)}\n                                    </Typography>\n                                    <Typography\n                                        sx={{ textAlign: 'center', fontSize: 12, mb: 1 }}>\n                                        {symbol2} for {symbol1}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <Typography\n                                        sx={{\n                                            textAlign: 'center',\n                                            lineHeight: 2,\n                                            mt: 1,\n                                            fontWeight: 'bold'\n                                        }}>\n                                        {numFormat(pool_share, true)}%\n                                    </Typography>\n                                    <Typography\n                                        sx={{ textAlign: 'center', fontSize: 12, mb: 1 }}>\n                                        Share of Pool\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    </Card>\n                </Grid>\n            </>\n        )\n    }\n\n    const menuItems = (otherSelectedToken) => {\n        let r = []\n        tokens.forEach((value, address) => {\n            if (otherSelectedToken !== address) {\n                r.push(\n                    <MenuItem key={address} value={address}>\n                        <Grid container direction='row'>\n                            <Grid sx={{ mr: 1, mb: -1 }}>\n                                <img src={value.icon} alt='' width='24' height='24' />\n                            </Grid>\n                            <Grid>\n                                <Typography>{value.symbol || value.address}</Typography>\n                            </Grid>\n                        </Grid>\n                    </MenuItem>\n                )\n            }\n        })\n        return r\n    }\n\n    return (\n        <div>\n            <Box sx={{ p: 2, border: '0px solid', mt: 1, mb: 4, boxShadow: 2 }}>\n                <Grid container sx={{ mb: 4 }}>\n                    <BoxHeader name='Add Liquidity' />\n                </Grid>\n\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <InputLabel id='token1-label'>Token 1:</InputLabel>\n                            <Select\n                                labelId='token1-label'\n                                id='token1-select'\n                                value={token1}\n                                label='Token 1'\n                                onChange={handleToken1Select}>\n                                {menuItems(token2)}\n                            </Select>\n                        </FormControl>\n                        <Balance\n                            token={token1}\n                            amount={getWalletTokenAmount(token1)}\n                            showMaxButton={true}\n                            setMaxAmountHandler={handleTokenAmountChange}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <TextField\n                                helperText='Amount to provide'\n                                id='token1-amount'\n                                inputProps={{\n                                    variant: 'outlined',\n                                    placeholder: '0.00',\n                                    type: 'string',\n                                    autoComplete: 'off',\n                                    'aria-labelledby': 'input-amount1'\n                                }}\n                                value={token1Amount ? token1Amount : ''}\n                                onChange={(e) =>\n                                    handleTokenAmountChange(token1, e.target.value)\n                                }\n                                error={\n                                    isSufficientBalanceInWallet(token1, token1Amount) ===\n                                    WALLET_SUFFICIENT_BALANCE.FALSE\n                                        ? true\n                                        : false\n                                }\n                                disabled={token1 === '' ? true : false}\n                            />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n\n                <Grid container spacing={2} sx={{ mt: 2 }}>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <InputLabel id='token2-label'>Token 2:</InputLabel>\n                            <Select\n                                labelId='token2-label'\n                                id='token2-select'\n                                value={token2}\n                                label='Token 2'\n                                onChange={handleToken2Select}>\n                                {menuItems(token1)}\n                            </Select>\n                        </FormControl>\n                        <Balance\n                            token={token2}\n                            amount={getWalletTokenAmount(token2)}\n                            showMaxButton={true}\n                            setMaxAmountHandler={handleTokenAmountChange}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <TextField\n                                helperText='Amount to provide'\n                                id='token2-amount'\n                                inputProps={{\n                                    variant: 'outlined',\n                                    placeholder: '0.00',\n                                    type: 'string',\n                                    autoComplete: 'off',\n                                    'aria-labelledby': 'input-amount2'\n                                }}\n                                value={token2Amount ? token2Amount : ''}\n                                onChange={(e) =>\n                                    handleTokenAmountChange(token2, e.target.value)\n                                }\n                                error={\n                                    isSufficientBalanceInWallet(token2, token2Amount) ===\n                                    WALLET_SUFFICIENT_BALANCE.FALSE\n                                        ? true\n                                        : false\n                                }\n                                disabled={token2 === '' ? true : false}\n                            />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n\n                {priceAndShare()}\n\n                <Card sx={{ minWidth: 275, mb: 2, mt: 3, boxShadow: 2 }}>\n                    <ConnectWallet secondary='true' />\n                    <Approve\n                        token={token1}\n                        tokenAmount={token1Amount}\n                        activePoolId={activePoolId}\n                        tokenInRange={\n                            isSufficientBalanceInWallet(token1, token1Amount) ===\n                            WALLET_SUFFICIENT_BALANCE.TRUE\n                        }\n                        approveTxStatusUpdateCallback={\n                            setApproveToken1TxCompletedSuccessfully\n                        }\n                    />\n                    <Approve\n                        token={token2}\n                        tokenAmount={token2Amount}\n                        activePoolId={activePoolId}\n                        tokenInRange={\n                            isSufficientBalanceInWallet(token2, token2Amount) ===\n                            WALLET_SUFFICIENT_BALANCE.TRUE\n                        }\n                        approveTxStatusUpdateCallback={\n                            setApproveToken2TxCompletedSuccessfully\n                        }\n                    />\n                    {addLiquidityButton()}\n                </Card>\n            </Box>\n\n            {/* User's position boxes */}\n            <Positions />\n        </div>\n    )\n}\n\nexport default Provide\n","import React from 'react'\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\n// import { Line } from 'react-chartjs-2'\nimport { Typography, /*Box, Card,*/ Grid } from '@mui/material'\n// import BoxHeader from './BoxHeader.js'\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\n\nfunction Charts() {\n    // const labels = [\n    //     '2021-12-14',\n    //     '2021-12-13',\n    //     '2021-12-12',\n    //     '2021-12-11',\n    //     '2021-12-10',\n    //     '2021-12-09',\n    //     '2021-12-08',\n    //     '2021-12-07',\n    //     '2021-12-06',\n    //     '2021-12-05'\n    // ]\n    // const datasets = [\n    //     {\n    //         id: 1,\n    //         label: '',\n    //         data: [\n    //             9.486967291294242, 9.913585044383598, 6.1093149832212585,\n    //             8.888170412454828, 9.644500380279675, 5.592256920179448,\n    //             1.6120884439497363, 1.6694652914713426, 9.780713359093626,\n    //             6.9842512776941055\n    //         ]\n    //     }\n    // ]\n    // return (\n    //     <Box sx={{ p: 2, border: '0px solid', mt: 1, mb: 4, boxShadow: 2 }}>\n    //         <div>\n    //             <Grid container sx={{ mb: 2 }}>\n    //                 <BoxHeader name='Charts' />\n    //             </Grid>\n\n    //             <Card sx={{ p: 2, boxShadow: 2, mb: -4 }}>\n    //                 <h1>Coming soon...</h1>\n    //             </Card>\n    //         </div>\n    //     </Box>\n    // )\n    /*\n    return (\n        <div>\n            <Card sx={{ mb: 0, mt: 0 }}>\n                <Typography>Overview</Typography>\n                <Grid item container alignItems='center' spacing={2}>\n                    <Grid item xs={6}>\n                        <Line\n                            datasetIdKey='id'\n                            data={{ labels: labels, datasets: datasets }}\n                        />\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <Line\n                            datasetIdKey='id'\n                            data={{ labels: labels, datasets: datasets }}\n                        />\n                    </Grid>\n                </Grid>\n            </Card>\n        </div>\n    )*/\n    return (\n        <div>\n            <Grid alignItems='center'>\n                <Typography\n                    variant='subtitle1'\n                    align='center'\n                    sx={{ mt: 20 }}\n                    style={{\n                        fontSize: 40,\n                        fontWeight: '500',\n                        color: 'gray',\n                        justifyContent: 'center'\n                    }}>\n                    Coming Soon\n                </Typography>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Charts\n","import React, { useState } from 'react'\nimport Swap from './Swap'\nimport Provide from './Provide'\nimport Charts from './Charts'\nimport { Tab, Tabs, Box } from '@mui/material'\n\nconst Main = () => {\n    const [selectedTab, setSelectedTab] = useState(0)\n\n    const handleChange = (event, newValue) => {\n        setSelectedTab(newValue)\n    }\n\n    return (\n        <Box>\n            <Tabs\n                sx={{ mt: 3, mb: 2 }}\n                value={selectedTab}\n                onChange={handleChange}\n                centered>\n                <Tab className='swap-tab' label='Swap' sx={{ fontSize: 18 }} />\n                <Tab className='provide-tab' label='Pools' sx={{ fontSize: 18 }} />\n                <Tab className='chart-tab' label='Charts' sx={{ fontSize: 18 }} />\n            </Tabs>\n            {selectedTab === 0 && <Swap />}\n            {selectedTab === 1 && <Provide />}\n            {selectedTab === 2 && <Charts />}\n        </Box>\n    )\n}\n\nexport default Main\n","import React from 'react'\nimport { Button } from '@mui/material'\n\nimport { human_readable_hash } from '../services/amm'\n\nfunction PendingTransaction(props) {\n    const handleClick = () => {\n        window.open('https://goerli.voyager.online/tx/' + props.hash, '_blank')\n    }\n\n    return (\n        <div>\n            <Button sx={{ mr: 2 }} variant='contained' onClick={handleClick}>\n                Tx {human_readable_hash(props.hash)} {props.transactionStatus}\n            </Button>\n        </div>\n    )\n}\n\nexport default PendingTransaction\n","import React from 'react'\n\nimport { useRecoilState } from 'recoil'\nimport { useInterval } from 'usehooks-ts'\n\nimport { pendingTxsState } from '../atoms'\nimport PendingTransaction from './PendingTransaction.js'\nimport {\n    getTransactionUpdate,\n    updateAllTokensDynamicData,\n    updatePoolsAndTokens,\n    addToastMsg\n} from '../services/amm'\n\nfunction PendingTransactions() {\n    const [txs] = useRecoilState(pendingTxsState)\n\n    const updateTransactionsStatus = async () => {\n        txs.forEach(async (tx) => {\n            if (!tx.dismiss) {\n                let status = await getTransactionUpdate(tx.hash)\n                let name = tx.type\n                    .split(/ |_/)\n                    .map((x) => x[0].toUpperCase() + x.slice(1))\n                    .join(' ')\n                if (status !== null) {\n                    // should get here only if there is an update\n                    if (status.includes('RECEIVED')) {\n                        addToastMsg(name + ' Transaction Sent', 'success')\n                    }\n                    if (status.includes('REJECTED')) {\n                        addToastMsg(name + ' Transaction Rejected', 'error')\n                    }\n                    if (status.includes('PENDING')) {\n                        addToastMsg(name + ' Transaction Pending', 'success')\n                        updatePoolsAndTokens(false)\n                        updateAllTokensDynamicData()\n                    }\n                    if (status.includes('ACCEPTED')) {\n                        addToastMsg(name + ' Transaction Accepted', 'success')\n                    }\n                }\n            }\n        })\n    }\n    useInterval(updateTransactionsStatus, 10000)\n\n    const pendingTransactions = () => {\n        let r = []\n        txs.forEach((tx) => {\n            if (!tx.dismiss) {\n                r.push(\n                    <PendingTransaction\n                        key={tx.hash}\n                        hash={tx.hash}\n                        transactionStatus={tx.status}>\n                        {' '}\n                    </PendingTransaction>\n                )\n            }\n        })\n        return r\n    }\n\n    return <>{pendingTransactions()}</>\n}\n\nexport default PendingTransactions\n","import React from 'react'\n\nimport { Snackbar, Alert } from '@mui/material'\n\nfunction Toast(props) {\n    const [open, setOpen] = React.useState(props.open)\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        setOpen(false)\n    }\n\n    return (\n        <Snackbar\n            className='toast'\n            open={open}\n            autoHideDuration={6000}\n            onClose={handleClose}>\n            <Alert onClose={handleClose} severity={props.type} sx={{ width: '100%' }}>\n                {props.msg}\n            </Alert>\n        </Snackbar>\n    )\n}\n\nexport default Toast\n","import React from 'react'\n\nimport { useRecoilState } from 'recoil'\n\nimport { toastsState } from '../atoms'\nimport Toast from './Toast.js'\n\nfunction Toasts() {\n    const [toasts] = useRecoilState(toastsState)\n\n    const activeToasts = () => {\n        let allActiveToasts = []\n        toasts.forEach((t) => {\n            if (!t.dismiss) {\n                allActiveToasts.push(\n                    <Toast\n                        key={t.hash}\n                        open={t.dismiss ? false : true}\n                        msg={t.msg}\n                        type={t.type}></Toast>\n                )\n            }\n        })\n        return allActiveToasts\n    }\n\n    return <div>{activeToasts()}</div>\n}\n\nexport default Toasts\n","import { Box, Card, AppBar, Toolbar, Grid, Button, Typography } from '@mui/material'\nimport React, { useEffect, useState } from 'react'\nimport { useRecoilState } from 'recoil'\nimport {\n    tokensState,\n    walletAddressState,\n    walletAmountsSelector,\n    walletAllowanceSelector,\n    lastTxDoneSelector\n} from '../atoms'\nimport { approve } from '../services/amm'\n\nfunction Wiper() {\n    const [mintedTokens, setMintedTokens] = useState(new Map())\n    const [waitingToWipe, setWaitingToWipe] = useState([])\n\n    const [tokens] = useRecoilState(tokensState)\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [walletAmounts] = useRecoilState(walletAmountsSelector)\n    const [walletAllowances] = useRecoilState(walletAllowanceSelector)\n    const [lastTxDone] = useRecoilState(lastTxDoneSelector)\n    const [startWipe, setStartWipe] = useState(false)\n\n    useEffect(() => {\n        console.log('minter tokens effect')\n        tokens.forEach((value, address) => {\n            console.log(address)\n            if (!mintedTokens.get(address)) {\n                setMintedTokens((prev) => {\n                    let n = new Map(prev)\n                    n.set(address, 0)\n                    return n\n                })\n            }\n        })\n    }, [tokens])\n\n    const mintedState = { 0: '...', 1: 'WIPING', 2: 'WIPED' }\n\n    const waitingToWipeList = () => {\n        let r = []\n        console.log(waitingToWipe)\n        for (const x of waitingToWipe) {\n            r.push(<div>token {x}</div>)\n        }\n        return r\n    }\n\n    const myTokensList = () => {\n        console.log('myTokensList!')\n        let r = []\n        mintedTokens.forEach((minted, address) => {\n            let token = tokens.get(address)\n            //console.log('walletAmounts=', walletAmounts)\n            let walletAmount = walletAmounts.get(address)\n            let approvedAmount = walletAllowances.get(address)\n            if (token) {\n                r.push(\n                    <Card key={address} sx={{ mt: 1 }}>\n                        <Grid container direction='row'>\n                            <Grid sx={{ mr: 1, mb: -1 }}>\n                                <img src={token.icon} alt='' width='24' height='24' />\n                            </Grid>\n                            <Grid>\n                                <Typography>{token.name || token.address}</Typography>\n                            </Grid>\n                            <Grid sx={{ ml: 2 }}>\n                                <Typography>\n                                    {' '}\n                                    in wallet: {walletAmount ? 'YES' : 'NONE'}\n                                </Typography>\n                            </Grid>\n                            <Grid sx={{ ml: 2 }}>\n                                <Typography>\n                                    {' '}\n                                    approved:{' '}\n                                    {approvedAmount && approvedAmount !== '0'\n                                        ? 'YES'\n                                        : 'NO'}\n                                </Typography>\n                            </Grid>\n                            <Grid\n                                container\n                                direction='row'\n                                justifyContent='flex-end'\n                                sx={{ mr: 1, mt: -3 }}>\n                                {mintedState[minted]}\n                            </Grid>\n                        </Grid>\n                    </Card>\n                )\n            }\n        })\n\n        //console.log(r)\n        return r\n    }\n\n    const wipeNextToken = () => {\n        console.log('waiting:', waitingToWipe)\n        let x = [...waitingToWipe]\n        let address = x.shift()\n        console.log('address: ', address)\n        approve(address, '0')\n        setWaitingToWipe(x)\n    }\n\n    useEffect(() => {\n        console.log(\n            'lastTxDone changed, val=',\n            lastTxDone,\n            ' waitingToWipe=',\n            waitingToWipe\n        )\n        if (lastTxDone && waitingToWipe.length > 0) {\n            wipeNextToken()\n        }\n        setStartWipe(false)\n    }, [lastTxDone])\n\n    useEffect(() => {\n        if (startWipe && lastTxDone && waitingToWipe.length > 0) {\n            wipeNextToken()\n        }\n    }, [startWipe])\n\n    const handleWipe = async () => {\n        console.log('will wipe...')\n        console.log(mintedTokens.entries())\n\n        let xx = []\n\n        for (const entry of mintedTokens.entries()) {\n            console.log(entry)\n            let address = entry[0]\n            let minted = entry[1]\n            console.log('handleWipe address=', address, ' minted=', minted)\n            let token = tokens.get(address)\n            let approvedAmount = walletAllowances.get(address)\n            console.log('token=', address, ' approvedAmount=', approvedAmount)\n            if (minted === 0 && token && approvedAmount && approvedAmount !== '0') {\n                /*  setWaitingToWipe((curr) => {\n                    return [...curr, address]\n                })*/\n                xx.push((' ' + address).slice(1))\n                console.log('xx=', xx)\n                /*\n                let tx = await ERC20_mint(\n                    address,\n                    float_to_decimal_int(address, mintAmount)\n                )*/\n\n                setMintedTokens((prev) => {\n                    let n = new Map(prev)\n                    n.set(address, 1)\n                    return n\n                })\n            }\n        }\n        setWaitingToWipe(xx)\n        setStartWipe(true)\n        // if (lastTxDone) wipeNextToken()\n    }\n\n    return (\n        <Box>\n            <Grid container sx={{ mt: 2, mb: 2 }}>\n                <Box sx={{ flexGrow: 1 }}>\n                    <AppBar position='static'>\n                        <Toolbar>\n                            <Typography>Wipe allowances</Typography>\n                        </Toolbar>\n                    </AppBar>\n                </Box>\n            </Grid>\n            <Grid container spacing={2} sx={{}}>\n                <Grid item xs={12}>\n                    <Button\n                        color='inherit'\n                        variant='outlined'\n                        fullWidth={true}\n                        disabled={connectedAddress ? false : true}\n                        onClick={handleWipe}>\n                        {connectedAddress ? 'WIPE' : 'PLEASE CONNECT WALLET'}\n                    </Button>\n                </Grid>\n                <Grid item xs={12}>\n                    {myTokensList()}\n                </Grid>\n                waiting to wipe:\n                <Grid item xs={12}>\n                    {waitingToWipeList()}\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport default Wiper\n","import React, { useEffect } from 'react'\nimport { AppBar, Toolbar, Typography, Container } from '@mui/material'\n\nimport { RecoilRoot } from 'recoil'\n\nimport RecoilNexus from 'recoil-nexus'\nimport { updatePoolsAndTokens } from './services/amm'\nimport { updatePoolsAndTokensStatic } from './services/static_data'\nimport Main from './components/Main'\nimport ConnectWallet from './components/ConnectWallet'\nimport PendingTransactions from './components/PendingTransactions'\nimport Toasts from './components/Toasts'\n// import Info from './components/Info'\n// import { useInterval } from 'usehooks-ts'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n// import Minter from './components/Minter'\nimport Wiper from './components/Wiper'\n\nimport { GAinit, GApage /*, GAbutton */ } from './services/ga.js'\n\nimport Charts from './components/Charts'\n\nfunction App() {\n    useEffect(() => {\n        GAinit()\n        GApage('/')\n    }, [])\n\n    // run once, on page load\n    useEffect(() => {\n        updatePoolsAndTokensStatic()\n        console.log('Finished updating static data')\n        updatePoolsAndTokens(true)\n    }, [])\n\n    return (\n        <Router>\n            <RecoilRoot>\n                <RecoilNexus />\n                <div className='App'>\n                    <AppBar position='sticky' /*style={{ background: '#2F2F5A' }}*/>\n                        <Toolbar>\n                            <Typography\n                                variant='h4'\n                                color='inherit'\n                                component='div'\n                                sx={{ flexGrow: 1 }}>\n                                mySwap\n                            </Typography>\n                            <PendingTransactions />\n                            <ConnectWallet />\n                        </Toolbar>\n                    </AppBar>\n\n                    <Switch>\n                        <Route exact path='/'>\n                            <Container maxWidth='sm'>\n                                <Main />\n                            </Container>\n                        </Route>\n                        <Route path='/charts'>\n                            <Charts />\n                        </Route>\n                        <Route path='/wipe'>\n                            <Container maxWidth='sm'>\n                                <Wiper />\n                            </Container>\n                        </Route>\n                    </Switch>\n                    <Toasts />\n                </div>\n            </RecoilRoot>\n        </Router>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n// import reportWebVitals from './reportWebVitals'\n\nimport CssBaseline from '@mui/material/CssBaseline'\n\nif (process.env.NODE_ENV !== 'development') {\n    console.log = () => {}\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline>\n            <App />\n        </CssBaseline>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n"],"sourceRoot":""}