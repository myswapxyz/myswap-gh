{"version":3,"sources":["../node_modules/typescript/lib sync","components/BoxHeader.js","atoms.ts","services/amm.ts","services/static_data.ts","components/Approve.js","components/Balance.js","services/wallet.service.ts","services/ga.js","components/ConnectWallet.js","components/Swap.js","components/RemoveLiquidity.js","components/LiquidityPool.js","components/Positions.js","components/Provide.js","components/Charts.js","components/Main.js","components/PendingTransaction.js","components/PendingTransactions.js","components/Toast.js","components/Toasts.js","components/Info.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","DEFAULT_SLIPPAGE","BoxHeader","props","slippage","setSlippage","useState","anchorEl","setAnchorEl","handleClose","name","setRecoil","swapSlippage","addLiquiditySlippage","withdrawLiquiditySlippage","console","log","Box","sx","flexGrow","AppBar","position","Toolbar","IconButton","size","edge","color","aria-label","onClick","event","currentTarget","mr","right","Typography","variant","component","Menu","boxShadow","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","PaperProps","style","width","open","Boolean","onClose","MenuItem","fontSize","fontWeight","Input","ml","mb","value","onChange","target","onKeyPress","key","inputProps","step","min","max","type","Grid","item","container","justifyContent","Button","textWeight","mt","walletAddressState","atom","default","poolsState","Map","tokensState","tokensUserDataState","pendingTxsState","Array","toastsState","transactionsStatusSelector","selectorFamily","get","componentName","pendingTx","filter","t","safeToSendTxSelector","selector","r","forEach","tud","address","undefined","userBalance","token","decimals","set","userApproved","tx","hash","status","done","includes","n","length","swapSelector","stark","getSelectorFromName","addLiquiditySelector","withdrawLiquiditySelector","getLPBalanceSelector","amm_contract","amm_contract_decimal","BigNumber","toString","selector_get_total_number_of_pools","selector_get_pool","selector_get_total_shares","approveSelector","selector_name","selector_symbol","selector_balanceOf","selector_allowance","selector_decimals","WALLET_SUFFICIENT_BALANCE","numFormat","num","isPercent","res","shiftedBy","sd","ROUND_DOWN","toPrecision","lt","toFixed","tokenAllowanceForAMM","ret","getRecoil","isTokenApproved","amount","tokenAllowance","gte","float_to_decimal_int","checkAndUpdateComponentTransactions","transactionsStatus","componentTxs","setAddLiquidityInProgress","hasOwnProperty","some","s","getPoolPriceForTokenA","poolId","token_in","token_out","otherAmount","pool","ratio","token1","token2Amount","decimal_int_to_float","times","div","token1Amount","getWalletTokenAmount","activeAccount","walletAddress","isSufficientBalanceInWallet","tokenWalletAmount","isPositive","lte","addToastMsg","msg","dismiss","random","current","updatePoolsAndTokens","async","starknet","getStarknet","provider","callContract","contract_address","entry_point_selector","calldata","numPools","Number","result","pools","tokens","new_pools","new_tokens","i","currentPool","refresh","Date","now","SECS_TO_REFRESH_POOL_DATA","data","shares","hex_to_ascii","composeUInt256","token2","fee","cfmm","alsoUpdateTokens","symbol","icon","promises","p","then","push","p1","p2","Promise","allSettled","updateAllTokensDynamicData","_","updateTokenDynamicData","updatePoolDynamicData","isConnected","token_address","current_token","t_thresh","currentTud","newMap","ammBalance","balance","numberToCallParam","p3","addPendingTx","low","high","plus","pow","str1","hex","substr","str","String","fromCharCode","parseInt","human_readable_hash","getPoolIdFromTokens","t1","t2","sortTokens","calcOtherTokenAmount","token_leading","token_other","token_leading_amount_float","leading_token_number","token_leading_amount","token_leading_reserve","token_other_reserve","minus","calcOtherTokenRequiredAmountForLiquidity","token_a","token_b","token_a_float","token_a_amount","price","safeToSend","SERVER_URL","DEFAULT_APPROVE_AMOUNT","BigInt","Approve","useRecoilState","connectedAddress","tokenApproveInProgress","setTokenApproveInProgress","setComponentTxs","useEffect","tokenAmount","activePoolId","tokenInRange","handleApproveToken","approveAmount","tokenFrom","signer","invokeFunction","transaction_hash","approve","prevState","token_obj","LoadingButton","fullWidth","loading","loadingPosition","startIcon","Balance","showMaxButton","setMaxAmountHandler","walletAmount","enable","networkId","baseUrl","getExplorerUrlBase","GApage","page","ReactGA","pageview","GAbutton","label","cat","action","category","GAtrack","ConnectWallet","walletConnectionStatus","setWalletConnectionStatus","voyagerBaseUrl","setVoyagerBaseUrl","networkName","setNetworkName","changeListenerRegistered","setChangeListenerRegistered","setAddress","handleClick","showModal","connectWallet","secondary","handleWalletChange","accounts","handleEvent","on","addWalletChangeListener","disabled","className","handleConnectedClick","window","fill","MAX_SAFE_INTEGER","Swap","setActivePoolId","setToken1","setToken1Amount","setToken2","setToken2Amount","leadingToken","setLeadingToken","swapInProgress","setSwapInProgress","tuds","useInterval","handleTokenAmountChange","regex","test","menuItems","otherSelectedToken","direction","src","alt","height","calcToken2MinAmount","parseFloat","handleSwap","minAmountOut","swapAmount","swap","priceDirection","setPriceDirection","border","Card","spacing","xs","FormControl","InputLabel","Select","labelId","TextField","helperText","placeholder","autoComplete","error","alignItems","tmpToken","tmpAmount","isZero","currentPrice","minAmount","token1Symbol","token2Symbol","floatSlippage","transactionPrice","transactionPriceInv","priceImpact","backgroundColor","gt","displayPrice1","displayPrice2","CardActionArea","priceAndSlippage","minWidth","token1SufficientBalance","token2InsufficientPoolBalance","floatAmount","decimalAmount","isInsufficientBalanceInPool","instruction","swapButton","Item","styled","Paper","theme","typography","body2","padding","textAlign","palette","text","MuiInput","RemoveLiquidity","setOpen","percent","setPercent","removeLiquidityInProgress","setRemoveLiquidityInProgress","updateState","newPercent","setAmounts","Dialog","DialogContent","DialogContentText","Slider","defaultValue","valueLabelDisplay","marks","aria-labelledby","onBlur","CardHeader","title","disableTypography","Stack","token1Icon","token2Icon","DialogActions","sharesToWithdraw","minToken1Amount","minToken2Amount","pool_id","token_a_min_amount","token_b_min_amount","withdraw_liquidity","LiquidityPool","userPoolShare","userToken1Amount","user_share","userToken1AmountDecimal","userToken2Amount","userToken2AmountDecimal","CardContent","gutterBottom","CardActions","Positions","userPools","setUserPools","fetchBalance","getLPBalance","prev","m","allPools","Provide","addLiquidityInProgress","handleAddLiquidity","minAmount1Out","minAmount2Out","token_a_address","token_b_address","token_b_amount","add_liquidity","symbol1","symbol2","priceForToken1","priceForToken2","pool_share","lineHeight","priceAndShare","token2SufficientBalance","addLiquidityButton","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Charts","Main","selectedTab","setSelectedTab","Tabs","newValue","centered","Tab","PendingTransaction","transactionStatus","PendingTransactions","txs","getTransactionStatus","pendingTxs","find","tx_status","currTxs","tx_","Object","assign","getTransactionUpdate","pendingTransactions","Toast","React","reason","Snackbar","autoHideDuration","Alert","severity","Toasts","toasts","allActiveToasts","activeToasts","App","initialize","fetch","json","fetchAmmInfo","numberOfPools","d","poolName","tokenAAddress","tokenAReserves","tokenBAddress","tokenBReserves","feePercentage","fetchPools","numberOfTokens","tokenAddress","tokenName","tokenSymbol","tokenIcon","tokenDecimals","fetchTokens","updatePoolsAndTokensStatic","RecoilNexus","Container","maxWidth","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.b4ebb1aa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 132;","import React, { useState } from 'react'\nimport { setRecoil } from 'recoil-nexus'\nimport { swapSlippage, addLiquiditySlippage, withdrawLiquiditySlippage } from '../atoms'\nimport {\n    MenuItem,\n    Typography,\n    AppBar,\n    Box,\n    Toolbar,\n    IconButton,\n    Input,\n    Button,\n    Grid,\n    Menu\n} from '@mui/material'\nimport SettingsIcon from '@mui/icons-material/Settings'\n\nexport const DEFAULT_SLIPPAGE = '0.50'\n\nfunction BoxHeader(props) {\n    const [slippage, setSlippage] = useState(DEFAULT_SLIPPAGE)\n    const [anchorEl, setAnchorEl] = useState(null)\n\n    const handleSlippageChange = (event) => {\n        setSlippage(event.target.value)\n    }\n\n    const handleMenu = (event) => {\n        setAnchorEl(event.currentTarget)\n    }\n\n    const handleClose = () => {\n        if (props.name === 'Swap') setRecoil(swapSlippage, slippage)\n        if (props.name === 'Add Liquidity') setRecoil(addLiquiditySlippage, slippage)\n        if (props.name === 'Remove Liquidity')\n            setRecoil(withdrawLiquiditySlippage, slippage)\n\n        console.log('Slippage set to: ', slippage)\n        setAnchorEl(null)\n    }\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position='static'>\n                <Toolbar>\n                    <IconButton\n                        size='large'\n                        edge='start'\n                        color='inherit'\n                        aria-label='menu'\n                        onClick={handleMenu}\n                        sx={{ mr: 2, position: 'absolute', right: '0%' }}>\n                        <SettingsIcon></SettingsIcon>\n                    </IconButton>\n                    <Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>\n                        {props.name}\n                    </Typography>\n                    <div>\n                        <Menu\n                            id='menuAppBar'\n                            sx={{ boxShadow: 1 }}\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right'\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right'\n                            }}\n                            PaperProps={{\n                                style: {\n                                    width: 250\n                                }\n                            }}\n                            open={Boolean(anchorEl)}\n                            onClose={handleClose}>\n                            <MenuItem sx={{ fontSize: 14, fontWeight: 'bold' }}>\n                                Transaction Settings\n                            </MenuItem>\n                            <MenuItem>\n                                Set Slippage\n                                <Input\n                                    sx={{ ml: 3, mb: 0 }}\n                                    value={slippage}\n                                    size='small'\n                                    onChange={handleSlippageChange}\n                                    onKeyPress={(event) => {\n                                        if (event.key === 'Enter') handleClose()\n                                    }}\n                                    inputProps={{\n                                        step: 0.01,\n                                        min: 0,\n                                        max: 100,\n                                        type: 'number',\n                                        'aria-labelledby': 'input-slider'\n                                    }}\n                                />\n                            </MenuItem>\n                            <Grid item container justifyContent='center'>\n                                <Button\n                                    variant='contained'\n                                    size='small'\n                                    sx={{ textWeight: 'bold', mt: 1 }}\n                                    onClick={handleClose}>\n                                    OK\n                                </Button>\n                            </Grid>\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </Box>\n    )\n}\n\nexport default BoxHeader\n","import { atom, selector, selectorFamily } from 'recoil'\nimport { DEFAULT_SLIPPAGE } from './components/BoxHeader'\n\n//const { persistAtom } = recoilPersist() // not currently used\n\nexport interface Pool {\n    id: number\n    name: string\n    token1: string\n    token1Amount: string // dynamic TODO: | undefined\n    token2: string\n    token2Amount: string // dynamic TODO: | undefined\n    refresh: number // when is the last time we refreshed this pool's data\n    fee: number\n    shares: string\n    cfmm: number\n}\n\n// static Token data\nexport interface Token {\n    name: string\n    symbol: string\n    address: string\n    decimals: number\n    id: number\n    icon: string // url\n}\n\n// dynamic Token data\nexport interface TokenUserData {\n    address: string\n    ammBalance: string | undefined\n    userBalance: string | undefined\n    userApproved: string | undefined\n    refresh: number // when is the last time we refreshed the user data for this token\n}\n\nexport interface Transaction {\n    hash: string\n    type: string\n    status: string\n    dismiss: boolean // TODO : remove\n    // TODO add acceptance time\n}\n\nexport interface ToastMsg {\n    msg: string\n    type: string\n    dismiss: boolean\n    hash: string // for uniqueness\n}\n\nexport const walletAddressState = atom({\n    key: 'walletAddressState',\n    default: ''\n})\n\nexport const isWalletConnectedState = atom({\n    key: 'isWalletConnectedState',\n    default: 0 // 0-not connected, 1=being connected, 2=connected\n})\n\nexport const poolsState = atom({\n    key: 'poolsState',\n    //    effects_UNSTABLE: [persistAtom],\n    default: new Map<number, Pool>()\n})\n\nexport const tokensState = atom({\n    key: 'tokensState',\n    //  effects_UNSTABLE: [persistAtom],\n    default: new Map<string, Token>()\n})\n\nexport const tokensUserDataState = atom({\n    key: 'tokensUserDataState',\n    default: new Map<string, TokenUserData>()\n})\n\nexport const pendingTxsState = atom({\n    key: 'pendingTxsState',\n    default: new Array<Transaction>()\n})\n\nexport const toastsState = atom({\n    key: 'toastsState',\n    default: new Array<ToastMsg>()\n})\n\nexport const swapSlippage = atom({\n    key: 'swapSlippage',\n    default: DEFAULT_SLIPPAGE\n})\n\nexport const addLiquiditySlippage = atom({\n    key: 'addLiquiditySlippage',\n    default: DEFAULT_SLIPPAGE\n})\n\nexport const withdrawLiquiditySlippage = atom({\n    key: 'withdrawLiquiditySlippage',\n    default: DEFAULT_SLIPPAGE\n})\n\n\n// Selectors\n\nexport const transactionsStatusSelector = selectorFamily ({\n    key: 'transactionsStatusSelector',\n    get: (componentName: string) => ({ get }): Array<Transaction> | undefined => {\n        let pendingTx = get(pendingTxsState)\n        if (pendingTx)\n            return pendingTx.filter(t => t.type === componentName)\n        return undefined\n    }\n})\n\nexport const walletAmountsSelector = selector({\n    key: 'walletAmountsSelector',\n    get: ({ get }): Map<string, string> => {\n        let r = new Map<string, string>()\n        get(tokensUserDataState).forEach((tud, address) => {\n            if (tud.userBalance !== undefined) {\n                let token = get(tokensState).get(address)\n                if (token && token.decimals) {\n                    r.set(address, tud.userBalance)\n                }\n            }\n        })\n        return r\n    }\n})\n\nexport const walletAllowanceSelector = selector({\n    key: 'walletAllowanceSelector',\n    get: ({ get }): Map<string, string> => {\n        let r = new Map<string, string>()\n        get(tokensUserDataState).forEach((tud, address) => {\n            if (tud.userApproved !== undefined) {\n                let token = get(tokensState).get(address)\n                if (token && token.decimals) {\n                    r.set(address, tud.userApproved)\n                }\n            }\n        })\n        return r\n    }\n})\n\nexport const pendingTxSelector = selector({\n    key: 'pendingTxSelector',\n    get: ({ get }): Map<string, string> => {\n        let r = new Map<string, string>()\n        get(pendingTxsState).forEach((tx) => {\n            r.set(tx.hash, tx.status)\n        })\n        return r\n    }\n})\n\nexport const lastTxDoneSelector = selector({\n    key: 'lastTxDoneSelector',\n    get: ({ get }): boolean => {\n        let done = true\n        get(pendingTxsState).forEach((tx) => {\n            done = false\n            if (tx.status === 'RECEIVED' || tx.status.includes('ACCEPTED')) done = true // Yaron: what about rejected\n        })\n        return done\n    }\n})\n\nexport const safeToSendTxSelector = selector({\n    key: 'safeToSendTxSelector',\n    get: ({ get }): boolean => {\n        const n = get(pendingTxsState).length\n        if (n === 0) return true\n\n        const tx = get(pendingTxsState)[n - 1]\n        if (tx.status.includes('REJECTED') || tx.status.includes('ACCEPTED')) return true //TODO: once Argent fix starknet.js, we need to add 'PENDING' as well\n\n        return false\n    }\n})\n","import { getRecoil, setRecoil } from 'recoil-nexus'\nimport { BigNumber } from 'bignumber.js'\nimport { stark } from 'starknet'\nimport { getStarknet } from '@argent/get-starknet'\n\nimport {\n    walletAddressState,\n    poolsState,\n    tokensState,\n    tokensUserDataState,\n    Pool,\n    Token,\n    TokenUserData,\n    pendingTxsState,\n    Transaction,\n    ToastMsg,\n    toastsState,\n    safeToSendTxSelector\n} from '../atoms'\n\n\n\n// amm\nconst swapSelector = stark.getSelectorFromName('swap')\nconst addLiquiditySelector = stark.getSelectorFromName('add_liquidity')\nconst withdrawLiquiditySelector = stark.getSelectorFromName('withdraw_liquidity')\nconst getLPBalanceSelector = stark.getSelectorFromName('get_lp_balance')\nconst amm_contract = '0x008fb0ec84a7025839faafbf9eeee6b6e9957d50bd418a334d00740fbb9f6170'\nconst amm_contract_decimal = BigNumber(amm_contract).toString(10)\n\nconst selector_get_total_number_of_pools = stark.getSelectorFromName(\n    'get_total_number_of_pools'\n)\nconst selector_get_pool = stark.getSelectorFromName('get_pool')\nconst selector_get_total_shares = stark.getSelectorFromName('get_total_shares')\n//const selector_get_pool_token_balance = stark.getSelectorFromName(\"get_pool_token_balance\")\n\n// ERC20\nconst approveSelector = stark.getSelectorFromName('approve')\nconst mintSelector = stark.getSelectorFromName('mint')\n\nconst selector_name = stark.getSelectorFromName('name')\nconst selector_symbol = stark.getSelectorFromName('symbol')\nconst selector_balanceOf = stark.getSelectorFromName('balanceOf')\nconst selector_allowance = stark.getSelectorFromName('allowance')\nconst selector_decimals = stark.getSelectorFromName('decimals')\n\nconst SECS_TO_REFRESH_POOL_DATA = 60\n\nexport const WALLET_SUFFICIENT_BALANCE = {\n    FALSE: 0,\n    TRUE: 1,\n    UNKNOWN: 2\n}\n\nconst is_dev = () : boolean => {\n    //return (process.env.NODE_ENV) === 'development'\n    return false\n}\n\n\nexport const numFormat = (num: string, isPercent = false): string => {\n    if (num === undefined || num === '' ) return ''\n\n    if (isPercent) {\n        let res = BigNumber(num).shiftedBy(2).sd(4, BigNumber.ROUND_DOWN).toPrecision(4)\n        if (BigNumber(res).lt(0.01)) return '<0.01'\n        return res\n    }\n\n    if (BigNumber(num).lt(1)) {\n        // BigNumber(0.012340000).sd(2).toString(10) --> '0.012'\n        let res = BigNumber(num).sd(6).toFixed(18, BigNumber.ROUND_DOWN)    // FIXME: need to align to token decimals (not 18).... 6 is a magic number...\n        // patch:\n        return BigNumber(res).toString(10)\n    }\n    return BigNumber(num).toFixed(2)\n}\n\n\nexport const tokenAllowanceForAMM = (token: string) => {\n    let ret = null\n    if (token) {\n        let tokensUserData = getRecoil(tokensUserDataState)\n        let tud = tokensUserData.get(token)\n        if (tud) {\n            ret = tud.userApproved\n            console.log('tokenAllowanceForAMM tud.userApproved = ', tud.userApproved)\n        }\n    }\n    return ret\n}\n\nexport const isTokenApproved = (token: string, amount: string): boolean => {\n    // Yaron: why do we need try-catch here? this is not an async function, how can it fail?\n    try {\n        let tokenAllowance = tokenAllowanceForAMM(token)    // should return a string\n        if (\n            tokenAllowance &&\n            BigNumber(tokenAllowance).gte(BigNumber(float_to_decimal_int(token, amount)))\n        ) {\n            return true\n        }\n    } catch (e) {}\n    return false\n}\n\n\nexport const checkAndUpdateComponentTransactions = (\n    transactionsStatus: Array<Transaction>,\n    componentTxs: Record<string, string>,\n    setAddLiquidityInProgress: (b: boolean) => any\n) => {\n    if (transactionsStatus) {\n        transactionsStatus.forEach((tx) => {\n            console.log('checkAndUpdateComponentTransactions: ', tx.status, tx.hash)\n\n            // check if transaction was already handled\n            if (componentTxs.hasOwnProperty(tx.hash)) {\n                if (\n                    ['REJECTED', 'PENDING', 'ACCEPTED'].some((s) => tx.status.includes(s))\n                ) {\n                    setAddLiquidityInProgress(false)\n                    delete componentTxs[tx.hash]\n                }\n            }\n        })\n    }\n}\n\n\nexport const getPoolPriceForTokenA = (poolId: number, token_in: string, token_out: string, otherAmount='1'): string => {\n    let pools = getRecoil(poolsState)\n    let pool = pools.get(poolId)\n    let ratio = BigNumber(1.0)\n\n    if (pool) {\n\n        if (pool.token1 === token_in) {\n            console.log('here',pool.token2Amount)\n            ratio = BigNumber(decimal_int_to_float(token_out, pool.token2Amount)).times(BigNumber(otherAmount)).div(\n                BigNumber(decimal_int_to_float(token_in, pool.token1Amount))\n            )\n        } else {\n            ratio = BigNumber(decimal_int_to_float(token_out, pool.token1Amount)).times(BigNumber(otherAmount)).div(\n                BigNumber(decimal_int_to_float(token_in, pool.token2Amount))\n            )\n        }\n    }\n    console.log('Ratio', ratio.toString(10))\n    return ratio.toString(10)\n}\n\n\nexport const getWalletTokenAmount = (token: string) : string => {\n    if (is_dev()) console.log('amm: getWalletTokemAmount, token=',token)\n\n    let activeAccount: string = walletAddress()\n    let tokensUserData = getRecoil(tokensUserDataState)\n    let tud = tokensUserData.get(token)     // expecting that tud values will be strings\n\n    if (!activeAccount || !token || !tud || tud.userBalance === undefined) return ''\n\n    return decimal_int_to_float(token, tud.userBalance)\n}\n\n\nexport const isSufficientBalanceInWallet = (token: string, amount: string) => {\n\n    if (is_dev()) console.log('amm: isSufficientBalanceInWallet, token=',token,' amount=',amount)\n\n\n    let activeAccount: string = walletAddress()\n    let tokensUserData = getRecoil(tokensUserDataState)\n    let tud = tokensUserData.get(token)\n\n    if (!activeAccount) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n    if (!token) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n    if (!amount) return WALLET_SUFFICIENT_BALANCE.TRUE\n    if (!tud) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n    if (tud.userBalance === undefined) return WALLET_SUFFICIENT_BALANCE.UNKNOWN\n\n    // The actual check:\n    let tokenWalletAmount = decimal_int_to_float(token, tud.userBalance)\n\n    if (\n        BigNumber(amount).isPositive() &&\n        BigNumber(amount).lte(BigNumber(tokenWalletAmount))\n    )\n        return WALLET_SUFFICIENT_BALANCE.TRUE\n\n    return WALLET_SUFFICIENT_BALANCE.FALSE\n}\n\nexport const isInsufficientBalanceInPool = (\n    poolId: number,\n    token: string,\n    floatAmount: string\n) : boolean => {\n\n    if (is_dev()) console.log('amm: isInsufficientBalanceInPool, pool=',poolId,' token=',token,' amount=',floatAmount)\n\n    if (!token || poolId <= 0) return false\n\n    let pools = getRecoil(poolsState)\n    let pool: Pool | undefined = pools.get(poolId)\n    if (!pool) throw Error('missing pool ' + poolId)\n\n    let decimalAmount = float_to_decimal_int(token, floatAmount)\n\n    if (pool.token1 === token) {\n        return BigNumber(decimalAmount).gt(BigNumber(pool.token1Amount))\n    } else {\n        return BigNumber(decimalAmount).gt(BigNumber(pool.token2Amount))\n    }\n}\n\nexport const addToastMsg = (msg: string, type: string) => {\n    let t: ToastMsg = { msg: msg, type: type, dismiss: false, hash: BigNumber.random(10).times(1e10).toString(16) }\n    setRecoil(toastsState, (current: Array<ToastMsg>) => {\n        return [...current, t]\n    })\n}\n\nconst walletAddress = () => {\n    return getRecoil(walletAddressState)\n}\n\nexport const updatePoolsAndTokens = async (alsoUpdateTokens: boolean): Promise<any> => {\n    console.log('updatePoolsAndTokens')\n    if (is_dev()) addToastMsg('updatePoolsAndTokens, tokens='+alsoUpdateTokens, 'info')\n\n    const starknet = getStarknet()\n\n    let r = await starknet.provider.callContract({\n        contract_address: amm_contract,\n        entry_point_selector: selector_get_total_number_of_pools,\n        calldata: []\n    })\n\n    let numPools = Number(r.result[0])\n    let pools = getRecoil(poolsState)\n    let tokens = getRecoil(tokensState)\n    let new_pools = new Map<number, Pool>()\n    let new_tokens = new Map(tokens)\n\n    for (let i = 1; i <= numPools; i++) {\n        let currentPool = pools.get(i)\n        if (\n            currentPool &&\n            currentPool.refresh > Date.now() - SECS_TO_REFRESH_POOL_DATA * 1000\n        ) {\n            new_pools.set(i, currentPool)\n            continue // don't refresh\n        }\n\n        let data = await starknet.provider.callContract({\n            contract_address: amm_contract,\n            entry_point_selector: selector_get_pool,\n            calldata: [i.toString()]\n        })\n\n        let shares = await starknet.provider.callContract({\n            contract_address: amm_contract,\n            entry_point_selector: selector_get_total_shares,\n            calldata: [i.toString()]\n        })\n\n        console.log(data)\n        let pool: Pool = {\n            id: i,\n            name: hex_to_ascii(data.result[0]),\n            token1: data.result[1],\n            token1Amount: composeUInt256(data.result[2], data.result[3]),\n            token2: data.result[4],\n            token2Amount: composeUInt256(data.result[5], data.result[6]),\n            fee: Number(data.result[7]) / 1e5,\n            cfmm: Number(data.result[8]),\n            shares: composeUInt256(shares.result[0], shares.result[1]),\n            refresh: Date.now()\n        }\n        new_pools.set(i, pool)\n\n        if (alsoUpdateTokens) {\n            if (!new_tokens.get(pool.token1)) {\n                let n = new_tokens.size\n                console.log('new token1 n=', n)\n                let t: Token = {\n                    address: pool.token1,\n                    id: n,\n                    name: '',\n                    symbol: '',\n                    icon: '',\n                    decimals: 0\n                }\n                new_tokens.set(pool.token1, t)\n            }\n            if (!new_tokens.get(pool.token2)) {\n                let n = new_tokens.size\n                console.log('new token2 n=', n)\n                let t: Token = {\n                    address: pool.token2,\n                    id: n,\n                    name: '',\n                    symbol: '',\n                    icon: '',\n                    decimals: 0\n                }\n                new_tokens.set(pool.token2, t)\n            }\n        }\n    }\n\n    // fetch token names and precision\n    if (alsoUpdateTokens) {\n        let promises: Array<Promise<any>> = []\n        new_tokens.forEach((value: Token, address: string) => {\n            let p = starknet.provider\n                .callContract({\n                    contract_address: address,\n                    entry_point_selector: selector_name,\n                    calldata: []\n                })\n                .then((data: any) => {\n                    const name = hex_to_ascii(data.result[0])\n                    console.log('name=', name)\n                    value.name = name\n                })\n            promises.push(p)\n            let p1 = starknet.provider\n                .callContract({\n                    contract_address: address,\n                    entry_point_selector: selector_symbol,\n                    calldata: []\n                })\n                .then((data: any) => {\n                    const name = hex_to_ascii(data.result[0])\n                    console.log('symbol=', name)\n                    value.symbol = name\n                })\n            promises.push(p1)\n\n            let p2 = starknet.provider\n                .callContract({\n                    contract_address: address,\n                    entry_point_selector: selector_decimals,\n                    calldata: []\n                })\n                .then((data: any) => {\n                    const decimals = Number(data.result[0])\n                    value.decimals = decimals\n                })\n            promises.push(p2)\n        })\n        await Promise.allSettled(promises)\n\n        // update tokens in recoil (before pools!)\n        setRecoil(tokensState, new_tokens)\n        console.log('tokens=', new_tokens)\n    }\n\n    // update pools in recoil\n    setRecoil(poolsState, new_pools)\n}\n\nexport const updateAllTokensDynamicData = async (): Promise<any> => {\n    let tokens = getRecoil(tokensState)\n    tokens.forEach((_, token) => {\n        console.log('updateAllTokensDynamicData: token=', token)\n        updateTokenDynamicData(token)\n    })\n}\n\nexport const updatePoolDynamicData = async (poolId: number): Promise<any> => {\n    console.log('updatePoolDynamicData')\nif (is_dev()) addToastMsg('updatePoolDynamicData, pool='+poolId, 'info')\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    let pools = getRecoil(poolsState)\n    let tokens = getRecoil(tokensState)\n\n    const starknet = getStarknet()\n\n    // checks that enable succeeded\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let pool: Pool | undefined = pools.get(poolId)\n    if (!pool) throw Error('unknown pool ' + poolId)\n\n    let token1: Token | undefined = tokens.get(pool.token1)\n    let token2: Token | undefined = tokens.get(pool.token2)\n    if (!token1) throw Error('missing token ' + pool.token1)\n    if (!token2) throw Error('missing token ' + pool.token2)\n\n    // so far everything must have been stored in recoil\n    // now we update dynamic data: per token in pool\n    updateTokenDynamicData(pool.token1)\n    updateTokenDynamicData(pool.token2)\n}\n\nexport const updateTokenDynamicData = async (token_address: string): Promise<any> => {\n    if (!token_address) return null\n    if (is_dev()) addToastMsg('updateTokenDynamicData, token='+token_address, 'info')\n\n    const starknet = getStarknet()\n    let promises: Array<Promise<any>> = []\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    let tokensDynamic = getRecoil(tokensUserDataState)\n    let current_token = tokensDynamic.get(token_address)\n    if (current_token) {\n        const t_thresh = Date.now() - SECS_TO_REFRESH_POOL_DATA * 1000\n        if (current_token.refresh > t_thresh) {\n            return null\n        }\n    } else {\n        // new token - first store an empty shell in Recoil, then the async requests will update it\n        setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n            let newMap = new Map(currentTud)\n            if (!newMap.get(token_address)) {\n                let tud: TokenUserData = {\n                    address: token_address,\n                    refresh: Date.now(),\n                    ammBalance: undefined,\n                    userBalance: undefined,\n                    userApproved: undefined\n                }\n                newMap.set(token_address, tud)\n            }\n            return newMap\n        })\n    }\n\n    let p1 = starknet.provider\n        .callContract({\n            contract_address: token_address,\n            entry_point_selector: selector_balanceOf,\n            calldata: [amm_contract_decimal]\n        })\n        .then((data: any) => {\n            const balance = composeUInt256(data.result[0], data.result[1])\n            // update balance directly in recoil\n            setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n                let newMap = new Map(currentTud)\n                let tud = newMap.get(token_address)\n                if (tud) {\n                    tud.ammBalance = balance\n                    newMap.set(tud.address, tud)\n                }\n                return newMap\n            })\n\n        })\n    promises.push(p1)\n\n    let p2 = starknet.provider\n        .callContract({\n            contract_address: token_address,\n            entry_point_selector: selector_balanceOf,\n            calldata: [numberToCallParam(activeAccount)]\n        })\n        .then((data: any) => {\n            // update balance directly in recoil\n            const balance = composeUInt256(data.result[0], data.result[1])\n            setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n                let newMap = new Map(currentTud)\n                let tud = newMap.get(token_address)\n                if (tud) {\n                    tud.userBalance = balance\n                    newMap.set(tud.address, tud)\n                }\n                return newMap\n            })\n        })\n    promises.push(p2)\n\n    let p3 = starknet.provider\n        .callContract({\n            contract_address: token_address,\n            entry_point_selector: selector_allowance,\n            calldata: [numberToCallParam(activeAccount), numberToCallParam(amm_contract)]\n        })\n        .then((data: any) => {\n            const balance = composeUInt256(data.result[0], data.result[1])\n            setRecoil(tokensUserDataState, (currentTud: Map<string, TokenUserData>) => {\n                let newMap = new Map(currentTud)\n                let tud = newMap.get(token_address)\n                if (tud) {\n                    tud.userApproved = balance\n                    newMap.set(tud.address, tud)\n                }\n                return newMap\n            })\n        })\n    promises.push(p3)\n\n    await Promise.allSettled(promises)\n}\n\nfunction addPendingTx(hash: string, type: string) {\n    // fixme: use 'type' as enum and not freestyle strings\n    let tx: Transaction = {\n        hash: hash,\n        type: type,\n        status: 'new',\n        dismiss: false\n    }\n    setRecoil(pendingTxsState, (current: Array<Transaction>) => {\n        return [...current, tx]\n    })\n}\n\nexport const approve = async (tokenFrom: string, amount: string): Promise<any> => {\n    console.log('approve')\n\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        tokenFrom, // to (ERC-20 contract)\n        approveSelector, // selector (approve)\n        [numberToCallParam(amm_contract), numberToCallParam(amount), numberToCallParam(0)]\n    )\n\n    addPendingTx(tx.transaction_hash, 'approve')\n\n    return tx\n}\n\nexport const getAllowance = async (tokenFrom: string): Promise<any> => {\n    console.log('getAllowance')\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    // checks that enable succeeded\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    return ERC20_allowance(tokenFrom, activeAccount, amm_contract)\n}\n\nexport const ERC20_balanceOf = async (token: string, account: string): Promise<any> => {\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let data = await starknet.provider.callContract({\n        contract_address: token,\n        entry_point_selector: selector_balanceOf,\n        calldata: [numberToCallParam(account)]\n    })\n\n    const balance = composeUInt256(data.result[0], data.result[1])\n\n    return balance\n}\n\nexport const ERC20_allowance = async (\n    token: string,\n    owner: string,\n    spender: string\n): Promise<any> => {\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let data = await starknet.provider.callContract({\n        contract_address: token,\n        entry_point_selector: selector_allowance,\n        calldata: [numberToCallParam(owner), numberToCallParam(spender)]\n    })\n\n    const balance = composeUInt256(data.result[0], data.result[1])\n    return balance\n}\n\nexport const ERC20_mint = async (token: string, amount: string): Promise<any> => {\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        token, // to (ERC-20 contract)\n        mintSelector, // selector (mint)\n        [\n            numberToCallParam(activeAccount),\n            numberToCallParam(amount),\n            numberToCallParam(0)\n        ]\n    )\n\n    addPendingTx(tx.transaction_hash, 'mint')\n\n    return tx\n}\n\nexport const swap = async (\n    poolId: number,\n    tokenFrom: string,\n    swapAmount: string,\n    minAmountOut: string\n): Promise<any> => {\n    console.log('swap')\n\n    const starknet = getStarknet()\n\n    let activeAccount: string = walletAddress()\n\n    if (!activeAccount) {\n        return null\n    }\n\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        amm_contract, // to\n        swapSelector, // selector (swap)\n        [\n            numberToCallParam(poolId),\n            numberToCallParam(tokenFrom),\n            numberToCallParam(swapAmount),\n            numberToCallParam(0),\n            numberToCallParam(minAmountOut),\n            numberToCallParam(0)\n        ]\n    )\n\n    addPendingTx(tx.transaction_hash, 'swap')\n    return tx\n}\n\nexport const getLPBalance = async (pool_id: number, address: string): Promise<any> => {\n    const starknet = getStarknet()\n\n    if (!address) {\n        return null\n    }\n    if (starknet.isConnected === false) throw Error('starknet wallet not connected')\n\n    let data = await starknet.provider.callContract({\n        contract_address: amm_contract,\n        entry_point_selector: getLPBalanceSelector,\n        calldata: [numberToCallParam(pool_id), numberToCallParam(address)]\n    })\n\n    const balance = composeUInt256(data.result[0], data.result[1])\n\n    return balance\n}\n\nexport const composeUInt256 = (low: string, high: string): string => {\n    return BigNumber(low).plus(BigNumber(high).times(BigNumber(2).pow(128))).toString(10)\n}\n\n// fixme: probably redundant, consider remove\nconst numberToCallParam = (n: number | string): string => {\n    return BigNumber(n).toString(10)\n    //not good: return number.toBN(n).toString()\n}\n\n// fixme substr is deprecated\nfunction hex_to_ascii(str1: string): string {\n    var hex = str1.substr(2).toString()\n    var str = ''\n    for (var n = 0; n < hex.length; n += 2) {\n        str += String.fromCharCode(parseInt(hex.substr(n, 2), 16))\n    }\n    return str\n}\n\nexport function human_readable_hash(hash: string): string {\n    if (hash.length <= 8) return hash\n    return hash.substr(0, 5) + '...' + hash.substr(-3)\n}\n\nexport const waitForTransaction = async (hash: string) => {\n    await getStarknet().provider.waitForTx(hash)\n}\n\nexport const getTransactionUpdate = async (hash: string): Promise<string | null> => {\n    let t = await getStarknet().provider.getTransactionStatus(hash)\n\n    // check if transaction status has changed and update Recoil\n    let pendingTxs = getRecoil(pendingTxsState)\n    if (\n        pendingTxs &&\n        pendingTxs.find((tx) => tx.hash === hash && tx.status !== t.tx_status)\n    ) {\n        console.log('getTransactionUpdate: ', t.tx_status, hash)\n        setRecoil(pendingTxsState, (currTxs: Array<Transaction>) => {\n            let r = new Array<Transaction>()\n            currTxs.forEach((tx) => {\n                console.log('Inside forEach: ', tx.hash, tx.status)\n                if (tx.hash === hash) {\n                    // dup and change\n                    let tx_: Transaction = Object.assign({}, tx)\n                    tx_.status = t.tx_status\n                    if (\n                        //tx_.status === 'PENDING' ||                        \n                        tx_.status === 'ACCEPTED_ON_L2' ||\n                        tx_.status === 'ACCEPTED_ON_L1' \n                    )\n                        tx_.dismiss = true\n                    \n                    // we can delete the transaction here if on L1...\n\n                    r.push(tx_)\n                } else {\n                    r.push(tx)\n                }\n            })\n            return r\n        })\n        return t.tx_status\n    }\n    return null\n}\n\nfunction sortTokens(token1: string, token2: string): string[] {\n    return BigNumber(token1) < BigNumber(token2) ? [token1, token2] : [token2, token1]\n}\n\nexport const getPoolIdFromTokens = (token1: string, token2: string): number => {\n    // check that we know these tokens\n    let pools = getRecoil(poolsState)\n    let tokens = getRecoil(tokensState)\n    if (!tokens.get(token1) || !tokens.get(token2)) throw Error('Unknown tokens')\n\n    let [t1, t2] = sortTokens(token1, token2)\n    for (let id = 1; id <= pools.size; id++) {\n        let pool: Pool | undefined = pools.get(id)\n        if (!pool) throw Error('missing pool ' + id)\n        if (pool.token1 === t1 && pool.token2 === t2) return id\n    }\n    return 0\n}\n\nexport function float_to_decimal_int(token_address: string, amount: string): string {\n    let tokens = getRecoil(tokensState)\n    let token: Token | undefined = tokens.get(token_address)\n    if (token === undefined) {\n        // throw Error('undefined pool')\n        addToastMsg(\n            'float_to_decimal_int: Undefined pool for token ' +\n                token_address +\n                ', tokens size=' +\n                tokens.size +\n                ' amount=' +\n                amount,\n            'warning'\n        )\n        return '0'\n    }\n\n    return BigNumber(amount).shiftedBy(token.decimals).toFixed(0, BigNumber.ROUND_DOWN)\n}\n\nexport function decimal_int_to_float(token_address: string, amount: string): string {\n    let tokens = getRecoil(tokensState)\n    let token: Token | undefined = tokens.get(token_address)\n    if (token === undefined) {\n        //throw Error('undefined pool')\n        addToastMsg(\n            'decimal_int_to_float: Undefined pool for token ' +\n                token_address +\n                ', tokens size=' +\n                tokens.size +\n                ' amount=' +\n                amount,\n            'warning'\n        )\n        return '0'\n    }\n\n    return BigNumber(amount).shiftedBy(-token.decimals).toString(10)    // should have exactly 'decimals' floating point\n}\n\nexport const calcOtherTokenAmount = (\n    token_leading: string,\n    token_other: string,\n    token_leading_amount_float: string,\n    leading_token_number: number // either 1, or 2\n): string | undefined => {\n\n    let poolId = getPoolIdFromTokens(token_leading, token_other)\n    if (\n        poolId === 0 ||\n        token_leading_amount_float === undefined ||\n        token_leading_amount_float === null\n    )\n        return undefined\n\n    if (token_leading_amount_float === '')\n        return ''\n\n    let token_leading_amount = float_to_decimal_int(\n        token_leading,\n        token_leading_amount_float\n    )\n\n    let pools = getRecoil(poolsState)\n    let pool: Pool | undefined = pools.get(poolId)\n\n    if (pool === undefined) {\n        addToastMsg('Undefined pool id=' + poolId, 'warning')\n        return undefined\n    }\n\n    // check reserves\n    let token_leading_reserve = '0'\n    let token_other_reserve = '0'\n\n    if (pool.token1 === token_leading) {\n        token_leading_reserve = pool.token1Amount\n        token_other_reserve = pool.token2Amount\n    } else {\n        token_leading_reserve = pool.token2Amount\n        token_other_reserve = pool.token1Amount\n    }\n\n    if (BigNumber(token_leading_reserve).lte(0) || BigNumber(token_other_reserve).lte(0))\n        throw Error('token reserve cannot be 0')\n\n    if (leading_token_number === 1) {\n        let token_out_expected_amount =\n            BigNumber(token_other_reserve).times(BigNumber(token_leading_amount))\n            .div(\n                BigNumber(token_leading_reserve).plus(BigNumber(token_leading_amount))\n                )\n            .toFixed(0, BigNumber.ROUND_DOWN)\n\n        return decimal_int_to_float(token_other, token_out_expected_amount)\n    } else {\n        // leading token is 2, calc what should be the output in order to get\n        let token_in_calculated_amount =\n        BigNumber(token_other_reserve).times(BigNumber(token_leading_amount))\n        .div(\n            BigNumber(token_leading_reserve).minus(BigNumber(token_leading_amount))\n            )\n        .toFixed(0, BigNumber.ROUND_DOWN)\n\n        return decimal_int_to_float(token_other, token_in_calculated_amount)\n    }\n}\n\nexport const calcOtherTokenRequiredAmountForLiquidity = (\n    token_a: string,\n    token_b: string,\n    token_a_float: string\n): string | undefined => {\n    let poolId = getPoolIdFromTokens(token_a, token_b)\n    if (\n        poolId === 0 ||\n        token_a_float === undefined ||\n        token_a_float === null\n    )\n        return undefined\n\n    if (token_a_float === '') return ''\n\n    let token_a_amount = float_to_decimal_int(token_a, token_a_float)\n\n    let pools = getRecoil(poolsState)\n    let pool: Pool | undefined = pools.get(poolId)\n\n    if (pool === undefined) {\n        // throw Error('undefined pool')\n        addToastMsg('Undefined pool id=' + poolId, 'warning')\n        return undefined\n    }\n\n    let price = getPoolPriceForTokenA(poolId, token_a, token_b, token_a_amount)\n\n    console.log('Other Token Add Liquidity: ', price, token_a_amount)\n    //let token_b_amount = BigNumber(price).times(BigNumber(token_a_amount)).toFixed(0, BigNumber.ROUND_DOWN)\n    //return decimal_int_to_float(token_b, token_b_amount)\n\n\n    return decimal_int_to_float(token_b, price)\n}\n\nexport const add_liquidity = async (\n    token_a_address: string,\n    token_a_amount: string,\n    token_a_min_amount: string,\n    token_b_address: string,\n    token_b_amount: string,\n    token_b_min_amount: string\n) => {\n    console.log('AMM_add_liquidity: ', token_a_min_amount, numberToCallParam(token_a_min_amount))\n\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (starknet.isConnected === false || !activeAccount) {\n        // Need to convert to a toast\n        return null\n    }\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        amm_contract, // to\n        addLiquiditySelector, // 'add_liquidity' selector\n        [\n            numberToCallParam(token_a_address),\n            numberToCallParam(token_a_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_a_min_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_b_address),\n            numberToCallParam(token_b_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_b_min_amount),\n            numberToCallParam(0)\n        ]\n    )\n\n\n    return tx\n}\n\nexport const withdraw_liquidity = async (\n    pool_id: number,\n    shares: string,\n    token_a_min_amount: string,\n    token_b_min_amount: string\n) => {\n    console.log('withdraw_liquidity')\n\n    const starknet = getStarknet()\n    let activeAccount: string = walletAddress()\n\n    if (starknet.isConnected === false || !activeAccount) {\n        // Need to convert to a toast\n        return null\n    }\n\n    console.log(\n        'Calling Starknet: withdraw_liquidity with ',\n        pool_id,\n        shares,\n        token_a_min_amount,\n        token_b_min_amount\n    )\n\n    if (!safeToSend()) return null\n\n    let tx = await starknet.signer.invokeFunction(\n        amm_contract, // to\n        withdrawLiquiditySelector, // 'add_liquidity' selector\n        [\n            numberToCallParam(pool_id),\n            numberToCallParam(shares),\n            numberToCallParam(0),\n            numberToCallParam(token_a_min_amount),\n            numberToCallParam(0),\n            numberToCallParam(token_b_min_amount),\n            numberToCallParam(0)\n        ]\n    )\n\n    addPendingTx(tx.transaction_hash, 'withdraw_liquidity')\n\n    return tx\n}\n\nconst safeToSend = () : boolean => {\n    if (getRecoil(safeToSendTxSelector)) return true\n\n    addToastMsg('Previous Transaction still being processed by your wallet, try again later','error')\n    return false\n}","import { setRecoil } from 'recoil-nexus'\nimport { Pool, poolsState, Token, tokensState } from '../atoms'\nimport { composeUInt256 } from './amm'\n\n// Fixme: decide which server to go with\n//const SERVER_URL = \"http://localhost:7000\"\n//const SERVER_URL = \"https://mottyl.github.io/static_data/data/amm.json\"\nconst SERVER_URL = 'https://my-json-server.typicode.com/mottyl/static_data'\n\nexport const updatePoolsAndTokensStatic = async () => {\n    // Fetch AMM Info\n    const fetchAmmInfo = async () => {\n        const res = await fetch(`${SERVER_URL}/amminfo`)\n        const data = await res.json()\n        console.log('AMM info data:', data)\n    }\n\n    // Fetch Pools\n    const fetchPools = async () => {\n        const res = await fetch(`${SERVER_URL}/pools`)\n        const data = await res.json()\n        let new_pools = new Map<number, Pool>()\n        for (let i = 1; i <= data.numberOfPools; i++) {\n            let d = data[i]\n            let pool: Pool = {\n                id: i,\n                name: d.poolName,\n                token1: d.tokenAAddress,\n                token1Amount: composeUInt256(d.tokenAReserves[0], d.tokenAReserves[1]),\n                token2: d.tokenBAddress,\n                token2Amount: composeUInt256(d.tokenBReserves[0], d.tokenBReserves[1]),\n                fee: Number(d.feePercentage) / 1e5,\n                cfmm: Number(d.cfmm),\n                shares: composeUInt256(d.shares[0], d.shares[1]),\n                refresh: Date.now()\n            }\n            console.log('Pool = ', pool)\n            new_pools.set(i, pool)\n        }\n        // Save to Recoil\n        setRecoil(poolsState, new_pools)\n    }\n\n    // Fetch Tokens\n    const fetchTokens = async () => {\n        const res = await fetch(`${SERVER_URL}/tokens`)\n        const data = await res.json()\n\n        let new_tokens = new Map<string, Token>()\n        for (let i = 0; i < data.numberOfTokens; i++) {\n            let d = data[i]\n            let token: Token = {\n                address: d.tokenAddress,\n                id: i,\n                name: d.tokenName,\n                symbol: d.tokenSymbol,\n                icon: d.tokenIcon,\n                decimals: d.tokenDecimals\n            }\n            new_tokens.set(d.tokenAddress, token)\n            console.log('Token = ', token)\n        }\n        setRecoil(tokensState, new_tokens)\n    }\n\n    fetchAmmInfo()\n    fetchPools()\n    fetchTokens()\n}\n","import React, { useState, useEffect } from 'react'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport PendingActionsIcon from '@mui/icons-material/PendingActions'\nimport {\n    approve,\n    isTokenApproved,\n    tokenAllowanceForAMM,\n    float_to_decimal_int,\n    addToastMsg,\n    checkAndUpdateComponentTransactions\n} from '../services/amm'\nimport { tokensState, walletAddressState, transactionsStatusSelector } from '../atoms'\nimport { useRecoilState } from 'recoil'\n\nconst DEFAULT_APPROVE_AMOUNT = BigInt(2 ** 127 - 1).toString()\n\nfunction Approve(props) {\n    const [tokens] = useRecoilState(tokensState)\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [tokenApproveInProgress, setTokenApproveInProgress] = useState(false)\n    const [transactionsStatus] = useRecoilState(transactionsStatusSelector('approve'))\n    const [componentTxs, setComponentTxs] = useState({})\n\n    useEffect(() => {\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setTokenApproveInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    let token = props.token\n    let tokenAmount = props.tokenAmount\n    let activePoolId = props.activePoolId\n    let tokenInRange = props.tokenInRange\n\n    const handleApproveToken = async () => {\n        setTokenApproveInProgress(true)\n        let approveAmount = DEFAULT_APPROVE_AMOUNT\n            ? DEFAULT_APPROVE_AMOUNT\n            : float_to_decimal_int(token, tokenAmount)\n        try {\n            let tx = await approve(token, approveAmount)\n\n            if (!tx) throw Error('Cannot perform transaction')\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n        } catch (e) {\n            addToastMsg('Approve user abort', 'error')\n            setTokenApproveInProgress(false)\n        }\n    }\n\n    if (\n        connectedAddress &&\n        token &&\n        tokenAmount > 0 &&\n        activePoolId > 0 &&\n        tokenInRange &&\n        !isTokenApproved(token, tokenAmount)\n    ) {\n        let token_obj = tokens.get(token)\n        if (token_obj) {\n            return (\n                <LoadingButton\n                    color='inherit'\n                    variant='outlined'\n                    fullWidth={true}\n                    loading={\n                        tokenApproveInProgress ||\n                        tokenAllowanceForAMM(token) === null ||\n                        tokenAllowanceForAMM(token) === undefined\n                            ? true\n                            : false\n                    }\n                    loadingPosition='start'\n                    startIcon={<PendingActionsIcon />}\n                    onClick={handleApproveToken}>\n                    {tokenAllowanceForAMM(token) === null ||\n                    tokenAllowanceForAMM(token) === undefined\n                        ? 'CHECKING ' + token_obj.symbol + ' ALLOWANCE'\n                        : 'APPROVE ' + token_obj.symbol}\n                </LoadingButton>\n            )\n        }\n    }\n\n    return <div></div>\n}\n\nexport default Approve\n","import React from 'react'\n\nimport { Grid, Button, Typography } from '@mui/material'\n\nimport { numFormat } from '../services/amm'\n\nfunction Balance(props) {\n    let token = props.token\n    let showMaxButton = props.showMaxButton\n    let setMaxAmountHandler = props.setMaxAmountHandler\n    let walletAmount = props.amount\n\n    if (walletAmount === undefined || walletAmount === '') return <div></div>\n\n    return (\n        <div>\n            <Grid container>\n                <Typography fontSize={13} sx={{ ml: 2, mt: 0.5 }}>\n                    {/* {displayBalance()} */}\n                    {'Balance: ' + numFormat(walletAmount)}\n                </Typography>\n                {showMaxButton && (\n                    <Button\n                        size='small'\n                        sx={{ ml: -1.5, mt: -0.2 }}\n                        onClick={() => setMaxAmountHandler(token, walletAmount)}>\n                        max\n                    </Button>\n                )}\n            </Grid>\n        </div>\n    )\n}\n\nexport default Balance\n","import { getStarknet } from '@argent/get-starknet'\n\nimport { erc20TokenAddressByNetwork } from './token.service'\n\nexport const isWalletConnected = (): boolean => !!getStarknet()?.isConnected\n\nexport const connectWallet = async () => await getStarknet({ showModal: true }).enable()\n\nexport const walletAddress = async (): Promise<string | undefined> => {\n    try {\n        const [address] = await getStarknet().enable()\n        return address\n    } catch {}\n}\n\nexport const networkId = (): keyof typeof erc20TokenAddressByNetwork => {\n    try {\n        const baseUrl = getStarknet().provider.baseUrl\n        if (baseUrl.includes('alpha-mainnet.starknet.io')) {\n            return 'mainnet-alpha'\n        } else {\n            return 'goerli-alpha'\n        }\n    } catch {\n        return 'goerli-alpha'\n    }\n}\n\nexport const getExplorerUrlBase = (): string => {\n    if (networkId() === 'mainnet-alpha') {\n        return 'https://voyager.online'\n    } else {\n        return 'https://goerli.voyager.online'\n    }\n}\n\nexport const networkUrl = (): string | undefined => {\n    try {\n        return getStarknet().provider.baseUrl\n    } catch {}\n}\n\nexport const waitForTransaction = async (hash: string) =>\n    await getStarknet().provider.waitForTx(hash)\n\nexport const addWalletChangeListener = async (\n    handleEvent: (accounts: string[]) => void\n) => {\n    getStarknet().on('accountsChanged', handleEvent)\n}\n","import ReactGA from 'react-ga'\n\nexport const GAinit = () => {\n    // Google Analytics Set Up\n    const gaTrackingId = 'UA-215866683-1'\n    ReactGA.initialize(gaTrackingId)\n}\n\nexport const GApage = (page) => {\n    ReactGA.pageview(page)\n}\n\nexport const GAtrack = (cat, action, label) => {\n    ReactGA.event({\n        category: cat,\n        action: action,\n        label: label\n    })\n}\n\nexport const GAbutton = (label) => {\n    GAtrack('button', 'click', label)\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { walletAddressState, poolsState } from '../atoms'\n\nimport {\n    updateAllTokensDynamicData,\n    human_readable_hash,\n    addToastMsg\n} from '../services/amm'\nimport {\n    addWalletChangeListener,\n    connectWallet,\n    getExplorerUrlBase,\n    networkId,\n    walletAddress\n} from '../services/wallet.service'\n\nimport { GAbutton } from '../services/ga.js'\n\nimport { Button } from '@mui/material'\nimport CircleIcon from '@mui/icons-material/Circle'\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet'\n\nimport { useRecoilState } from 'recoil'\n\nfunction ConnectWallet(props) {\n    const [walletConnectionStatus, setWalletConnectionStatus] = useState(0)\n    const [voyagerBaseUrl, setVoyagerBaseUrl] = useState('')\n    const [networkName, setNetworkName] = useState('')\n    const [changeListenerRegistered, setChangeListenerRegistered] = useState(false)\n    const [address, setAddress] = useRecoilState(walletAddressState)\n    const [pools] = useRecoilState(poolsState)\n\n    const handleClick = async () => {\n        GAbutton('connect_wallet')\n\n        setWalletConnectionStatus(1)\n        try {\n            await connectWallet()\n        } catch {\n            // this means no argent wallet is available\n            addToastMsg('Wallet not found', 'error')\n            setWalletConnectionStatus(0)\n            return\n        }\n        setAddress(await walletAddress())\n        setWalletConnectionStatus(2)\n\n        addToastMsg('Wallet connected', 'success')\n    }\n\n    useEffect(() => {\n        if (props.secondary) return\n\n        const handleWalletChange = async (accounts) => {\n            if (props.secondary) return\n            console.log('handleWalletChange: ', accounts)\n            setAddress(await walletAddress())\n            setVoyagerBaseUrl(getExplorerUrlBase())\n            setNetworkName(networkId())\n\n            updateAllTokensDynamicData()\n            addToastMsg('Wallet network/account change', 'success')\n        }\n\n        console.log('address has changed, ', address)\n        if (address) {\n            setWalletConnectionStatus(2)\n            updateAllTokensDynamicData()\n            setVoyagerBaseUrl(getExplorerUrlBase())\n            setNetworkName(networkId())\n            if (!props.secondary && !changeListenerRegistered) {\n                addWalletChangeListener(handleWalletChange)\n                setChangeListenerRegistered(true) // do this only once, otherwise for every change a new listener will be registered\n            }\n        }\n    }, [address, props.secondary, changeListenerRegistered, setAddress])\n\n    useEffect(() => {\n        if (props.secondary) return\n        // Yaron: why do we need this? it doesn't do anything...\n        // console.log('pools have changed', pools)\n    }, [pools, props.secondary])\n\n    // Handle wallet connect button inside the screen (aka secondary)\n    if (props.secondary) {\n        // If already connected no need to display button\n        if (address !== '' || walletConnectionStatus === 2) {\n            return <div></div>\n        }\n\n        // Secondary connect button - short-circuit all hooks\n        if (walletConnectionStatus === 1) {\n            return (\n                <div>\n                    <Button color='inherit' fullWidth={true} variant='outlined' disabled>\n                        Connecting...\n                    </Button>\n                </div>\n            )\n        }\n\n        // Display button\n        return (\n            <div>\n                <Button\n                    className='connect-wallet'\n                    color='inherit'\n                    fullWidth={true}\n                    variant='contained'\n                    onClick={handleClick}>\n                    <AccountBalanceWalletIcon fontSize='medium' sx={{ mr: 1 }} />\n                    CONNECT WALLET\n                </Button>\n            </div>\n        )\n    }\n\n    const handleConnectedClick = async () => {\n        console.log('opening wallet')\n        window.open(voyagerBaseUrl + '/contract/' + address, '_blank')\n    }\n\n    if (walletConnectionStatus === 2) {\n        console.log('Wallet is connected!', address)\n        return (\n            <div>\n                <Button color='inherit' variant='outlined' onClick={handleConnectedClick}>\n                    <CircleIcon\n                        sx={{ mr: 1 }}\n                        style={{ fill: 'lightgreen', fontSize: 10 }}\n                    />{' '}\n                    {networkName} {human_readable_hash(address)}{' '}\n                </Button>\n            </div>\n        )\n    } else if (walletConnectionStatus === 1) {\n        console.log('Wallet is being connected!', address)\n        return (\n            <div>\n                <Button color='inherit' variant='outlined' disabled>\n                    Connecting...\n                </Button>\n            </div>\n        )\n    } else {\n        return (\n            <div>\n                <Button color='inherit' variant='outlined' onClick={handleClick}>\n                    Connect Wallet\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default ConnectWallet\n","import React, { useState, useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { getRecoil } from 'recoil-nexus'\nimport { BigNumber } from 'bignumber.js'\n\nimport {\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    TextField,\n    Grid,\n    Box,\n    Card,\n    CardActionArea,\n    Typography,\n    Button,\n    IconButton\n} from '@mui/material'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport SwapHorizIcon from '@mui/icons-material/SwapHoriz'\nimport SwapVertSharpIcon from '@mui/icons-material/SwapVertSharp'\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet'\n\nimport {\n    tokensState,\n    swapSlippage,\n    walletAddressState,\n    transactionsStatusSelector,\n    tokensUserDataState,\n    poolsState\n} from '../atoms'\n\nimport {\n    getWalletTokenAmount,\n    updateTokenDynamicData,\n    updatePoolDynamicData,\n    swap,\n    numFormat,\n    addToastMsg,\n    isTokenApproved,\n    getPoolPriceForTokenA,\n    getPoolIdFromTokens,\n    calcOtherTokenAmount,\n    float_to_decimal_int,\n    isSufficientBalanceInWallet,\n    isInsufficientBalanceInPool,\n    checkAndUpdateComponentTransactions,\n    WALLET_SUFFICIENT_BALANCE\n} from '../services/amm'\n\nimport { useInterval } from 'usehooks-ts'\n\nimport Approve from './Approve.js'\nimport Balance from './Balance.js'\nimport BoxHeader from './BoxHeader.js'\nimport ConnectWallet from './ConnectWallet.js'\n\nimport { GApage, GAbutton } from '../services/ga.js'\n\nexport const DEFAULT_APPROVE_AMOUNT = Number.MAX_SAFE_INTEGER // Need to change it to: (2**127 - 1) -- given that 'toBN' supports...\n\nfunction Swap() {\n    const [activePoolId, setActivePoolId] = useState(0)\n    const [token1, setToken1] = useState('')\n    const [token1Amount, setToken1Amount] = useState('')\n    const [token2, setToken2] = useState('')\n    const [token2Amount, setToken2Amount] = useState('')\n    const [leadingToken, setLeadingToken] = useState(0) // 0 is no token, 1/2 is the last updated token\n    const [swapInProgress, setSwapInProgress] = useState(false)\n    const [tokens] = useRecoilState(tokensState)\n    const [tuds] = useRecoilState(tokensUserDataState)\n    const [pools] = useRecoilState(poolsState)\n\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [transactionsStatus] = useRecoilState(transactionsStatusSelector('swap'))\n    const [componentTxs, setComponentTxs] = useState({})\n\n    useEffect(() => {\n        GApage('swap')\n    }, [])\n\n    useEffect(() => {\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setSwapInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    useEffect(() => {}, [tuds, pools])\n\n    const updateTokensIntervalCallback = async () => {\n        // Allow periodic update only if both tokens are selected\n        if (activePoolId > 0) {\n            updatePoolDynamicData(activePoolId)\n        } else {\n            if (token1) updateTokenDynamicData(token1)\n            if (token2) updateTokenDynamicData(token2)\n        }\n    }\n\n    // Timer to update active pool and tokens user data (allowance, amount)\n    useInterval(updateTokensIntervalCallback, 15000)\n\n    const handleToken1Select = (event) => {\n        let token_address = event.target.value\n        setToken1(token_address)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('swap-token1')\n    }\n\n    const handleToken2Select = (event) => {\n        let token_address = event.target.value\n        setToken2(token_address)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('swap-token2')\n    }\n\n    const handleTokenAmountChange = (token, amount) => {\n        // fixme: consider limit decimals input according to token decimals\n        const regex = /^(([0-9]+[.]?[0-9]*)|([.][0-9]+))$/\n\n        if (token === token1 && (amount === '' || regex.test(amount))) {\n            setToken1Amount(amount)\n            setLeadingToken(1)\n        }\n        if (token === token2 && (amount === '' || regex.test(amount))) {\n            setToken2Amount(amount)\n            setLeadingToken(2)\n        }\n    }\n\n    useEffect(() => {\n        if (token1 && token2) {\n            let poolId = getPoolIdFromTokens(token1, token2)\n            setActivePoolId(poolId)\n\n            // follow the leader\n            if (leadingToken <= 1) {\n                // cannot be 0, but just for safety\n                if (poolId > 0) {\n                    // calc token2 amount\n                    let amount = calcOtherTokenAmount(token1, token2, token1Amount, 1)\n                    console.log('calcOtherTokenAmount: (token1 leading) ', amount)\n                    if (amount !== undefined && amount !== token2Amount) {\n                        setToken2Amount(amount)\n                    }\n                } else {\n                    setToken2Amount(0)\n                }\n            } else {\n                if (poolId > 0) {\n                    // calc token2 amount\n                    let amount = calcOtherTokenAmount(token2, token1, token2Amount, 2)\n                    console.log('calcOtherTokenAmount: (token2 leading) ', amount)\n                    if (amount !== undefined && amount < 0) amount = 0\n                    else if (amount !== undefined && amount !== token1Amount) {\n                        setToken1Amount(amount)\n                    }\n                } else {\n                    setToken1Amount(0)\n                }\n            }\n        } else {\n            // follow the leader\n            if (leadingToken <= 1) {\n                // cannot be 0, but just for safety\n                setToken2Amount('')\n            } else {\n                setToken1Amount('')\n            }\n        }\n    }, [token1, token2, token1Amount, token2Amount, leadingToken])\n\n    const menuItems = (otherSelectedToken) => {\n        let r = []\n        tokens.forEach((value, address) => {\n            if (otherSelectedToken !== address) {\n                r.push(\n                    <MenuItem key={address} value={address}>\n                        <Grid container direction='row'>\n                            <Grid sx={{ mr: 1, mb: -1 }}>\n                                <img src={value.icon} alt='' width='24' height='24' />\n                            </Grid>\n                            <Grid>\n                                <Typography>{value.symbol || value.address}</Typography>\n                            </Grid>\n                        </Grid>\n                    </MenuItem>\n                )\n            }\n        })\n        return r\n    }\n\n    const calcToken2MinAmount = () => {\n        let slippage = parseFloat(getRecoil(swapSlippage)) / 100\n        return BigNumber(token2Amount).times(BigNumber(1).minus(BigNumber(slippage)))\n    }\n\n    const handleSwap = async () => {\n        setSwapInProgress(true)\n        let minAmountOut = calcToken2MinAmount()\n        try {\n            let tx = await swap(\n                activePoolId,\n                token1,\n                float_to_decimal_int(token1, token1Amount),\n                float_to_decimal_int(token2, minAmountOut)\n            )\n\n            if (!tx) throw Error('Cannot perform transaction')\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n        } catch (e) {\n            addToastMsg('Swap Request: User Aborted', 'error')\n            setSwapInProgress(false)\n        }\n    }\n\n    const swapButton = () => {\n        GAbutton('swap')\n\n        let token1SufficientBalance = isSufficientBalanceInWallet(token1, token1Amount)\n        let token2InsufficientPoolBalance = isInsufficientBalanceInPool(\n            activePoolId,\n            token2,\n            token2Amount\n        )\n\n        if (\n            token2 &&\n            token1Amount > 0 &&\n            activePoolId !== 0 &&\n            token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.TRUE &&\n            !token2InsufficientPoolBalance\n        ) {\n            // Display SWAP button\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={\n                        (connectedAddress && isTokenApproved(token1, token1Amount)) ||\n                        swapInProgress\n                            ? false\n                            : true\n                    }\n                    loading={swapInProgress}\n                    loadingPosition='start'\n                    startIcon={<SwapHorizIcon />}\n                    onClick={handleSwap}>\n                    {swapInProgress ? 'SWAPPING' : 'SWAP'}\n                </LoadingButton>\n            )\n        }\n\n        if (\n            connectedAddress &&\n            token1Amount > 0 &&\n            token1SufficientBalance !== WALLET_SUFFICIENT_BALANCE.TRUE &&\n            !token2InsufficientPoolBalance\n        ) {\n            // Amount either exceeds wallet balance, or wallet balance is unknown yet\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}\n                    loading={\n                        token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.UNKNOWN\n                    }\n                    loadingPosition='start'\n                    startIcon={<AccountBalanceWalletIcon />}>\n                    {token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.FALSE\n                        ? 'AMOUNT EXCEEDS WALLET BALANCE'\n                        : 'CHECKING WALLET BALANCE'}\n                </LoadingButton>\n            )\n        }\n\n        if (token1 && token2 && activePoolId === 0) {\n            // No pool for token pair selected\n            return (\n                <Button\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}>\n                    NOT A VALID Pool\n                </Button>\n            )\n        }\n\n        if (\n            token1 &&\n            token2 &&\n            activePoolId &&\n            token2Amount &&\n            token2InsufficientPoolBalance\n        ) {\n            return (\n                <Button\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}>\n                    INSUFFICIENT LIQUIDITY IN POOL\n                </Button>\n            )\n        }\n\n        if (connectedAddress) {\n            // Wallet is connected\n            let instruction = ''\n            if (!token1 && !token2) instruction = 'SELECT TOKENS'\n            if ((!token1 && token2) || (token1 && !token2)) instruction = 'SELECT TOKEN'\n            if (token1 && token2 && (!token1Amount || !token2Amount))\n                instruction = 'ENTER AMOUNT'\n\n            if (instruction !== '')\n                return (\n                    <Button\n                        color='secondary'\n                        variant='contained'\n                        fullWidth={true}\n                        disabled={true}>\n                        {instruction}\n                    </Button>\n                )\n        }\n\n        return <div></div>\n    }\n\n    const switchTokensAndAmounts = () => {\n        GAbutton('swap-switchtokens')\n\n        let tmpToken = token1\n        let tmpAmount = token1Amount\n        setToken1(token2)\n        setToken2(tmpToken)\n        setToken1Amount(token2Amount)\n        setToken2Amount(tmpAmount)\n        setLeadingToken(leadingToken === 1 ? 2 : 1)\n    }\n\n    const isToken1InputDisabled = () => {\n        return token1 === '' ? true : false\n    }\n    const isToken2InputDisabled = () => {\n        return token2 === '' ? true : false\n    }\n\n    const [priceDirection, setPriceDirection] = useState(0)\n    const [slippage] = useRecoilState(swapSlippage)\n\n    const priceAndSlippage = () => {\n        if (\n            token1 &&\n            token2 &&\n            token1Amount &&\n            !BigNumber(token1Amount).isZero() &&\n            token2Amount &&\n            !BigNumber(token2Amount).isZero()\n        ) {\n            // currentPrice = How much token2 for 1 token1\n            let currentPrice = getPoolPriceForTokenA(activePoolId, token1, token2)\n            console.log('CurrentPrice: ', currentPrice)\n            let minAmount = calcToken2MinAmount()\n            let token1Symbol = tokens.get(token1).symbol\n            let token2Symbol = tokens.get(token2).symbol\n            let floatSlippage = parseFloat(slippage)\n            // transactionPrice = How much token2 for 1 token1\n            let transactionPrice = BigNumber(token2Amount).div(BigNumber(token1Amount))\n            let transactionPriceInv = BigNumber(token1Amount).div(BigNumber(token2Amount))\n\n            let priceImpact = BigNumber(1).minus(\n                BigNumber(transactionPrice).div(BigNumber(currentPrice))\n            )\n\n            let backgroundColor = priceImpact.gt(0.05)\n                ? 'tomato'\n                : priceImpact.gt(0.03)\n                ? 'orange'\n                : 'inherit'\n\n            let displayPrice1 = (\n                <>\n                    1 {token1Symbol} = {numFormat(transactionPrice)} {token2Symbol}\n                </>\n            )\n            let displayPrice2 = (\n                <>\n                    1 {token2Symbol} = {numFormat(transactionPriceInv)} {token1Symbol}\n                </>\n            )\n            //console.log('Price: ', displayPrice1, displayPrice2, priceDirection, transactionPrice.toString(10))\n\n            return (\n                <Grid>\n                    <Card sx={{ mb: 0.5, mt: 2 }}>\n                        <CardActionArea\n                            onClick={() => setPriceDirection(!priceDirection)}>\n                            <Typography\n                                fontSize={13}\n                                fontWeight='medium'\n                                sx={{ ml: 1, mr: 1 }}>\n                                {priceDirection ? displayPrice2 : displayPrice1}\n                            </Typography>\n                        </CardActionArea>\n                    </Card>\n                    <Card style={{ backgroundColor: backgroundColor }} sx={{ mb: 2 }}>\n                        <Typography\n                            fontSize={13}\n                            fontWeight='medium'\n                            sx={{ ml: 1, mr: 1 }}>\n                            Minimum amount received (slippage={floatSlippage.toFixed(2)}\n                            %): {numFormat(minAmount)}\n                        </Typography>\n                        <Typography\n                            fontSize={13}\n                            fontWeight='medium'\n                            sx={{ ml: 1, mr: 1 }}>\n                            Price impact: {numFormat(priceImpact, true)}%\n                        </Typography>\n                    </Card>\n                </Grid>\n            )\n        }\n        return <div></div>\n    }\n\n    return (\n        <Box sx={{ p: 2, border: '0px solid', mt: 1, mb: 4, boxShadow: 2 }}>\n            <div>\n                <Grid container sx={{ mb: 2 }}>\n                    <BoxHeader name='Swap' />\n                </Grid>\n\n                <Card sx={{ p: 2, boxShadow: 2, mb: -4 }}>\n                    <Grid container spacing={2} sx={{}}>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel id='token1-label'>Token 1:</InputLabel>\n                                <Select\n                                    labelId='token1-label'\n                                    id='token1-select'\n                                    value={token1}\n                                    label='Token 1'\n                                    onChange={handleToken1Select}>\n                                    {menuItems(token2)}\n                                </Select>\n                            </FormControl>\n                            <Balance\n                                token={token1}\n                                amount={getWalletTokenAmount(token1)}\n                                showMaxButton={true}\n                                setMaxAmountHandler={handleTokenAmountChange}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField\n                                    helperText='Amount to swap'\n                                    id='token1-amount'\n                                    inputProps={{\n                                        variant: 'outlined',\n                                        placeholder: '0.00',\n                                        type: 'string',\n                                        autoComplete: 'off',\n                                        'aria-labelledby': 'input-amount'\n                                    }}\n                                    value={token1Amount ? token1Amount : ''}\n                                    onChange={(e) =>\n                                        handleTokenAmountChange(token1, e.target.value)\n                                    }\n                                    error={\n                                        isSufficientBalanceInWallet(\n                                            token1,\n                                            token1Amount\n                                        ) === WALLET_SUFFICIENT_BALANCE.FALSE\n                                            ? true\n                                            : false\n                                    }\n                                    disabled={isToken1InputDisabled()}\n                                />\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </Card>\n                <Grid\n                    container\n                    direction='row'\n                    justifyContent='center'\n                    alignItems='center'>\n                    <IconButton\n                        size='large'\n                        disabled={!token1 && !token2}\n                        onClick={switchTokensAndAmounts}>\n                        <SwapVertSharpIcon style={{ fontSize: 40 }} />\n                    </IconButton>\n                </Grid>\n\n                <Card sx={{ p: 2, mt: -3, boxShadow: 2 }}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <InputLabel id='token2-label'>Token 2:</InputLabel>\n                                <Select\n                                    labelId='token2-label'\n                                    id='token2-select'\n                                    value={token2}\n                                    label='Token 2'\n                                    onChange={handleToken2Select}>\n                                    {menuItems(token1)}\n                                </Select>\n                            </FormControl>\n                            <Balance\n                                token={token2}\n                                amount={getWalletTokenAmount(token2)}\n                                showMaxButton={false}\n                            />\n                        </Grid>\n                        <Grid item xs={6}>\n                            <FormControl fullWidth>\n                                <TextField\n                                    helperText='Estimated amount received'\n                                    id='token2-amount'\n                                    inputProps={{\n                                        variant: 'outlined',\n                                        placeholder: '0.00',\n                                        type: 'string',\n                                        autoComplete: 'off',\n                                        'aria-labelledby': 'input-amount'\n                                    }}\n                                    value={token2Amount ? token2Amount : ''}\n                                    onChange={(e) =>\n                                        handleTokenAmountChange(token2, e.target.value)\n                                    }\n                                    disabled={isToken2InputDisabled()}\n                                />\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n                </Card>\n\n                {priceAndSlippage()}\n\n                <Card sx={{ minWidth: 275, mb: 2, mt: 3, boxShadow: 2 }}>\n                    <ConnectWallet secondary='true' />\n                    <Approve\n                        token={token1}\n                        tokenAmount={token1Amount}\n                        activePoolId={activePoolId}\n                        tokenInRange={\n                            isSufficientBalanceInWallet(token1, token1Amount) ===\n                            WALLET_SUFFICIENT_BALANCE.TRUE\n                        }\n                    />\n                    {swapButton()}\n                </Card>\n            </div>\n        </Box>\n    )\n}\n\nexport default Swap\n","import React, { useState, useEffect } from 'react'\nimport { getRecoil } from 'recoil-nexus'\nimport { useRecoilState } from 'recoil'\nimport { BigNumber } from 'bignumber.js'\nimport BoxHeader from './BoxHeader.js'\nimport {\n    addToastMsg,\n    withdraw_liquidity,\n    numFormat,\n    float_to_decimal_int,\n    checkAndUpdateComponentTransactions\n} from '../services/amm'\nimport { withdrawLiquiditySlippage, transactionsStatusSelector } from '../atoms'\n\nimport {\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogContentText,\n    Card,\n    Box,\n    Grid,\n    CardHeader,\n    Button,\n    Typography,\n    Slider,\n    Stack,\n    Paper\n} from '@mui/material'\nimport MuiInput from '@mui/material/Input'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport ExitToAppRoundedIcon from '@mui/icons-material/ExitToAppRounded'\nimport { styled } from '@mui/material/styles'\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(0),\n    textAlign: 'left',\n    color: theme.palette.text.secondary\n}))\n\nconst Input = styled(MuiInput)`\n    width: 42px;\n`\n\nexport default function RemoveLiquidity(props) {\n    const [open, setOpen] = useState(false)\n    const [percent, setPercent] = useState(25)\n    const [token1Amount, setToken1Amount] = useState('') // fixme: what happens if token1amount / pool share changes during op\n    const [token2Amount, setToken2Amount] = useState('')\n    const [removeLiquidityInProgress, setRemoveLiquidityInProgress] = useState(0)\n    const [transactionsStatus] = useRecoilState(\n        transactionsStatusSelector('withdraw_liquidity')\n    )\n    const [componentTxs, setComponentTxs] = useState({})\n\n    useEffect(() => {\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setRemoveLiquidityInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    const marks = [\n        { value: 0, label: '0%' },\n        { value: 25, label: '25%' },\n        { value: 50, label: '50%' },\n        { value: 75, label: '75%' },\n        { value: 100, label: '100%' }\n    ]\n\n    useEffect(() => {\n        // if one of the tokens is '0' then set the other one to zero as well\n        if (BigNumber(token1Amount).isZero()) setToken2Amount('0')\n        if (BigNumber(token2Amount).isZero()) setToken1Amount('0')\n\n        // fixme: not sure why can't I call setAmounts\n        setToken1Amount(\n            numFormat(BigNumber(props.token1Amount).times(percent).shiftedBy(-2))\n        )\n        setToken2Amount(\n            numFormat(BigNumber(props.token2Amount).times(percent).shiftedBy(-2))\n        )\n\n        setRemoveLiquidityInProgress(0) // fixme: we don't know it is safe to send another transaction...\n    }, [\n        open,\n        token1Amount,\n        token2Amount,\n        percent,\n        props.token1Amount,\n        props.token2Amount\n    ])\n\n    const handleClose = () => {\n        setRemoveLiquidityInProgress(0) // fixme: we don't know it is safe to send anouther transaction on re-open\n        setOpen(false)\n    }\n\n    const handleClickOpen = () => {\n        setOpen(true)\n    }\n\n    const setAmounts = (percent) => {\n        setToken1Amount(\n            numFormat(BigNumber(props.token1Amount).times(percent).shiftedBy(-2))\n        )\n        setToken2Amount(\n            numFormat(BigNumber(props.token2Amount).times(percent).shiftedBy(-2))\n        )\n    }\n\n    const updateState = (newPercent) => {\n        setPercent(newPercent)\n        setAmounts(newPercent)\n        console.log(\n            'Remove Liquidity, updateState: ',\n            token1Amount,\n            token2Amount,\n            props.token1Amount,\n            props.token2Amount\n        )\n    }\n\n    const handleSliderChange = (event, newPercent) => {\n        updateState(newPercent)\n    }\n\n    const handleInputChange = (event) => {\n        let newPercent = event.target.value === '' ? '' : Number(event.target.value)\n        updateState(newPercent)\n        console.log('handle input change')\n    }\n\n    const handleBlur = () => {\n        if (percent < 0) {\n            setPercent(0)\n        } else if (percent > 100) {\n            setPercent(100)\n        }\n    }\n\n    const handleWithdraw = async () => {\n        console.log('Withdraw percent: ', percent)\n        let slippage = parseFloat(getRecoil(withdrawLiquiditySlippage)) / 100\n        let sharesToWithdraw = BigNumber(props.balance)\n            .times(BigNumber(percent))\n            .shiftedBy(-2)\n            .toFixed(2, BigNumber.ROUND_DOWN)\n        let minToken1Amount = BigNumber(token1Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage).shiftedBy(-2)))\n            .toString(10, BigNumber.ROUND_DOWN)\n        let minToken2Amount = BigNumber(token2Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage).shiftedBy(-2)))\n            .toString(10, BigNumber.ROUND_DOWN)\n\n        setRemoveLiquidityInProgress(1)\n\n        console.log(\n            'handleWithdraw: ',\n            sharesToWithdraw,\n            minToken1Amount,\n            minToken2Amount\n        )\n        try {\n            let tx = await withdraw_liquidity(\n                props.poolId,\n                sharesToWithdraw,\n                float_to_decimal_int(props.token1, minToken1Amount),\n                float_to_decimal_int(props.token2, minToken2Amount)\n            )\n\n            if (!tx) throw Error('Cannot perform transaction')\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n        } catch (e) {\n            addToastMsg('Remove Liquidity: User Aborted', 'error')\n            setRemoveLiquidityInProgress(0)\n        }\n        handleClose()\n    }\n\n    return (\n        <div>\n            <Button\n                variant='contained'\n                sx={{ textWeight: 'bold' }}\n                onClick={handleClickOpen}>\n                WITHDRAW\n            </Button>\n            <Dialog open={open} onClose={handleClose}>\n                <Box sx={{ p: 2, border: '0px solid', boxShadow: 2 }}>\n                    <Grid container sx={{ mb: 2 }}>\n                        <BoxHeader name='Remove Liquidity' />\n                    </Grid>\n                    <DialogContent>\n                        <Card sx={{ p: 2, border: '0px solid', boxShadow: 2, mb: 2 }}>\n                            <DialogContentText>\n                                Choose amount of liquidity shares to remove\n                            </DialogContentText>\n\n                            <Box sx={{ width: 500, mt: 3, ml: 2 }}>\n                                <Grid container spacing={2} alignItems='center'>\n                                    <Grid item xs sx={{ mt: 2, ml: 2, mr: 2 }}>\n                                        <Slider\n                                            aria-label='Custom marks'\n                                            defaultValue={25}\n                                            valueLabelDisplay='auto'\n                                            marks={marks}\n                                            value={\n                                                typeof percent === 'number' ? percent : 0\n                                            }\n                                            onChange={handleSliderChange}\n                                            aria-labelledby='input-slider'\n                                        />\n                                    </Grid>\n                                    <Grid item sx={{ ml: 2, mr: 4 }}>\n                                        <Input\n                                            value={percent}\n                                            size='small'\n                                            onChange={handleInputChange}\n                                            onBlur={handleBlur}\n                                            inputProps={{\n                                                step: 1,\n                                                min: 0,\n                                                max: 100,\n                                                type: 'number',\n                                                'aria-labelledby': 'input-slider'\n                                            }}\n                                        />\n                                    </Grid>\n                                </Grid>\n                            </Box>\n                        </Card>\n                        <Card sx={{ p: 2, border: '0px solid', boxShadow: 2, mb: 0 }}>\n                            <CardHeader\n                                title='Amount Received'\n                                disableTypography={true}\n                                sx={{ fontSize: 18, mt: 0 }}></CardHeader>\n                            <Grid\n                                item\n                                container\n                                alignItems='center'\n                                spacing={2}\n                                sx={{ width: 400, ml: 2 }}>\n                                <Grid item xs={6}>\n                                    <Stack\n                                        direction='row'\n                                        spacing={0}\n                                        alignItems='center'>\n                                        <Item\n                                            sx={{ boxShadow: 0, mr: 1 }}\n                                            style={{ backgroundColor: 'transparent' }}>\n                                            <img\n                                                src={props.token1Icon}\n                                                alt=''\n                                                width='32'\n                                                height='32'\n                                            />\n                                        </Item>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {props.token1Symbol}:\n                                            </Typography>\n                                        </Item>\n                                    </Stack>\n                                    <Stack\n                                        direction='row'\n                                        spacing={0}\n                                        alignItems='center'>\n                                        <Item\n                                            sx={{ boxShadow: 0, mr: 1 }}\n                                            style={{ backgroundColor: 'transparent' }}>\n                                            <img\n                                                src={props.token2Icon}\n                                                alt=''\n                                                width='32'\n                                                height='32'\n                                            />\n                                        </Item>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {props.token2Symbol}:\n                                            </Typography>\n                                        </Item>\n                                    </Stack>\n                                </Grid>\n                                <Grid item xs={6}>\n                                    <Stack>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {numFormat(token1Amount)}\n                                            </Typography>\n                                        </Item>\n                                        <Item sx={{ boxShadow: 0 }}>\n                                            <Typography sx={{ fontSize: 18 }}>\n                                                {numFormat(token2Amount)}\n                                            </Typography>\n                                        </Item>\n                                    </Stack>\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            variant='contained'\n                            style={{ backgroundColor: 'gray' }}\n                            onClick={handleClose}>\n                            Cancel\n                        </Button>\n                        <LoadingButton\n                            color='primary'\n                            variant='contained'\n                            disabled={\n                                token1Amount === '0' ||\n                                token2Amount === '0' ||\n                                removeLiquidityInProgress\n                                    ? true\n                                    : false\n                            }\n                            loading={removeLiquidityInProgress === 1} // Fixme: need to know when to dismiss this - only after transaction PENDING\n                            loadingPosition='start'\n                            startIcon={<ExitToAppRoundedIcon />}\n                            onClick={handleWithdraw}>\n                            {removeLiquidityInProgress ? 'REMOVING' : 'REMOVE'}\n                        </LoadingButton>\n                    </DialogActions>\n                </Box>\n            </Dialog>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useRecoilState } from 'recoil'\nimport { BigNumber } from 'bignumber.js'\nimport {\n    Card,\n    Grid,\n    CardActions,\n    CardContent,\n    Typography,\n    Stack,\n    Paper,\n    styled\n} from '@mui/material'\n\nimport { tokensState, poolsState } from '../atoms'\nimport { decimal_int_to_float, numFormat } from '../services/amm'\nimport RemoveLiquidity from './RemoveLiquidity'\n\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(0),\n    textAlign: 'left',\n    color: theme.palette.text.secondary\n}))\n\nfunction LiquidityPool(props) {\n    const [tokens] = useRecoilState(tokensState)\n    const [pools] = useRecoilState(poolsState)\n\n    let pool = pools.get(props.poolId)\n    if (!pool || !pool.shares) return <div></div>\n\n    const token1 = () => {\n        let pool = pools.get(props.poolId)\n        let token_address = pool.token1\n        let token = tokens.get(token_address)\n        return token\n    }\n\n    const token1Symbol = () => {\n        let token = token1(props.poolId)\n        return token.symbol\n    }\n\n    const token1Icon = () => {\n        let token = token1(props.poolId)\n        return token.icon\n    }\n\n    const userPoolShare = () => {\n        let pool = pools.get(props.poolId)\n        if (!pool.shares) return '0'\n        return BigNumber(props.balance).div(BigNumber(pool.shares))\n    }\n\n    const userToken1AmountDecimal = () => {\n        let pool = pools.get(props.poolId)\n        let user_share = userPoolShare()\n        return BigNumber(user_share).times(pool.token1Amount)\n    }\n\n    const userToken1Amount = () => {\n        return decimal_int_to_float(pool.token1, userToken1AmountDecimal())\n    }\n\n    const token2 = () => {\n        let pool = pools.get(props.poolId)\n        let token_address = pool.token2\n        let token = tokens.get(token_address)\n        return token\n    }\n\n    const token2Symbol = () => {\n        let token = token2(props.poolId)\n        return token.symbol\n    }\n\n    const token2Icon = () => {\n        let token = token2(props.poolId)\n        return token.icon\n    }\n\n    const userToken2AmountDecimal = () => {\n        let pool = pools.get(props.poolId)\n        let user_share = userPoolShare()\n        return BigNumber(user_share).times(pool.token2Amount)\n    }\n\n    const userToken2Amount = () => {\n        return decimal_int_to_float(pool.token1, userToken2AmountDecimal())\n    }\n\n    return (\n        <Card sx={{ p: 2, border: '0px solid', boxShadow: 2, mb: 5 }}>\n            <Typography sx={{ fontSize: 18, fontWeight: '500' }}>\n                Your Position\n            </Typography>\n            <CardContent>\n                <Grid item container direction='row' alignItems='center'>\n                    <Grid item xs={6}>\n                        <Stack direction='row' spacing={0} alignItems='center'>\n                            <Item\n                                sx={{ boxShadow: 0, mr: 0 }}\n                                style={{ backgroundColor: 'transparent' }}>\n                                <img src={token1Icon()} alt='' width='32' height='32' />\n                            </Item>\n                            <Item\n                                sx={{ boxShadow: 0, ml: -1, mr: 1 }}\n                                style={{ backgroundColor: 'transparent' }}>\n                                <img src={token2Icon()} alt='' width='32' height='32' />\n                            </Item>\n                            <Item sx={{ boxShadow: 0 }}>\n                                <Typography\n                                    sx={{ fontSize: 24, fontWeight: 'normal' }}\n                                    color='text.primary'\n                                    gutterBottom>\n                                    {token1Symbol()} / {token2Symbol()}:\n                                </Typography>\n                            </Item>\n                        </Stack>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'normal' }}\n                            color='text.primary'>\n                            Your Pool Share:\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'normal' }}\n                            color='text.primary'>\n                            Pooled {token1Symbol()}:\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'normal' }}\n                            color='text.primary'>\n                            Pooled {token2Symbol()}:\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6} textAlign='right'>\n                        <Typography\n                            sx={{ fontSize: 24, fontWeight: 'normal' }}\n                            color='text.primary'\n                            gutterBottom>\n                            {props.balance}\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'bold' }}\n                            color='text.primary'>\n                            {numFormat(userPoolShare(), true)}%\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'bold' }}\n                            color='text.primary'>\n                            {numFormat(userToken1Amount())}\n                        </Typography>\n                        <Typography\n                            sx={{ fontSize: 16, fontWeight: 'bold' }}\n                            color='text.primary'>\n                            {numFormat(userToken2Amount())}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <CardActions>\n                <Grid item container justifyContent='center'>\n                    <RemoveLiquidity\n                        poolId={props.poolId}\n                        balance={props.balance}\n                        token1Symbol={token1Symbol()}\n                        token2Symbol={token2Symbol()}\n                        token1Icon={token1Icon()}\n                        token2Icon={token2Icon()}\n                        token1={token1().address}\n                        token2={token2().address}\n                        token1Amount={userToken1Amount()}\n                        token2Amount={userToken2Amount()}\n                    />\n                </Grid>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default LiquidityPool\n","import React, { useState, useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { BigNumber } from 'bignumber.js'\n\nimport LiquidityPool from './LiquidityPool'\nimport { poolsState, walletAddressState } from '../atoms'\nimport { getLPBalance, updatePoolDynamicData } from '../services/amm'\n\nfunction Positions() {\n    const [pools] = useRecoilState(poolsState)\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [userPools, setUserPools] = useState(() => new Map())\n\n    useEffect(() => {\n        async function fetchBalance(poolId) {\n            const balance = await getLPBalance(poolId, connectedAddress)\n            if (balance) {\n                setUserPools((prev) => {\n                    let m = new Map(prev)\n                    m.set(poolId, balance)\n                    return m\n                })\n            }\n        }\n        if (connectedAddress) {\n            pools.forEach((pool) => {\n                fetchBalance(pool.id)\n            })\n        }\n    }, [connectedAddress, pools])\n\n    const allPools = () => {\n        let r = []\n        userPools.forEach((balance, poolId) => {\n            if (!BigNumber(balance).isZero()) {\n                r.push(<LiquidityPool key={poolId} poolId={poolId} balance={balance} />)\n                updatePoolDynamicData(poolId)\n            }\n        })\n        return r\n    }\n\n    return <div>{allPools()}</div>\n}\n\nexport default Positions\n","import React, { useState, useEffect } from 'react'\nimport { useRecoilState } from 'recoil'\nimport { getRecoil } from 'recoil-nexus'\nimport { BigNumber } from 'bignumber.js'\n\nimport {\n    tokensState,\n    poolsState,\n    tokensUserDataState,\n    walletAddressState,\n    addLiquiditySlippage,\n    transactionsStatusSelector\n} from '../atoms'\n\nimport {\n    add_liquidity,\n    updateTokenDynamicData,\n    updatePoolDynamicData,\n    getPoolIdFromTokens,\n    decimal_int_to_float,\n    float_to_decimal_int,\n    addToastMsg,\n    getPoolPriceForTokenA,\n    numFormat,\n    isTokenApproved,\n    calcOtherTokenRequiredAmountForLiquidity,\n    checkAndUpdateComponentTransactions,\n    isSufficientBalanceInWallet,\n    getWalletTokenAmount,\n    WALLET_SUFFICIENT_BALANCE\n} from '../services/amm'\n\nimport {\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    TextField,\n    Grid,\n    Button,\n    Box,\n    Card,\n    CardContent,\n    Typography\n} from '@mui/material'\nimport LoadingButton from '@mui/lab/LoadingButton'\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn'\nimport AccountBalanceWalletIcon from '@mui/icons-material/AccountBalanceWallet'\n\nimport { useInterval } from 'usehooks-ts'\n\nimport { GApage, GAbutton } from '../services/ga.js'\n\nimport BoxHeader from './BoxHeader.js'\nimport Positions from './Positions.js'\nimport ConnectWallet from './ConnectWallet.js'\nimport Approve from './Approve.js'\nimport Balance from './Balance.js'\n\nfunction Provide() {\n    const [tokens] = useRecoilState(tokensState)\n    const [pools] = useRecoilState(poolsState)\n    const [token1, setToken1] = useState('')\n    const [token1Amount, setToken1Amount] = useState('')\n    const [token2, setToken2] = useState('')\n    const [token2Amount, setToken2Amount] = useState('')\n    const [activePoolId, setActivePoolId] = useState(0)\n    const [connectedAddress] = useRecoilState(walletAddressState)\n    const [addLiquidityInProgress, setAddLiquidityInProgress] = useState(false)\n    const [leadingToken, setLeadingToken] = useState(0) // 0 is no token, 1/2 is the last updated token\n    const [transactionsStatus] = useRecoilState(\n        transactionsStatusSelector('add_liquidity')\n    )\n    const [componentTxs, setComponentTxs] = useState({})\n    const [tuds] = useRecoilState(tokensUserDataState)\n\n    useEffect(() => {}, [tuds, pools])\n\n    useEffect(() => {\n        GApage('pools')\n    }, [])\n\n    useEffect(() => {\n        checkAndUpdateComponentTransactions(\n            transactionsStatus,\n            componentTxs,\n            setAddLiquidityInProgress\n        )\n    }, [transactionsStatus, componentTxs])\n\n    useEffect(() => {\n        if (token1 && token2) {\n            let poolId = getPoolIdFromTokens(token1, token2)\n            setActivePoolId(poolId)\n\n            // follow the leader\n            if (leadingToken <= 1) {\n                // cannot be 0, but just for safety\n                if (poolId > 0) {\n                    let amount = calcOtherTokenRequiredAmountForLiquidity(\n                        token1,\n                        token2,\n                        token1Amount\n                    )\n                    //console.log('Provide Liquidity amount: ', amount)\n                    if (amount !== undefined) setToken2Amount(amount) // can set amount with numFormat for nicer display: numFormat(amount)\n                } else {\n                    setToken2Amount(0)\n                }\n            } else {\n                if (poolId > 0) {\n                    let amount = calcOtherTokenRequiredAmountForLiquidity(\n                        token2,\n                        token1,\n                        token2Amount\n                    )\n                    if (amount !== undefined) setToken1Amount(amount) // can set amount with numFormat for nicer display\n                } else {\n                    setToken1Amount(0)\n                }\n            }\n        }\n    }, [token1, token2, token1Amount, token2Amount, leadingToken])\n\n    const updateTokensIntervalCallback = async () => {\n        // Allow periodic update only if both tokens are selected\n        if (activePoolId > 0) {\n            updatePoolDynamicData(activePoolId)\n        } else {\n            if (token1) updateTokenDynamicData(token1)\n            if (token2) updateTokenDynamicData(token2)\n        }\n    }\n\n    // timer to update token1 user data (allowance, amount)\n    // and selected pool data\n    useInterval(updateTokensIntervalCallback, 15000)\n\n    const handleToken1Select = (event) => {\n        let token_address = event.target.value\n        setToken1(token_address)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('pool-token1')\n    }\n\n    const handleToken2Select = (event) => {\n        let token_address = event.target.value\n        setToken2(token_address)\n        updateTokenDynamicData(token_address)\n\n        GAbutton('pool-token2')\n    }\n\n    // Fixme: a perfect dup of the function in swap - consider extracting to util service module\n    const handleTokenAmountChange = (token, amount) => {\n        // fixme: consider limit decimals input according to token decimals\n        const regex = /^(([0-9]+[.]?[0-9]*)|([.][0-9]+))$/\n\n        if (token === token1 && (amount === '' || regex.test(amount))) {\n            setToken1Amount(amount)\n            setLeadingToken(1)\n        }\n        if (token === token2 && (amount === '' || regex.test(amount))) {\n            setToken2Amount(amount)\n            setLeadingToken(2)\n        }\n    }\n\n    const handleAddLiquidity = async () => {\n        setAddLiquidityInProgress(true)\n        let slippage = parseFloat(getRecoil(addLiquiditySlippage)) / 100\n        let minAmount1Out = BigNumber(token1Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage)))\n            .toString(10)\n        let minAmount2Out = BigNumber(token2Amount)\n            .times(BigNumber(1).minus(BigNumber(slippage)))\n            .toString(10)\n        console.log('Add Liquidity slippage: ', slippage)\n        console.log(\n            'Add Liquidity minAmountOut: ',\n            minAmount1Out,\n            float_to_decimal_int(token1, minAmount1Out)\n        )\n\n        try {\n            let tx = await add_liquidity(\n                token1,\n                float_to_decimal_int(token1, token1Amount),\n                float_to_decimal_int(token1, minAmount1Out),\n                token2,\n                float_to_decimal_int(token2, token2Amount),\n                float_to_decimal_int(token2, minAmount2Out)\n            )\n\n            if (!tx) throw Error('Cannot perform transaction')\n\n            setComponentTxs((prevState) => ({\n                ...prevState,\n                [tx.transaction_hash]: 'new'\n            }))\n        } catch (e) {\n            addToastMsg('User abort', 'error')\n            setAddLiquidityInProgress(false)\n        }\n    }\n\n    const addLiquidityButton = () => {\n        GAbutton('add-liquidity')\n\n        let token1SufficientBalance = isSufficientBalanceInWallet(token1, token1Amount)\n        let token2SufficientBalance = isSufficientBalanceInWallet(token2, token2Amount)\n\n        if (\n            token1 &&\n            token2 &&\n            token1Amount > 0 &&\n            token2Amount > 0 &&\n            token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.TRUE &&\n            token2SufficientBalance === WALLET_SUFFICIENT_BALANCE.TRUE &&\n            activePoolId !== 0\n        ) {\n            // PoolId is valid - display ADD LIQUIDITY button\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={\n                        (connectedAddress &&\n                            isTokenApproved(token1, token1Amount) &&\n                            isTokenApproved(token2, token2Amount)) ||\n                        addLiquidityInProgress\n                            ? false\n                            : true\n                    }\n                    loading={addLiquidityInProgress}\n                    loadingPosition='start'\n                    startIcon={<MonetizationOnIcon />}\n                    onClick={handleAddLiquidity}>\n                    {addLiquidityInProgress ? 'ADDING LIQUIDITY' : 'ADD LIQUIDITY'}\n                </LoadingButton>\n            )\n        }\n\n        if (\n            connectedAddress &&\n            token1 &&\n            token2 &&\n            token1Amount > 0 &&\n            token2Amount > 0 &&\n            (token1SufficientBalance !== WALLET_SUFFICIENT_BALANCE.TRUE ||\n                token2SufficientBalance !== WALLET_SUFFICIENT_BALANCE.TRUE)\n        ) {\n            // Amount exceed wallet balance\n            return (\n                <LoadingButton\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}\n                    loading={\n                        token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.UNKNOWN ||\n                        token2SufficientBalance === WALLET_SUFFICIENT_BALANCE.UNKNOWN\n                    }\n                    loadingPosition='start'\n                    startIcon={<AccountBalanceWalletIcon />}>\n                    {token1SufficientBalance === WALLET_SUFFICIENT_BALANCE.FALSE ||\n                    token2SufficientBalance === WALLET_SUFFICIENT_BALANCE.FALSE\n                        ? 'AMOUNT EXCEEDS WALLET BALANCE'\n                        : 'CHECKING WALLET BALANCE'}\n                </LoadingButton>\n            )\n        }\n\n        if (token1 && token2 && activePoolId === 0) {\n            // No pool for token pair selected\n            return (\n                <Button\n                    color='primary'\n                    variant='contained'\n                    fullWidth={true}\n                    disabled={true}>\n                    NOT A VALID Pool\n                </Button>\n            )\n        }\n\n        if (connectedAddress) {\n            // Wallet is connected\n            let instruction = ''\n            if (!token1 && !token2) instruction = 'SELECT TOKENS'\n            if ((!token1 && token2) || (token1 && !token2)) instruction = 'SELECT TOKEN'\n            if (token1 && token2 && (!token1Amount || !token2Amount))\n                instruction = 'ENTER AMOUNT'\n\n            if (instruction !== '')\n                return (\n                    <Button\n                        color='secondary'\n                        variant='contained'\n                        fullWidth={true}\n                        disabled={true}>\n                        {instruction}\n                    </Button>\n                )\n        }\n\n        return <div></div>\n    }\n\n    const priceAndShare = () => {\n        let pool = pools.get(activePoolId)\n\n        if (!token1Amount || !token2Amount || !activePoolId || !pool) return <div></div>\n\n        let symbol1 = tokens.get(token1).symbol\n        let symbol2 = tokens.get(token2).symbol\n        console.log(\n            '-----POOL SHARE: ',\n            token1Amount,\n            token2Amount,\n            decimal_int_to_float(pool.token1, pool.token1Amount) +\n                BigNumber(token1Amount),\n            decimal_int_to_float(pool.token2, pool.token2Amount)\n        )\n\n        let priceForToken1 = getPoolPriceForTokenA(activePoolId, token2, token1)\n        let priceForToken2 = getPoolPriceForTokenA(activePoolId, token1, token2)\n\n        // Normalize reserves amounts and get expected share in the pool\n        let pool_share =\n            pool.token1 === token1\n                ? BigNumber(token1Amount).div(\n                      BigNumber(token1Amount).plus(\n                          BigNumber(decimal_int_to_float(pool.token1, pool.token1Amount))\n                      )\n                  )\n                : BigNumber(token1Amount).div(\n                      BigNumber(token1Amount).plus(\n                          BigNumber(decimal_int_to_float(pool.token2, pool.token2Amount))\n                      )\n                  )\n\n        return (\n            <>\n                <Grid>\n                    <Card sx={{ mb: 2, mt: 2, boxShadow: 2 }}>\n                        <CardContent>\n                            <Typography\n                                sx={{ fontSize: 16, fontWeight: '500', mb: 0 }}\n                                gutterBottom>\n                                Pool Prices and Share\n                            </Typography>\n                        </CardContent>\n\n                        <Card sx={{ mb: 0, mt: 0 }}>\n                            <Grid item container alignItems='center' spacing={2}>\n                                <Grid item xs={4}>\n                                    <Typography\n                                        sx={{\n                                            textAlign: 'center',\n                                            lineHeight: 2,\n                                            mt: 1,\n                                            fontWeight: 'bold'\n                                        }}>\n                                        {numFormat(priceForToken1)}\n                                    </Typography>\n                                    <Typography\n                                        sx={{ textAlign: 'center', fontSize: 12, mb: 1 }}>\n                                        {symbol1} for {symbol2}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <Typography\n                                        sx={{\n                                            textAlign: 'center',\n                                            lineHeight: 2,\n                                            mt: 1,\n                                            fontWeight: 'bold'\n                                        }}>\n                                        {numFormat(priceForToken2)}\n                                    </Typography>\n                                    <Typography\n                                        sx={{ textAlign: 'center', fontSize: 12, mb: 1 }}>\n                                        {symbol2} for {symbol1}\n                                    </Typography>\n                                </Grid>\n                                <Grid item xs={4}>\n                                    <Typography\n                                        sx={{\n                                            textAlign: 'center',\n                                            lineHeight: 2,\n                                            mt: 1,\n                                            fontWeight: 'bold'\n                                        }}>\n                                        {numFormat(pool_share, true)}%\n                                    </Typography>\n                                    <Typography\n                                        sx={{ textAlign: 'center', fontSize: 12, mb: 1 }}>\n                                        Share of Pool\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    </Card>\n                </Grid>\n            </>\n        )\n    }\n\n    const menuItems = (otherSelectedToken) => {\n        let r = []\n        tokens.forEach((value, address) => {\n            if (otherSelectedToken !== address) {\n                r.push(\n                    <MenuItem key={address} value={address}>\n                        <Grid container direction='row'>\n                            <Grid sx={{ mr: 1, mb: -1 }}>\n                                <img src={value.icon} alt='' width='24' height='24' />\n                            </Grid>\n                            <Grid>\n                                <Typography>{value.symbol || value.address}</Typography>\n                            </Grid>\n                        </Grid>\n                    </MenuItem>\n                )\n            }\n        })\n        return r\n    }\n\n    return (\n        <div>\n            <Box sx={{ p: 2, border: '0px solid', mt: 1, mb: 4, boxShadow: 2 }}>\n                <Grid container sx={{ mb: 4 }}>\n                    <BoxHeader name='Add Liquidity' />\n                </Grid>\n\n                <Grid container spacing={2}>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <InputLabel id='token1-label'>Token 1:</InputLabel>\n                            <Select\n                                labelId='token1-label'\n                                id='token1-select'\n                                value={token1}\n                                label='Token 1'\n                                onChange={handleToken1Select}>\n                                {menuItems(token2)}\n                            </Select>\n                        </FormControl>\n                        <Balance\n                            token={token1}\n                            amount={getWalletTokenAmount(token1)}\n                            showMaxButton={true}\n                            setMaxAmountHandler={handleTokenAmountChange}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <TextField\n                                helperText='Amount to provide'\n                                id='token1-amount'\n                                inputProps={{\n                                    variant: 'outlined',\n                                    placeholder: '0.00',\n                                    type: 'string',\n                                    autoComplete: 'off',\n                                    'aria-labelledby': 'input-amount1'\n                                }}\n                                value={token1Amount ? token1Amount : ''}\n                                onChange={(e) =>\n                                    handleTokenAmountChange(token1, e.target.value)\n                                }\n                                error={\n                                    isSufficientBalanceInWallet(token1, token1Amount) ===\n                                    WALLET_SUFFICIENT_BALANCE.FALSE\n                                        ? true\n                                        : false\n                                }\n                                disabled={token1 === '' ? true : false}\n                            />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n\n                <Grid container spacing={2} sx={{ mt: 2 }}>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <InputLabel id='token2-label'>Token 2:</InputLabel>\n                            <Select\n                                labelId='token2-label'\n                                id='token2-select'\n                                value={token2}\n                                label='Token 2'\n                                onChange={handleToken2Select}>\n                                {menuItems(token1)}\n                            </Select>\n                        </FormControl>\n                        <Balance\n                            token={token2}\n                            amount={getWalletTokenAmount(token2)}\n                            showMaxButton={true}\n                            setMaxAmountHandler={handleTokenAmountChange}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <FormControl fullWidth>\n                            <TextField\n                                helperText='Amount to provide'\n                                id='token2-amount'\n                                inputProps={{\n                                    variant: 'outlined',\n                                    placeholder: '0.00',\n                                    type: 'string',\n                                    autoComplete: 'off',\n                                    'aria-labelledby': 'input-amount2'\n                                }}\n                                value={token2Amount ? token2Amount : ''}\n                                onChange={(e) =>\n                                    handleTokenAmountChange(token2, e.target.value)\n                                }\n                                error={\n                                    isSufficientBalanceInWallet(token2, token2Amount) ===\n                                    WALLET_SUFFICIENT_BALANCE.FALSE\n                                        ? true\n                                        : false\n                                }\n                                disabled={token2 === '' ? true : false}\n                            />\n                        </FormControl>\n                    </Grid>\n                </Grid>\n\n                {priceAndShare()}\n\n                <Card sx={{ minWidth: 275, mb: 2, mt: 3, boxShadow: 2 }}>\n                    <ConnectWallet secondary='true' />\n                    <Approve\n                        token={token1}\n                        tokenAmount={token1Amount}\n                        activePoolId={activePoolId}\n                        tokenInRange={\n                            isSufficientBalanceInWallet(token1, token1Amount) ===\n                            WALLET_SUFFICIENT_BALANCE.TRUE\n                        }\n                    />\n                    <Approve\n                        token={token2}\n                        tokenAmount={token2Amount}\n                        activePoolId={activePoolId}\n                        tokenInRange={\n                            isSufficientBalanceInWallet(token2, token2Amount) ===\n                            WALLET_SUFFICIENT_BALANCE.TRUE\n                        }\n                    />\n                    {addLiquidityButton()}\n                </Card>\n            </Box>\n\n            {/* User's position boxes */}\n            <Positions />\n        </div>\n    )\n}\n\nexport default Provide\n","import React from 'react'\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nimport { Typography, Card, Grid, Box } from '@mui/material'\nimport BoxHeader from './BoxHeader.js'\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\n\nfunction Charts() {\n    const labels = [\n        '2021-12-14',\n        '2021-12-13',\n        '2021-12-12',\n        '2021-12-11',\n        '2021-12-10',\n        '2021-12-09',\n        '2021-12-08',\n        '2021-12-07',\n        '2021-12-06',\n        '2021-12-05'\n    ]\n    const datasets = [\n        {\n            id: 1,\n            label: '',\n            data: [\n                9.486967291294242, 9.913585044383598, 6.1093149832212585,\n                8.888170412454828, 9.644500380279675, 5.592256920179448,\n                1.6120884439497363, 1.6694652914713426, 9.780713359093626,\n                6.9842512776941055\n            ]\n        }\n    ]\n    return (\n        <Box sx={{ p: 2, border: '0px solid', mt: 1, mb: 4, boxShadow: 2 }}>\n            <div>\n                <Grid container sx={{ mb: 2 }}>\n                    <BoxHeader name='Charts' />\n                </Grid>\n\n                <Card sx={{ p: 2, boxShadow: 2, mb: -4 }}>\n                    <h1>Coming soon...</h1>\n                </Card>\n            </div>\n        </Box>\n    )\n    /*\n    return (\n        <div>\n            <Card sx={{ mb: 0, mt: 0 }}>\n                <Typography>Overview</Typography>\n                <Grid item container alignItems='center' spacing={2}>\n                    <Grid item xs={6}>\n                        <Line\n                            datasetIdKey='id'\n                            data={{ labels: labels, datasets: datasets }}\n                        />\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <Line\n                            datasetIdKey='id'\n                            data={{ labels: labels, datasets: datasets }}\n                        />\n                    </Grid>\n                </Grid>\n            </Card>\n        </div>\n    )*/\n}\n\nexport default Charts\n","import React, { useState } from 'react'\nimport Swap from './Swap'\nimport Provide from './Provide'\nimport Charts from './Charts'\nimport { Tab, Tabs, Box } from '@mui/material'\n\nconst Main = () => {\n    const [selectedTab, setSelectedTab] = useState(0)\n\n    const handleChange = (event, newValue) => {\n        setSelectedTab(newValue)\n    }\n\n    return (\n        <Box>\n            <Tabs\n                sx={{ mt: 3, mb: 2 }}\n                value={selectedTab}\n                onChange={handleChange}\n                centered>\n                <Tab className='swap-tab' label='Swap' sx={{ fontSize: 18 }} />\n                <Tab className='provide-tab' label='Pools' sx={{ fontSize: 18 }} />\n                <Tab className='chart-tab' label='Charts' sx={{ fontSize: 18 }} />\n            </Tabs>\n            {selectedTab === 0 && <Swap />}\n            {selectedTab === 1 && <Provide />}\n            {selectedTab === 2 && <Charts />}\n        </Box>\n    )\n}\n\nexport default Main\n","import React from 'react'\nimport { Button } from '@mui/material'\n\nimport { human_readable_hash } from '../services/amm'\n\nfunction PendingTransaction(props) {\n    const handleClick = () => {\n        window.open('https://goerli.voyager.online/tx/' + props.hash, '_blank')\n    }\n\n    return (\n        <div>\n            <Button sx={{ mr: 2 }} variant='contained' onClick={handleClick}>\n                Tx {human_readable_hash(props.hash)} {props.transactionStatus}\n            </Button>\n        </div>\n    )\n}\n\nexport default PendingTransaction\n","import React from 'react'\n\nimport { useRecoilState } from 'recoil'\nimport { useInterval } from 'usehooks-ts'\n\nimport { pendingTxsState } from '../atoms'\nimport PendingTransaction from './PendingTransaction.js'\nimport {\n    getTransactionUpdate,\n    updateAllTokensDynamicData,\n    updatePoolsAndTokens,\n    addToastMsg\n} from '../services/amm'\n\nfunction PendingTransactions() {\n    const [txs] = useRecoilState(pendingTxsState)\n\n    const updateTransactionsStatus = async () => {\n        txs.forEach(async (tx) => {\n            if (!tx.dismiss) {\n                let status = await getTransactionUpdate(tx.hash)\n                if (status !== null) {\n                    // should get here only if there is an update\n                    if (status.includes('RECEIVED')) {\n                        addToastMsg('Transaction Sent', 'success')\n                    }\n                    if (status.includes('REJECTED')) {\n                        addToastMsg('Transaction Rejected', 'error')\n                    }\n                    if (status.includes('PENDING')) {\n                        addToastMsg('Transaction Pending', 'success')\n                        updatePoolsAndTokens(false)\n                        updateAllTokensDynamicData()\n                    }\n                    if (status.includes('ACCEPTED')) {\n                        addToastMsg('Transaction Accepted', 'success')\n                    }\n                }\n            }\n        })\n    }\n    useInterval(updateTransactionsStatus, 10000)\n\n    const pendingTransactions = () => {\n        let r = []\n        txs.forEach((tx) => {\n            if (!tx.dismiss) {\n                r.push(\n                    <PendingTransaction\n                        key={tx.hash}\n                        hash={tx.hash}\n                        transactionStatus={tx.status}>\n                        {' '}\n                    </PendingTransaction>\n                )\n            }\n        })\n        return r\n    }\n\n    return <>{pendingTransactions()}</>\n}\n\nexport default PendingTransactions\n","import React from 'react'\n\nimport { Snackbar, Alert } from '@mui/material'\n\nfunction Toast(props) {\n    const [open, setOpen] = React.useState(props.open)\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        setOpen(false)\n    }\n\n    return (\n        <Snackbar\n            className='toast'\n            open={open}\n            autoHideDuration={6000}\n            onClose={handleClose}>\n            <Alert onClose={handleClose} severity={props.type} sx={{ width: '100%' }}>\n                {props.msg}\n            </Alert>\n        </Snackbar>\n    )\n}\n\nexport default Toast\n","import React from 'react'\n\nimport { useRecoilState } from 'recoil'\n\nimport { toastsState } from '../atoms'\nimport Toast from './Toast.js'\n\nfunction Toasts() {\n    const [toasts] = useRecoilState(toastsState)\n\n    const activeToasts = () => {\n        let allActiveToasts = []\n        toasts.forEach((t) => {\n            if (!t.dismiss) {\n                allActiveToasts.push(\n                    <Toast\n                        key={t.hash}\n                        open={t.dismiss ? false : true}\n                        msg={t.msg}\n                        type={t.type}></Toast>\n                )\n            }\n        })\n        return allActiveToasts\n    }\n\n    return <div>{activeToasts()}</div>\n}\n\nexport default Toasts\n","import React from 'react'\n\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\nimport { Line } from 'react-chartjs-2'\nimport { Typography, Card, Grid } from '@mui/material'\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\n\nfunction Info() {\n    const options = (title) => {\n        return {\n            responsive: true,\n            plugins: {\n                legend: {\n                    position: 'top'\n                },\n                title: {\n                    display: true,\n                    text: title\n                }\n            }\n        }\n    }\n\n    const labels = [\n        '2021-12-14',\n        '2021-12-13',\n        '2021-12-12',\n        '2021-12-11',\n        '2021-12-10',\n        '2021-12-09',\n        '2021-12-08',\n        '2021-12-07',\n        '2021-12-06',\n        '2021-12-05'\n    ]\n    const datasets = [\n        {\n            id: 1,\n            label: '',\n            data: [\n                9.486967291294242, 9.913585044383598, 6.1093149832212585,\n                8.888170412454828, 9.644500380279675, 5.592256920179448,\n                1.6120884439497363, 1.6694652914713426, 9.780713359093626,\n                6.9842512776941055\n            ]\n        }\n    ]\n    /*    return ( <div>\n        123\n        <Line datasetIdKey='id'\n            data={{d1}}></Line>\n    </div>)*/\n\n    return (\n        <div>\n            <Card sx={{ mb: 0, mt: 0 }}>\n                <Typography>Overview</Typography>\n                <Grid item container alignItems='center' spacing={2}>\n                    <Grid item xs={6}>\n                        <Line\n                            options={options('TVL')}\n                            datasetIdKey='id'\n                            data={{ labels: labels, datasets: datasets }}\n                        />\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <Line\n                            options={options('Volume')}\n                            datasetIdKey='id'\n                            data={{ labels: labels, datasets: datasets }}\n                        />\n                    </Grid>\n                </Grid>\n            </Card>\n        </div>\n    )\n}\n\nexport default Info\n","import React, { useEffect } from 'react'\nimport { AppBar, Toolbar, Typography, Container } from '@mui/material'\n\nimport { RecoilRoot } from 'recoil'\n\nimport RecoilNexus from 'recoil-nexus'\nimport { updatePoolsAndTokens } from './services/amm'\nimport { updatePoolsAndTokensStatic } from './services/static_data'\nimport Main from './components/Main'\nimport ConnectWallet from './components/ConnectWallet'\nimport PendingTransactions from './components/PendingTransactions'\nimport Toasts from './components/Toasts'\nimport Info from './components/Info'\nimport { useInterval } from 'usehooks-ts'\nimport Minter from './components/Minter'\nimport ReactGA from 'react-ga'\n\nimport { GAinit, GApage, GAbutton } from './services/ga.js'\n\nimport { getSourceMapRange } from 'typescript'\nimport Charts from './components/Charts'\n\nfunction App() {\n    useEffect(() => {\n        GAinit()\n        GApage('/')\n    }, [])\n\n    // run once, on page load\n    useEffect(() => {\n        updatePoolsAndTokensStatic()\n        console.log('Finished updating static data')\n        updatePoolsAndTokens(true)\n    }, [])\n\n    const updateAMMIntervalCallback = async () => {\n        updatePoolsAndTokens(false)\n    }\n\n    // Timer to update all Pools and Tokens user data (allowance, amount)\n    useInterval(updateAMMIntervalCallback, 15000)\n\n    return (\n            <RecoilRoot>\n                <RecoilNexus />\n                <div className='App'>\n                    <AppBar position='sticky' /*style={{ background: '#2F2F5A' }}*/>\n                        <Toolbar>\n                            <Typography\n                                variant='h4'\n                                color='inherit'\n                                component='div'\n                                sx={{ flexGrow: 1 }}>\n                                mySwap\n                            </Typography>\n                            <PendingTransactions />\n                            <ConnectWallet />\n                        </Toolbar>\n                    </AppBar>\n\n                            <Container maxWidth='sm'>\n                                <Main />\n                            </Container>\n                    <Toasts />\n                </div>\n            </RecoilRoot>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n// import reportWebVitals from './reportWebVitals'\n\nimport CssBaseline from '@mui/material/CssBaseline'\n\nReactDOM.render(\n    <React.StrictMode>\n        <CssBaseline>\n            <App />\n        </CssBaseline>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals()\n"],"sourceRoot":""}